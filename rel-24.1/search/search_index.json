{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Altera FPGA Developer Site  <p>Welcome to the Altera FPGA Developer Site!</p> <p>This site provides key information for Altera Agilex\u2122 5 and Agilex\u2122 7 FPGAs including:</p> <ul> <li>Comprehensive driver information for Linux and software utilities.</li> </ul> <ul> <li>Documentation for how to use example designs and tutorials found on our altera-fpga GitHub site.</li> </ul> <p>   <p></p> <p>Use the table below to help you get started.</p>    Software Developer FPGA Developer Application Developer          Take advantage of our software resources to develop a full stack solution for your applications:* Linux Drivers  * Host Attach Utilities Use our design example resources as a starting point for your own custom design: * Example Designs Review our software utilities and higher level stack offerings:* Host Attach Utilities","text":""},{"location":"common/templates/linux_driver_template/","title":"Linux driver template","text":""},{"location":"common/templates/linux_driver_template/#host-attach-dfl-fpga-management-engine-ip-driver","title":"Host Attach DFL FPGA Management Engine IP Driver","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Stratix 10, Agilex 7</p>"},{"location":"common/templates/linux_driver_template/#introduction","title":"Introduction","text":"<p>This set of drivers is designed to support FME functionality, as implemented under FPGA Device Feature List (DFL) framework. It is used to expose FME capabilities.</p> Driver Mapping Source(s) Required for DFL dfl-fme.ko FPGA Management Engine IP drivers/fpga/ - dfl-fme.h, dfl-fme-main.c, dfl-fme-pr.c, dfl-fme-error.c, dfl-fme-perf.c Y dfl-fme-mgr.ko PR IP drivers/fpga/dfl-fme-mgr.c N dfl-fme-br.ko SW Dependency drivers/fpga/dfl-fme-br.c N dfl-fme-region.ko SW Dependency drivers/fpga/dfl-fme-region.c N <pre><code>graph TD;\n    A[dfl-fme]--&gt;B[dfl-fme-mgr];\n    A[dfl-fme]--&gt;C[dfl-fme-br];\n    A[dfl-fme]--&gt;D[dfl-fme-region]; </code></pre>"},{"location":"common/templates/linux_driver_template/#fpga-management-engine-ip","title":"FPGA Management Engine IP","text":"<p>The FPGA Management Engine IP provides management features for the platform and controls reset and loading of the AFU into the partial reconfiguration region of the FPGA. Implementation of a PR region is optional.</p> <p>Each FME feature exposes its capability to host software drivers through a device feature header (DFH) register found at the beginning of its control status register (CSR) space. The FME CSR maps to physical function 0 (PF0) Base address register 0 (BAR0) so that software can access it through a single PCIe link. For more information about DFHs, refer to the Device Feature Header (DFH) structure.</p>"},{"location":"common/templates/linux_driver_template/#driver-sources","title":"Driver Sources","text":"<p>The source code for these drivers can be found at https://github.com/OFS/linux-dfl/tree/master/drivers/fpga, where branches labelled fpga-ofs-dev-*-lts correspond with the latest developmental versions of the DFL driver suite on that specific kernel version.</p>"},{"location":"common/templates/linux_driver_template/#driver-capabilities","title":"Driver Capabilities","text":"<p>This driver set is a DFL specific implementation of generic FPGA drivers available in the kernel. <code>dfl-fme-mgr</code> is a DFL specific instantiation of the generic FPGA manager (drivers/linux/fpga/fpga-mgr.c), <code>dfl-fme-br</code> builds on top of a generic FPGA bridge (drivers/fpga/fpga-bridge.c), and <code>dfl-fme-region</code> instantiates an FPGA region. All three supplementary DFL Drivers depend on <code>dfl-fme</code>.</p> <p>The DFL FME driver is a feature device implemented under the Device Feature List (DFL) framework. It enables the platform driver for the FME IP and implements all FPGA platform level management features. Only one FME is created per DFL based FPGA device. The DFL Bridge, Manager, and Region drivers are only required when attempting to configure a PR region in the FIM.</p>"},{"location":"common/templates/linux_driver_template/#kernel-configurations","title":"Kernel Configurations","text":"<p>FPGA_DFL_FME</p> <p></p> <p>FPGA_DFL_FME_MGR</p> <p></p> <p>FPGA_DFL_FME_BRIDGE</p> <p></p> <p>FPGA_DFL_FME_REGION</p> <p></p>"},{"location":"common/templates/linux_driver_template/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"common/templates/linux_driver_template/#example-designs","title":"Example Designs","text":"<p>The FPGA Management Engine IP is included as a part of the FIM design for PCIe Attach supporting DFL, Stratix 10 PCIe Attach, and SoC Attach. Please refer to site for more information about these designs.</p>"},{"location":"doc_modules/Notices_%26_Disclaimers/","title":"Notices & Disclaimers","text":""},{"location":"doc_modules/Notices_%26_Disclaimers/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"driver-list/driver-list-all/","title":"All Drivers","text":"<p>This table provides a comprehensive list for all drivers available for Agilex 5 and Agilex 7. </p> <p>You can filter your search by entering your query into any number of available columns.</p> <ul> <li>The Name column indicate the name of the IP that the driver supports.</li> <li>If a driver exists then a link to a driver page is provided for more details. N/A means driver support \"Not Available\" for the particular IP.</li> </ul> IP Name Linux Driver Zephyr Driver Altera 16550 Compatible UART Core Linux Zephyr Clock Manager Linux Zephyr Cold &amp; Warm Reset -Power State Coordination Interface (PSCI) N/A PSCI Device Feature List (DFL) Capability Linux N/A DFL Accelerator Functional Unit (AFU workload) Linux N/A DFL FPGA Management Engine IP Linux N/A DFL Memory Interface/Subsystem Linux N/A DFL Time of Day Clock Intel FPGA IP Linux: Host Attach TOD Linux: Embedded TOD N/A Direct Memory Access Controller (DMAC) Linux zephyr Error Detection and Correction (EDAC) Linux N/A Ethernet Media Access Controller Linux N/A Ethernet Subsystem (HSSI SS) Linux N/A Ethernet Subsystem Intel FPGA IP (HSSI xTile) Linux N/A Ethernet 1588 PTP Time of Day Clock Linux N/A General Purpose Timers Linux N/A Generic Serial Flash Interface Intel FPGA IP Linux N/A GPIO Linux Zephyr I2C Linux N/A I3C Linux N/A Interrupt Controller (GICv3) Linux Agilex 5  Agilex 7 Microchip\u00ae Zarlink ZL30793 Network Synchronizer Linux N/A MSGDMA Linux N/A NAND Controller Linux N/A PCIe Subsystem Linux N/A QSPI Linux Zephyr QSFP Linux N/A Reset Manager Linux Zephyr Single Error Upset (SEU) N/A Zephyr SD/eMMC Controller Linux N/A SMMU Linux N/A SPI Linux N/A System Manager Linux N/A Timer N/A Zephyr UART Linux N/A USB 2.0 OTG Linux N/A Watchdog Timer Linux Zephyr"},{"location":"driver-list/driver-list-baremetal/","title":"Bare Metal Drivers","text":"<p>The table below provides a comprehensive list of the drivers available for Agilex 5 FPGA IP.</p> <ul> <li>The target link indicate the devices this driver supports.  </li> <li>The description link provides feature description, architectural details, known issues and release information.</li> <li>Upstreamed column indicates if driver is being mainstreamed in the Linux tree.</li> </ul> <p>Location column indicates the link where the driver is located (userspace, linux.org, Quartus).</p> Name Supported Device(s) Documentation Upstream Status Kernel Source N/A N/A N/A N/A N/A"},{"location":"driver-list/driver-list-linux/","title":"Linux Drivers","text":"<p>The table below provides a comprehensive list of the drivers available for Agilex 5 and Agilex 7.</p> <ul> <li>IP Name column indicates what type of IP the driver targets.  </li> <li>HPS or PCIe column indicates if the driver is targeting the embedded Host Processor System found on our devices or a server host or both.</li> <li>Documentation column provides a link to driver description, architectural details, driver capabilities and configurations, known issues and release information.</li> <li>Upstream Status column indicates mainstream status of driver.</li> <li>Kernel Source indicates location of driver.</li> </ul> <p>You can use the filter fields to narrow your search.</p> IP Name Supported Device(s) HPS or PCIe Host Documentation Upstream Status Kernel Source Altera 16550 Compatibe UART Core Agilex 7 PCIe UART Yes 8250_dfl Clock Manager Agilex 5 HPS Clock Manager No clk_agilex5 Device Feature List  (DFL) Capability Stratix 10  Agilex 7 PCIe dfl Yes dfl DFL Accelerator Functional Unit (AFU workload) Agilex 7  Stratix 10 PCIe dfl-afu Yes dfl-afu-dma-regiondfl-afu-errordfl-afu-regiondfl-afu-main DFL FPGA Management Engine IP Agilex 7 Stratix 10 PCIe dfl-fme Yes dfl-fme-mgr dfl-fme-brdfl-fme-region DFL Memory Interface/Subsystem Agilex 7Stratix 10 PCIe Memory Yes dfl-emif Direct Memory Access Controller (DMAC) Agilex 5 HPS DMAC Yes dmac Error Detection and Correction (EDAC) Agilex 5 HPS EDAC Yes altera_edac Ethernet 1588 PTP Time of Day Clock Agilex 7 HPS/PCIe PCIe Attach ToD Embedded ToD Yes ToD PCIe-Attach driver  ToD Embedded driver  Ethernet Media Access Controller Agilex 5 HPS EMAC No dwxgmac2_core Ethernet Subsystem Intel FPGA IP (MAC-Specific) Agilex 7 HPS HSSI No intel_fpga_hssiss Ethernet Subsystem Intel FPGA IP (Tile-Specific) Agilex 7 HPS hssi_xtile No eth_main etile_fec etile_driver etile_ethtool ftile_ethtool ftile_fec ftile_driver General Purpose Timers Agilex 7  Agilex 5 HPS GP Timers Yes dw_apb_timer Generic Serial Flash Interface Intel FPGA IP Agilex 7Stratix 10 PCIe Generic Serial Flash Yes spi General Purpose I/O (GPIO) Agilex 7  Agilex 5 HPS gpio Yes gpio-dwapb I2C Agilex 7  Agilex 5 HPS I2C Yes I2c driver I3C Agilex 5 HPS I3C Yes I3c driver Interrupt Controller (GICv3) Agilex 5 HPS GICv3 Yes GICv3 driver Microchip\u00ae Zarlink ZL30793 Network Synchronizer Agilex 7 HPS Zarlink No Zarlink driver  MSGDMA Agilex 7 HPS MSGDMA No MSGDMA driver NAND Controller Agilex 5 HPS NAND Yes cadence-nand-controller PCIe Subsystem Agilex 7 PCIe PCIe Subsystem Yes dfl-pcie QSFP Agilex 7 HPS QSFP No qsfp QSPI Agilex 5 HPS QSPI No spi-cadence-quadspi Reset Manager Agilex 5 HPS Reset Manager No Reset Manager driver SD/eMMC Controller Agilex 5 HPS SD/eMMC Yes SD/eMMC driver SPI Agilex 7 Agilex 5 HPS SPI Yes SPI driver System Manager Agilex 5 HPS System manager Yes sysmgr System Memory Management Unit Agilex 5 HPS SMMU Yes SMMU driver UART Agilex 7  Agilex 5 HPS UART Yes UART driver USB 2.0 OTG Agilex 7  Agilex 5 HPS USB2.0 Yes USB 2.0 driver  Userspace I/O (UIO) Agilex 7 Stratix 10 PCIe UIO Yes UIO driver Watchdog Timer Agilex 5 HPS Watchdog Timer Yes dw_wdt"},{"location":"driver-list/driver-list-zephyr/","title":"Zephyr Drivers","text":"<p>The table below provides a comprehensive list of embedded Zephyr drivers available for the HPS and Nios V on Agilex 5 FPGA devices.</p> <ul> <li>IP Name column indicates what type of IP the driver targets. </li> <li>Target is </li> <li>Documentation column provides a link to driver description, architectural details, driver capabilities and configurations, known issues and release information.</li> <li>Upstream Status column indicates mainstream status of driver.</li> <li>Kernel Source indicates location of driver.</li> </ul> <p>You can use the filter fields to narrow your search.</p> IP Name Supported Device(s) Target Documentation Upstream Status Kernel Source Arm\u00ae Silicon Provider (SiP) Services Agilex 5 HPS SiP-SVC Yes sip_smc_intel_socfpga Clock Manager Agilex 5 HPS Clock Manager Yes clock_control_agilex5 Cold &amp; Warm Reset -Power State Coordination Interface (PSCI) Agilex 5 HPS PSCI Yes pm_cpu_ops_psci DMAC Agilex 5 HPS DMAC Yes dma General Purpose Timer Agilex 5 HPS Timer Yes counter_dw_timer GPIO Agilex 5 HPS gpio No gpio_intel_socfpga Cold &amp; Warm Reset -Power State Coordination Interface (PSCI) Agilex 5 HPS psci No psci QSPI Agilex 5 HPS QSPI Yes flash_cadence_qspi_nor Reset Manager Agilex 5 HPS Reset Manager Yes reset_intel_socfpga Single Event Upset (SEU) Agilex 5 HPS SEU In Progress pull/67097 SMP Agilex 5 HPS SMP Yes smp UART Agilex 5 HPS UART Yes uart_ns16550 Watchdog Timer Agilex 5 HPS Watchdog Timer Yes wdt_dw"},{"location":"driver-list_all/","title":"All Drivers","text":"<p>This table provides a comprehensive list for all drivers available for Agilex 5 and Agilex 7. </p> <p>You can filter your search by entering your query into any number of available columns.</p> <ul> <li>The Name column indicate the name of the IP that the driver supports.</li> <li>If a driver exists then a link to a driver page is provided for more details. N/A means driver support \"Not Available\" for the particular IP.</li> </ul> IP Name Linux Driver Zephyr Driver Altera 16550 Compatible UART Core Linux Zephyr Clock Manager Linux Zephyr Cold &amp; Warm Reset -Power State Coordination Interface (PSCI) N/A PSCI Device Feature List (DFL) Capability Linux N/A DFL Accelerator Functional Unit (AFU workload) Linux N/A DFL FPGA Management Engine IP Linux N/A DFL Memory Interface/Subsystem Linux N/A DFL Time of Day Clock Intel FPGA IP Linux: Host Attach TOD Linux: Embedded TOD N/A Direct Memory Access Controller (DMAC) Linux zephyr Error Detection and Correction (EDAC) Linux N/A Ethernet Media Access Controller Linux N/A Ethernet Subsystem (HSSI SS) Linux N/A Ethernet Subsystem Intel FPGA IP (HSSI xTile) Linux N/A Ethernet 1588 PTP Time of Day Clock Linux N/A General Purpose Timers Linux N/A Generic Serial Flash Interface Intel FPGA IP Linux N/A GPIO Linux Zephyr I2C Linux N/A I3C Linux N/A Interrupt Controller (GICv3) Linux Agilex 5  Agilex 7 Microchip\u00ae Zarlink ZL30793 Network Synchronizer Linux N/A MSGDMA Linux N/A NAND Controller Linux N/A PCIe Subsystem Linux N/A QSPI Linux Zephyr QSFP Linux N/A Reset Manager Linux Zephyr Single Error Upset (SEU) N/A Zephyr SD/eMMC Controller Linux N/A SMMU Linux N/A SPI Linux N/A System Manager Linux N/A Timer N/A Zephyr UART Linux N/A USB 2.0 OTG Linux N/A Watchdog Timer Linux Zephyr"},{"location":"driver-list_baremetal/","title":"Bare Metal Drivers","text":"<p>The table below provides a comprehensive list of the drivers available for Agilex 5 FPGA IP.</p> <ul> <li>The target link indicate the devices this driver supports.  </li> <li>The description link provides feature description, architectural details, known issues and release information.</li> <li>Upstreamed column indicates if driver is being mainstreamed in the Linux tree.</li> </ul> <p>Location column indicates the link where the driver is located (userspace, linux.org, Quartus).</p> Name Supported Device(s) Documentation Upstream Status Kernel Source N/A N/A N/A N/A N/A"},{"location":"driver-list_linux/","title":"Linux Drivers","text":"<p>The table below provides a comprehensive list of the drivers available for Agilex 5 and Agilex 7.</p> <ul> <li>IP Name column indicates what type of IP the driver targets.  </li> <li>HPS or PCIe column indicates if the driver is targeting the embedded Host Processor System found on our devices or a server host or both.</li> <li>Documentation column provides a link to driver description, architectural details, driver capabilities and configurations, known issues and release information.</li> <li>Upstream Status column indicates mainstream status of driver.</li> <li>Kernel Source indicates location of driver.</li> </ul> <p>You can use the filter fields to narrow your search.</p> IP Name Supported Device(s) HPS or PCIe Host Documentation Upstream Status Kernel Source Altera 16550 Compatibe UART Core Agilex 7 PCIe UART Yes 8250_dfl Clock Manager Agilex 5 HPS Clock Manager No clk_agilex5 Device Feature List  (DFL) Capability Stratix 10  Agilex 7 PCIe dfl Yes dfl DFL Accelerator Functional Unit (AFU workload) Agilex 7  Stratix 10 PCIe dfl-afu Yes dfl-afu-dma-regiondfl-afu-errordfl-afu-regiondfl-afu-main DFL FPGA Management Engine IP Agilex 7 Stratix 10 PCIe dfl-fme Yes dfl-fme-mgr dfl-fme-brdfl-fme-region DFL Memory Interface/Subsystem Agilex 7Stratix 10 PCIe Memory Yes dfl-emif Direct Memory Access Controller (DMAC) Agilex 5 HPS DMAC Yes dmac Error Detection and Correction (EDAC) Agilex 5 HPS EDAC Yes altera_edac Ethernet 1588 PTP Time of Day Clock Agilex 7 HPS/PCIe PCIe Attach ToD Embedded ToD Yes ToD PCIe-Attach driver  ToD Embedded driver  Ethernet Media Access Controller Agilex 5 HPS EMAC No dwxgmac2_core Ethernet Subsystem Intel FPGA IP (MAC-Specific) Agilex 7 HPS HSSI No intel_fpga_hssiss Ethernet Subsystem Intel FPGA IP (Tile-Specific) Agilex 7 HPS hssi_xtile No eth_main etile_fec etile_driver etile_ethtool ftile_ethtool ftile_fec ftile_driver General Purpose Timers Agilex 7  Agilex 5 HPS GP Timers Yes dw_apb_timer Generic Serial Flash Interface Intel FPGA IP Agilex 7Stratix 10 PCIe Generic Serial Flash Yes spi General Purpose I/O (GPIO) Agilex 7  Agilex 5 HPS gpio Yes gpio-dwapb I2C Agilex 7  Agilex 5 HPS I2C Yes I2c driver I3C Agilex 5 HPS I3C Yes I3c driver Interrupt Controller (GICv3) Agilex 5 HPS GICv3 Yes GICv3 driver Microchip\u00ae Zarlink ZL30793 Network Synchronizer Agilex 7 HPS Zarlink No Zarlink driver  MSGDMA Agilex 7 HPS MSGDMA No MSGDMA driver NAND Controller Agilex 5 HPS NAND Yes cadence-nand-controller PCIe Subsystem Agilex 7 PCIe PCIe Subsystem Yes dfl-pcie QSFP Agilex 7 HPS QSFP No qsfp QSPI Agilex 5 HPS QSPI No spi-cadence-quadspi Reset Manager Agilex 5 HPS Reset Manager No Reset Manager driver SD/eMMC Controller Agilex 5 HPS SD/eMMC Yes SD/eMMC driver SPI Agilex 7 Agilex 5 HPS SPI Yes SPI driver System Manager Agilex 5 HPS System manager Yes sysmgr System Memory Management Unit Agilex 5 HPS SMMU Yes SMMU driver UART Agilex 7  Agilex 5 HPS UART Yes UART driver USB 2.0 OTG Agilex 7  Agilex 5 HPS USB2.0 Yes USB 2.0 driver  Userspace I/O (UIO) Agilex 7 Stratix 10 PCIe UIO Yes UIO driver Watchdog Timer Agilex 5 HPS Watchdog Timer Yes dw_wdt"},{"location":"driver-list_zephyr/","title":"Zephyr Drivers","text":"<p>The table below provides a comprehensive list of embedded Zephyr drivers available for the HPS and Nios V on Agilex 5 FPGA devices.</p> <ul> <li>IP Name column indicates what type of IP the driver targets. </li> <li>Target is </li> <li>Documentation column provides a link to driver description, architectural details, driver capabilities and configurations, known issues and release information.</li> <li>Upstream Status column indicates mainstream status of driver.</li> <li>Kernel Source indicates location of driver.</li> </ul> <p>You can use the filter fields to narrow your search.</p> IP Name Supported Device(s) Target Documentation Upstream Status Kernel Source Arm\u00ae Silicon Provider (SiP) Services Agilex 5 HPS SiP-SVC Yes sip_smc_intel_socfpga Clock Manager Agilex 5 HPS Clock Manager Yes clock_control_agilex5 Cold &amp; Warm Reset -Power State Coordination Interface (PSCI) Agilex 5 HPS PSCI Yes pm_cpu_ops_psci DMAC Agilex 5 HPS DMAC Yes dma General Purpose Timer Agilex 5 HPS Timer Yes counter_dw_timer GPIO Agilex 5 HPS gpio No gpio_intel_socfpga Cold &amp; Warm Reset -Power State Coordination Interface (PSCI) Agilex 5 HPS psci No psci QSPI Agilex 5 HPS QSPI Yes flash_cadence_qspi_nor Reset Manager Agilex 5 HPS Reset Manager Yes reset_intel_socfpga Single Event Upset (SEU) Agilex 5 HPS SEU In Progress pull/67097 SMP Agilex 5 HPS SMP Yes smp UART Agilex 5 HPS UART Yes uart_ns16550 Watchdog Timer Agilex 5 HPS Watchdog Timer Yes wdt_dw"},{"location":"embedded-designs/agilex-5/e-series/premium/boot-examples/ug-linux-boot-agx5e-premium/","title":"Agilex 5 E-Series GHRD Linux Boot Examples","text":""},{"location":"embedded-designs/agilex-5/e-series/premium/boot-examples/ug-linux-boot-agx5e-premium/#introduction","title":"Introduction","text":""},{"location":"embedded-designs/agilex-5/e-series/premium/boot-examples/ug-linux-boot-agx5e-premium/#overview","title":"Overview","text":"<p>This page contains instructions on how to build Linux systems from separate components: Hardware Design, U-Boot, Arm Trusted Firmware, Linux kernel and device tree, Linux root filesystem. This is different from the Golden System Reference Design, where all the software is built through Yocto. While the instructions use Yocto for building the root file system, alternatives could be used there, such as the buildroot utility for example.</p> <p>The following scenarios are covered:</p> <ul> <li>HPS Enablement Board: boot from SD card, and boot from QSPI</li> <li>HPS NAND Board: boot from eMMC flash</li> <li>HPS Test Board: boot from SD card</li> </ul> <p>The instructions on this page are based on the GSRD.</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/boot-examples/ug-linux-boot-agx5e-premium/#prerequisites","title":"Prerequisites","text":"<p>The following are required to be able to fully exercise the guides from this page:</p> <ul> <li>Altera Agilex 5 FPGA E-Series 065B Premium Development Kit, ordering code DK-A5E065BB32AES1. Refer to board documentation for more information about the development kit.<ul> <li>HPS Enablement  Expansion Board. Included with the development kit</li> <li>HPS NAND Board. Enables eMMC storage for HPS. Orderable separately</li> <li>HPS Test Board. Supports SD card boot, and external Arm tracing. Orderable separately</li> <li>Mini USB Cable. Included with the development kit</li> <li>Micro USB Cable. Included with the development kit</li> <li>Ethernet Cable. Included with the development kit</li> <li>Micro SD card and USB card writer. Included with the development kit</li> </ul> </li> <li>Host PC with<ul> <li>64 GB of RAM. Less will be fine for only exercising the binaries, and not rebuilding the GSRD.</li> <li>Linux OS installed. Ubuntu 22.04LTS was used to create this page, other versions and distributions may work too</li> <li>Serial terminal (for example GtkTerm or Minicom on Linux and TeraTerm or PuTTY on Windows)</li> <li>Intel Quartus Prime Pro Edition version 24.1. Used to recompile the hardware design. If only writing binaris is required, then the smaller Intel Quartus Prime Pro Edition Programmer version 24.1 is sufficient.</li> <li>TFTP server. This used to download the eMMC binaries to board to be flashed by U-Boot</li> </ul> </li> <li>Local Ethernet network, with DHCP server</li> <li>Internet connection. For downloading the files.</li> </ul>"},{"location":"embedded-designs/agilex-5/e-series/premium/boot-examples/ug-linux-boot-agx5e-premium/#component-versions","title":"Component Versions","text":"<p>The instructions on this page use the following component versions:</p> Component Location Branch Commit ID/Tag GHRD https://github.com/altera-opensource/ghrd-socfpga master QPDS24.1_REL_AGILEX5_GSRD_PR Linux https://github.com/altera-opensource/linux-socfpga socfpga-6.1.68-lts QPDS24.1_REL_AGILEX5_GSRD_PR Arm Trusted Firmware https://github.com/altera-opensource/arm-trusted-firmware socfpga_v2.10.0 QPDS24.1_REL_AGILEX5_GSRD_PR U-Boot https://github.com/altera-opensource/u-boot-socfpga socfpga_v2023.10 QPDS24.1_REL_AGILEX5_GSRD_PR Yocto Project: poky https://git.yoctoproject.org/poky nanbield latest Yocto Project: meta-intel-fpga https://git.yoctoproject.org/meta-intel-fpga nanbield QPDS24.1_REL_AGILEX5_GSRD_PR"},{"location":"embedded-designs/agilex-5/e-series/premium/boot-examples/ug-linux-boot-agx5e-premium/#development-kit","title":"Development Kit","text":"<p>Refer to Development Kit for details about the board, including how to install the HPS Boards, and how to set MSEL dispswitches.</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/boot-examples/ug-linux-boot-agx5e-premium/#release-notes","title":"Release Notes","text":"<p>Refer to Release Notes for release readiness information and known issues.</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/boot-examples/ug-linux-boot-agx5e-premium/#hps-enablement-board","title":"HPS Enablement Board","text":"<p>This section demonstrates how to build a Linux system from separate components, targetting the HPS Enablement Board. Both booting from SD card and booting from QSPI are covered.</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/boot-examples/ug-linux-boot-agx5e-premium/#boot-from-sd-card","title":"Boot from SD Card","text":"Setup Environment <p>1. Create the top folder to store all the build artifacts:</p> <pre><code>sudo rm -rf artifacts.enablement\nmkdir artifacts.enablement\ncd artifacts.enablement\nexport TOP_FOLDER=`pwd`\n</code></pre> <p>2. Download and setup the build toolchain. It will be used only by the GHRD makefile to build the debug HPS FSBL, to build the _hps_debug.sof file:</p> <pre><code>cd $TOP_FOLDER\nwget https://developer.arm.com/-/media/Files/downloads/gnu/11.2-2022.02/binrel\\\n/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz\ntar xf gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz\nrm -f gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz\nexport PATH=`pwd`/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu/bin:$PATH\nexport ARCH=arm64\nexport CROSS_COMPILE=aarch64-none-linux-gnu-\n</code></pre> <p>3. Set up the Quartus tools in the PATH, so they are accessible without full path</p> <pre><code>export QUARTUS_ROOTDIR=~/intelFPGA_pro/24.1/quartus/\nexport PATH=$QUARTUS_ROOTDIR/bin:$QUARTUS_ROOTDIR/linux64:$QUARTUS_ROOTDIR/../qsys/bin:$PATH\n</code></pre> Build Hardware Design <pre><code>cd $TOP_FOLDER\nrm -rf ghrd-socfpga agilex5_soc_devkit_ghrd\ngit clone -b QPDS24.1_REL_AGILEX5_GSRD_PR https://github.com/altera-opensource/ghrd-socfpga\nmv ghrd-socfpga/agilex5_soc_devkit_ghrd .\nrm -rf ghrd-socfpga\ncd agilex5_soc_devkit_ghrd\nmake config\nmake DEVICE=A5ED065BB32AE6SR0 HPS_EMIF_MEM_CLK_FREQ_MHZ=800 HPS_EMIF_REF_CLK_FREQ_MHZ=100 generate_from_tcl\nmake all\ncd ..\n</code></pre> <p>The following files are created:</p> <ul> <li><code>$TOP_FOLDER/agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof</code></li> <li><code>$TOP_FOLDER/agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0_hps_debug.sof</code></li> </ul> Build Arm Trusted Firmware <pre><code>cd $TOP_FOLDER\nrm -rf arm-trusted-firmware\ngit clone https://github.com/altera-opensource/arm-trusted-firmware\ncd arm-trusted-firmware\ngit checkout -b test -t origin/socfpga_v2.10.0\nmake -j 48 PLAT=agilex5 bl31 cd ..\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/arm-trusted-firmware/build/agilex5/release/bl31.bin</code></li> </ul> Build U-Boot <pre><code>cd $TOP_FOLDER\nrm -rf u-boot-socfpga v1-0001-HSD-15015933655-ddr-altera-agilex5-Hack-dual-port-DO-NOT-MERGE.patch\nwget https://raw.githubusercontent.com/altera-opensource/meta-intel-fpga-refdes/QPDS24.1_REL_AGILEX5_GSRD_PR/recipes-bsp/u-boot/files/v1-0001-HSD-15015933655-ddr-altera-agilex5-Hack-dual-port-DO-NOT-MERGE.patch\ngit clone https://github.com/altera-opensource/u-boot-socfpga\ncd u-boot-socfpga git checkout -b test -t origin/socfpga_v2023.10\npatch -p1 &lt; ../v1-0001-HSD-15015933655-ddr-altera-agilex5-Hack-dual-port-DO-NOT-MERGE.patch\n# enable dwarf4 debug info, for compatibility with arm ds\nsed -i 's/PLATFORM_CPPFLAGS += -D__ARM__/PLATFORM_CPPFLAGS += -D__ARM__ -gdwarf-4/g' arch/arm/config.mk\n# only boot from SD, do not try QSPI and NAND\nsed -i 's/u-boot,spl-boot-order.*/u-boot\\,spl-boot-order = \\&amp;mmc;/g' arch/arm/dts/socfpga_agilex5_socdk-u-boot.dtsi\n# disable NAND in the device tree\nsed -i '/&amp;nand {/!b;n;c\\\\tstatus = \"disabled\";' arch/arm/dts/socfpga_agilex5_socdk-u-boot.dtsi\n# link to atf\nln -s ../arm-trusted-firmware/build/agilex5/release/bl31.bin # create configuration custom file. \ncat &lt;&lt; EOF &gt; config-fragment\n# use Image instead of kernel.itb\nCONFIG_BOOTFILE=\"Image\"\n# disable NAND/UBI related settings from defconfig. \nCONFIG_NAND_BOOT=n\nCONFIG_SPL_NAND_SUPPORT=n\nCONFIG_CMD_NAND_TRIMFFS=n\nCONFIG_CMD_NAND_LOCK_UNLOCK=n\nCONFIG_NAND_DENALI_DT=n\nCONFIG_SYS_NAND_U_BOOT_LOCATIONS=n\nCONFIG_SPL_NAND_FRAMEWORK=n\nCONFIG_CMD_NAND=n\nCONFIG_MTD_RAW_NAND=n\nCONFIG_CMD_UBI=n\nCONFIG_CMD_UBIFS=n\nCONFIG_MTD_UBI=n\nCONFIG_ENV_IS_IN_UBI=n\nCONFIG_UBI_SILENCE_MSG=n\nCONFIG_UBIFS_SILENCE_MSG=n\n# disable distroboot and use specific boot command. \nCONFIG_DISTRO_DEFAULTS=n\nCONFIG_HUSH_PARSER=y\nCONFIG_SYS_PROMPT_HUSH_PS2=\"&gt; \"\nCONFIG_USE_BOOTCOMMAND=y\nCONFIG_BOOTCOMMAND=\"load mmc 0:1 \\${loadaddr} ghrd.core.rbf; fpga load 0 \\${loadaddr} \\${filesize};bridge enable; mmc rescan; fatload mmc 0:1 82000000 Image;fatload mmc 0:1 86000000 socfpga_agilex5_socdk.dtb;setenv bootargs console=ttyS0,115200 root=\\${mmcroot} rw rootwait;booti 0x82000000 - 0x86000000\"\nCONFIG_CMD_FAT=y\nCONFIG_CMD_FS_GENERIC=y\nCONFIG_DOS_PARTITION=y\nCONFIG_SPL_DOS_PARTITION=y\nCONFIG_CMD_PART=y\nCONFIG_SPL_CRC32=y\nCONFIG_LZO=y\nCONFIG_CMD_DHCP=y\n# enable more QSPI flash manufacturers\nCONFIG_SPI_FLASH_MACRONIX=y\nCONFIG_SPI_FLASH_GIGADEVICE=y\nCONFIG_SPI_FLASH_WINBOND=y\nCONFIG_SPI_FLASH_ISSI=y\nEOF\n# build U-Boot\nmake clean &amp;&amp; make mrproper\nmake socfpga_agilex5_defconfig # use created custom configuration file to merge with the default configuration obtained in .config file. \n./scripts/kconfig/merge_config.sh -O . -m .config config-fragment\nmake -j 64\ncd ..\n</code></pre> <p>The following files are created:</p> <ul> <li><code>$TOP_FOLDER/u-boot-socfpga/u-boot.itb</code></li> <li><code>$TOP_FOLDER/u-boot-socfpga/spl/u-boot-spl-dtb.hex</code></li> </ul> Build QSPI Image <pre><code>cd $TOP_FOLDER\nquartus_pfg -c agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof ghrd.jic \\\n-o device=MT25QU128 \\\n-o flash_loader=A5ED065BB32AE6SR0 \\\n-o hps_path=$TOP_FOLDER/u-boot-socfpga/spl/u-boot-spl-dtb.hex \\\n-o mode=ASX4 \\\n-o hps=1\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/ghrd.hps.jic</code></li> </ul> Build HPS RBF <p>This is an optional step, in which you can build an HPS RBF file, which can be used to configure the HPS through JTAG instead of QSPI though the JIC file.</p> <pre><code>cd $TOP_FOLDER\nquartus_pfg -c agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof ghrd.rbf \\\n-o hps_path=$TOP_FOLDER/u-boot-socfpga/spl/u-boot-spl-dtb.hex \\\n-o hps=1\n</code></pre> <p>The following file is created:</p> <ul> <li>`$TOP_FOLDER/ghrd.hps.rbf</li> </ul> Build Linux <pre><code>cd $TOP_FOLDER\nrm -rf linux-socfpga\ngit clone https://github.com/altera-opensource/linux-socfpga\ncd linux-socfpga\ngit checkout -b test -t origin/socfpga-6.1.68-lts\nmake defconfig make -j 64 Image &amp;&amp; make intel/socfpga_agilex5_socdk.dtb </code></pre> <p>The following files are created:</p> <ul> <li><code>$TOP_FOLDER/linux-socfpga/arch/arm64/boot/dts/intel/socfpga_agilex5_socdk.dtb</code></li> <li><code>$TOP_FOLDER/linux-socfpga/arch/arm64/boot/Image</code></li> </ul> Build Rootfs <pre><code>cd $TOP_FOLDER\nrm -rf yocto &amp;&amp; mkdir yocto &amp;&amp; cd yocto\ngit clone -b nanbield https://git.yoctoproject.org/poky\ngit clone -b nanbield https://git.yoctoproject.org/meta-intel-fpga\ngit clone -b nanbield https://github.com/openembedded/meta-openembedded\nsource poky/oe-init-build-env ./build\necho 'MACHINE = \"agilex5_devkit\"' &gt;&gt; conf/local.conf\necho 'BBLAYERS += \" ${TOPDIR}/../meta-intel-fpga \"' &gt;&gt; conf/bblayers.conf\necho 'BBLAYERS += \" ${TOPDIR}/../meta-openembedded/meta-oe \"' &gt;&gt; conf/bblayers.conf\necho 'CORE_IMAGE_EXTRA_INSTALL += \"openssh gdbserver\"' &gt;&gt; conf/local.conf\nbitbake core-image-minimal\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/yocto/build/tmp/deploy/images/agilex5_devkit/core-image-minimal-agilex5_devkit.rootfs.tar.gz</code></li> </ul> Create SD Card Image <pre><code>cd $TOP_FOLDER\nsudo rm -rf sd_card &amp;&amp; mkdir sd_card &amp;&amp; cd sd_card\nwget https://releases.rocketboards.org/release/2020.11/gsrd/tools/make_sdimage_p3.py\nsed -i 's/\\\"\\-F 32\\\",//g' make_sdimage_p3.py\nchmod +x make_sdimage_p3.py\nmkdir fatfs &amp;&amp;  cd fatfs\ncp $TOP_FOLDER/ghrd.core.rbf .\ncp $TOP_FOLDER/u-boot-socfpga/u-boot.itb .\ncp $TOP_FOLDER/linux-socfpga/arch/arm64/boot/Image .\ncp $TOP_FOLDER/linux-socfpga/arch/arm64/boot/dts/intel/socfpga_agilex5_socdk.dtb .\ncd ..\nmkdir rootfs &amp;&amp; cd rootfs\nsudo tar xf $TOP_FOLDER/yocto/build/tmp/deploy/images/agilex5_devkit/core-image-minimal-agilex5_devkit.rootfs.tar.gz\ncd ..\nsudo python3 make_sdimage_p3.py -f \\\n-P fatfs/*,num=1,format=fat32,size=64M \\\n-P rootfs/*,num=2,format=ext3,size=64M \\\n-s 140M \\\n-n sdcard.img\ncd ..\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/sd_card/sdcard.img</code></li> </ul> Write SD Card <p>Write the SD card image <code>sd_card/sdimage.img</code> to the micro SD card using the included USB writer, and <code>dd</code> utility on Linux, or  Win32DiskImager on Windows, available at https://win32diskimager.org/.</p> Write QSPI Flash <p>1. Power down board</p> <p>2. Set MSEL dipswitch SW27 to JTAG: OFF-OFF-OFF-OFF</p> <p>3. Power up the board</p> <p>4. Write JIC image to QSPI:</p> <pre><code>cd $TOP_FOLDER\nquartus_pgm -c 1 -m jtag -o \"pvi;ghrd.hps.jic\"\n</code></pre> Boot Linux <p>1. Power down board</p> <p>2. Set MSEL dipswitch SW27 to QSPI: OFF-ON-ON-OFF</p> <p>3. Power up the board</p> <p>4. Wait for Linux to boot, use <code>root</code> as user name, and no password wil be requested.</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/boot-examples/ug-linux-boot-agx5e-premium/#boot-from-qspi","title":"Boot from QSPI","text":"<p>This section presents how to build the binaries and boot from QSPI with the HPS Enablement Board. While the example is based on the GSRD, it contains the following differences:</p> <ul> <li>U-Boot tries to boot only from QSPI flash, does not try SD card</li> <li>U-Boot does not use a script to boot, instead it used the <code>BOOTCMD</code> environment variable directly</li> <li>kernel.itb file contains only one set of core.rbf, kernel and device tree files, targeted for this scenario</li> </ul> <p>1. Prepare the top folder</p> <pre><code>rm -rf $TOP_FOLDER/qspi-boot\nmkdir $TOP_FOLDER/qspi-boot\n</code></pre> <p>2. Build U-Boot:</p> <pre><code>cd $TOP_FOLDER/qspi-boot\nrm -rf u-boot-socfpga v1-0001-HSD-15015933655-ddr-altera-agilex5-Hack-dual-port-DO-NOT-MERGE.patch\nwget https://raw.githubusercontent.com/altera-opensource/meta-intel-fpga-refdes/QPDS24.1_REL_AGILEX5_GSRD_PR/recipes-bsp/u-boot/files/v1-0001-HSD-15015933655-ddr-altera-agilex5-Hack-dual-port-DO-NOT-MERGE.patch\ngit clone https://github.com/altera-opensource/u-boot-socfpga\ncd u-boot-socfpga git checkout -b test -t origin/socfpga_v2023.10\npatch -p1 &lt; ../v1-0001-HSD-15015933655-ddr-altera-agilex5-Hack-dual-port-DO-NOT-MERGE.patch\n# enable dwarf4 debug info, for compatibility with arm ds\nsed -i 's/PLATFORM_CPPFLAGS += -D__ARM__/PLATFORM_CPPFLAGS += -D__ARM__ -gdwarf-4/g' arch/arm/config.mk\n# only boot from QSPI\nsed -i 's/u-boot,spl-boot-order.*/u-boot\\,spl-boot-order = \\&amp;flash0;/g' arch/arm/dts/socfpga_agilex5_socdk-u-boot.dtsi\n# disable NAND in the device tree\nsed -i '/&amp;nand {/!b;n;c\\\\tstatus = \"disabled\";' arch/arm/dts/socfpga_agilex5_socdk-u-boot.dtsi\n# link to atf\nln -s $TOP_FOLDER/arm-trusted-firmware/build/agilex5/release/bl31.bin # create configuration custom file. \ncat &lt;&lt; EOF &gt; config-fragment\n# mtd info\nCONFIG_MTDIDS_DEFAULT=\"nor0=nor0\"\nCONFIG_MTDPARTS_DEFAULT=\"mtdparts=nor0:66m(u-boot),190m(root)\"\n# use Image instead of kernel.itb\nCONFIG_BOOTFILE=\"Image\"\n# do not keep env on sd card\nCONFIG_ENV_IS_IN_FAT=n\n# disable NAND related settings from defconfig\nCONFIG_NAND_BOOT=n\nCONFIG_SPL_NAND_SUPPORT=n\nCONFIG_CMD_NAND_TRIMFFS=n\nCONFIG_CMD_NAND_LOCK_UNLOCK=n\nCONFIG_NAND_DENALI_DT=n\nCONFIG_SYS_NAND_U_BOOT_LOCATIONS=n\nCONFIG_SPL_NAND_FRAMEWORK=n\nCONFIG_CMD_NAND=n\nCONFIG_MTD_RAW_NAND=n\n# disable distroboot and use specific boot command. \nCONFIG_DISTRO_DEFAULTS=n\nCONFIG_HUSH_PARSER=y\nCONFIG_SYS_PROMPT_HUSH_PS2=\"&gt; \"\nCONFIG_USE_BOOTCOMMAND=y\nCONFIG_BOOTCOMMAND=\"mtdparts;ubi part root;ubi readvol \\${loadaddr} kernel;ubi detach;setenv bootargs earlycon panic=-1 ubi.mtd=1 root=ubi0:rootfs rootfstype=ubifs rw rootwait;bootm \\${loadaddr}#board-0;\"\nCONFIG_CMD_FAT=y\nCONFIG_CMD_FS_GENERIC=y\nCONFIG_DOS_PARTITION=y\nCONFIG_SPL_DOS_PARTITION=y\nCONFIG_CMD_PART=y\nCONFIG_SPL_CRC32=y\nCONFIG_LZO=y\nCONFIG_CMD_DHCP=y\n# enable more QSPI flash manufacturers\nCONFIG_SPI_FLASH_MACRONIX=y\nCONFIG_SPI_FLASH_GIGADEVICE=y\nCONFIG_SPI_FLASH_WINBOND=y\nCONFIG_SPI_FLASH_ISSI=y\nEOF\n# build U-Boot\nmake clean &amp;&amp; make mrproper\nmake socfpga_agilex5_defconfig # use created custom configuration file to merge with the default configuration obtained in .config file. \n./scripts/kconfig/merge_config.sh -O . -m .config config-fragment\nmake -j 64\ncd ..\n</code></pre> <p>The following files are created:</p> <ul> <li><code>$TOP_FOLDER/qspi-boot/u-boot-socfpga/u-boot.itb</code></li> <li><code>$TOP_FOLDER/qspi-boot/u-boot-socfpga/spl/u-boot-spl-dtb.hex</code></li> </ul> <p>3. Build <code>kernel.itb</code> FIT file containing kernel, device tree and fpga fabric configuration file:</p> <pre><code>cd $TOP_FOLDER/qspi-boot\nrm -f core.rbf devicetree.dtb Image.lzma kernel.its kernel.itb\nln -s ../ghrd.core.rbf core.rbf\nln -s ../linux-socfpga/arch/arm64/boot/dts/intel/socfpga_agilex5_socdk.dtb devicetree.dtb\nxz --format=lzma --extreme -k -c ../linux-socfpga/arch/arm64/boot/Image &gt; Image.lzma\ncat &lt;&lt; EOF &gt; kernel.its\n// SPDX-License-Identifier: GPL-2.0\n/*\n * Copyright (C) 2024 Intel Corporation\n *\n */\n/dts-v1/;\n/ {\n    description = \"FIT image with kernel, DTB and FPGA core binary\";\n    #address-cells = &lt;1&gt;;\n    images {\n        kernel {\n            description = \"Linux Kernel\";\n            data = /incbin/(\"./Image.lzma\");\n            type = \"kernel\";\n            arch = \"arm64\";\n            os = \"linux\";\n            compression = \"lzma\";\n            load = &lt;0x86000000&gt;;\n            entry = &lt;0x86000000&gt;;\n            hash {\n                algo = \"crc32\";\n            };\n        };\n        fdt-0 {\n            description = \"Device Tree\";\n            data = /incbin/(\"./devicetree.dtb\");\n            type = \"flat_dt\";\n            arch = \"arm64\";\n            compression = \"none\";\n            hash {\n                algo = \"crc32\";\n            };\n        };\n        fpga-0 {\n            description = \"FPGA bitstream\";\n            data = /incbin/(\"./core.rbf\");\n            type = \"fpga\";\n            arch = \"arm64\";\n            compression = \"none\";\n            load = &lt;0x8A000000&gt;;\n            hash {\n                algo = \"crc32\";\n            };\n        };\n    };\n    configurations {\n        default = \"board-0\";\n        board-0 {\n            description = \"board_0\";\n            kernel = \"kernel\";\n            fdt = \"fdt-0\";\n            fpga = \"fpga-0\";\n            signature {\n                algo = \"crc32\";\n                key-name-hint = \"dev\";\n                sign-images = \"fdt-0\", \"kernel\", \"fpga-0\";\n            };\n        };\n    };\n};\nEOF\n./u-boot-socfpga/tools/mkimage -f kernel.its kernel.itb\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/qspi-boot/kernel.itb</code></li> </ul> <p>4. Create U-Boot binary <code>u-boot.bin</code> with a size of exactly 2MB:</p> <pre><code>cp u-boot-socfpga/u-boot.itb .\nuboot_part_size=2*1024*1024\nuboot_size=`wc -c &lt; u-boot.itb`\nuboot_pad=\"$((uboot_part_size-uboot_size))\"\ntruncate -s +$uboot_pad u-boot.itb\nmv u-boot.itb u-boot.bin\n</code></pre> <p>5. Build the <code>rootfs.ubifs</code> file:</p> <pre><code>rm -rf rootfs rootfs.ubifs\nmkdir rootfs tar -xzvf $TOP_FOLDER/yocto/build/tmp/deploy/images/agilex5_devkit/core-image-minimal-agilex5_devkit.rootfs.tar.gz -C rootfs mkfs.ubifs -r rootfs -F -e 65408 -m 1 -c 6500 -o rootfs.ubifs </code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/qspi-boot/rootfs.ubifs</code></li> </ul> <p>6. Build the <code>root.ubi</code> file:</p> <pre><code>cat &lt;&lt; EOF &gt; ubinize.cfg\n[env]\nmode=ubi\nvol_id=0\nvol_name=env\nvol_size=256KiB\nvol_type=dynamic\n[script]\nmode=ubi\nvol_id=1\nvol_name=script\nvol_size=128KiB \nvol_type=dynamic\n[kernel]\nmode=ubi\nimage=kernel.itb\nvol_id=2\nvol_name=kernel\nvol_size=24MiB\nvol_type=dynamic\n[dtb]\nmode=ubi\nvol_id=3    \nvol_name=dtb   \nvol_size=256KiB \nvol_type=dynamic\n[rootfs]\nmode=ubi\nimage=rootfs.ubifs\nvol_id=4\nvol_name=rootfs\nvol_type=dynamic\nvol_size=160MiB\nvol_flag=autoresize\nEOF\nubinize -o root.ubi -p 65536 -m 1 -s 1 ubinize.cfg\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/qspi-boot/root.ubi</code></li> </ul> <p>7. Build the QSPI flash image:</p> <pre><code>ln -s $TOP_FOLDER/agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof fpga.sof\nln -s u-boot-socfpga/spl/u-boot-spl-dtb.hex spl.hex\nln -s root.ubi hps.bin\ncat &lt;&lt; EOF &gt; flash_image.pfg\n&lt;pfg version=\"1\"&gt;\n    &lt;settings custom_db_dir=\"./\" mode=\"ASX4\"/&gt;\n    &lt;output_files&gt;\n        &lt;output_file name=\"flash_image\" hps=\"1\" directory=\"./\" type=\"PERIPH_JIC\"&gt;\n            &lt;file_options/&gt;\n            &lt;secondary_file type=\"MAP\" name=\"flash_image_jic\"&gt;\n                &lt;file_options/&gt;\n            &lt;/secondary_file&gt;\n            &lt;flash_device_id&gt;Flash_Device_1&lt;/flash_device_id&gt;\n        &lt;/output_file&gt;\n    &lt;/output_files&gt;\n    &lt;bitstreams&gt;\n        &lt;bitstream id=\"Bitstream_1\"&gt;\n            &lt;path hps_path=\"spl.hex\"&gt;fpga.sof&lt;/path&gt;\n    &lt;/bitstream&gt;\n    &lt;/bitstreams&gt;\n    &lt;raw_files&gt;\n        &lt;raw_file bitswap=\"1\" type=\"RBF\" id=\"Raw_File_1\"&gt;u-boot.bin&lt;/raw_file&gt;\n        &lt;raw_file bitswap=\"1\" type=\"RBF\" id=\"Raw_File_2\"&gt;hps.bin&lt;/raw_file&gt;\n    &lt;/raw_files&gt;\n    &lt;flash_devices&gt;\n        &lt;flash_loader&gt;A5ED065BB32AE6SR0&lt;/flash_loader&gt;\n        &lt;flash_device type=\"MT25QU02G\" id=\"Flash_Device_1\"&gt;\n            &lt;partition reserved=\"1\" fixed_s_addr=\"1\" s_addr=\"0x00000000\" e_addr=\"0x001FFFFF\" fixed_e_addr=\"1\" id=\"BOOT_INFO\" size=\"0\"/&gt;\n            &lt;partition reserved=\"0\" fixed_s_addr=\"0\" s_addr=\"auto\" e_addr=\"auto\" fixed_e_addr=\"0\" id=\"P1\" size=\"0\"/&gt;\n            &lt;partition reserved=\"0\" fixed_s_addr=\"0\" s_addr=\"0x04000000\" e_addr=\"auto\" fixed_e_addr=\"0\" id=\"UBOOT\" size=\"0\"/&gt;\n            &lt;partition reserved=\"0\" fixed_s_addr=\"0\" s_addr=\"0x04200000\" e_addr=\"auto\" fixed_e_addr=\"0\" id=\"HPS\" size=\"0\"/&gt;\n        &lt;/flash_device&gt;\n    &lt;/flash_devices&gt;\n    &lt;assignments&gt;\n        &lt;assignment page=\"0\" partition_id=\"P1\"&gt;\n            &lt;bitstream_id&gt;Bitstream_1&lt;/bitstream_id&gt;\n        &lt;/assignment&gt;\n        &lt;assignment page=\"0\" partition_id=\"UBOOT\"&gt;\n            &lt;raw_file_id&gt;Raw_File_1&lt;/raw_file_id&gt;\n        &lt;/assignment&gt;\n        &lt;assignment page=\"0\" partition_id=\"HPS\"&gt;\n            &lt;raw_file_id&gt;Raw_File_2&lt;/raw_file_id&gt;\n        &lt;/assignment&gt;\n    &lt;/assignments&gt;\n&lt;/pfg&gt;\nEOF\nquartus_pfg -c flash_image.pfg\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/qspi-boot/flash_image.hps.jic</code></li> </ul> Write QSPI Flash <p>1. Power down board</p> <p>2. Set MSEL dipswitch SW27 to JTAG: OFF-OFF-OFF-OFF</p> <p>3. Power up the board</p> <p>4. Write JIC image to QSPI:</p> <pre><code>cd $TOP_FOLDER\nquartus_pgm -c 1 -m jtag -o \"qspi-boot/flash_image.hps.jic\"\n</code></pre> Boot Linux <p>1. Power down board</p> <p>2. Set MSEL dipswitch SW27 to QSPI: OFF-ON-ON-OFF</p> <p>3. Power up the board</p> <p>4. Wait for Linux to boot, use <code>root</code> as user name, and no password wil be requested.</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/boot-examples/ug-linux-boot-agx5e-premium/#hps-nand-board","title":"HPS NAND Board","text":"<p>This section demonstrates how to build a Linux system from separate components, targetting the HPS NAND Board. Boot source is eMMC Flash.</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/boot-examples/ug-linux-boot-agx5e-premium/#boot-from-emmc","title":"Boot from eMMC","text":"Setup Environment <p>1. Create the top folder to store all the build artifacts:</p> <pre><code>sudo rm -rf artifacts.emmc\nmkdir artifacts.emmc\ncd artifacts.emmc\nexport TOP_FOLDER=`pwd`\n</code></pre> <p>2. Download and setup the build toolchain. It will be used only by the GHRD makefile to build the debug HPS FSBL, to build the _hps_debug.sof file:</p> <pre><code>cd $TOP_FOLDER\nwget https://developer.arm.com/-/media/Files/downloads/gnu/11.2-2022.02/binrel\\\n/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz\ntar xf gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz\nrm -f gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz\nexport PATH=`pwd`/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu/bin:$PATH\nexport ARCH=arm64\nexport CROSS_COMPILE=aarch64-none-linux-gnu-\n</code></pre> <p>3. Set up the Quartus tools in the PATH, so they are accessible without full path</p> <pre><code>export QUARTUS_ROOTDIR=~/intelFPGA_pro/24.1/quartus/\nexport PATH=$QUARTUS_ROOTDIR/bin:$QUARTUS_ROOTDIR/linux64:$QUARTUS_ROOTDIR/../qsys/bin:$PATH\n</code></pre> Build Hardware Design <pre><code>cd $TOP_FOLDER\nrm -rf ghrd-socfpga agilex5_soc_devkit_ghrd\ngit clone -b QPDS24.1_REL_AGILEX5_GSRD_PR https://github.com/altera-opensource/ghrd-socfpga\nmv ghrd-socfpga/agilex5_soc_devkit_ghrd .\nrm -rf ghrd-socfpga\ncd agilex5_soc_devkit_ghrd\nmake config\nmake DEVICE=A5ED065BB32AE6SR0 HPS_EMIF_MEM_CLK_FREQ_MHZ=800 HPS_EMIF_REF_CLK_FREQ_MHZ=100 DAUGHTER_CARD=devkit_dc_emmc generate_from_tcl\nmake all\ncd ..\n</code></pre> <p>The following files are created:</p> <ul> <li><code>$TOP_FOLDER/agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof</code></li> <li><code>$TOP_FOLDER/agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0_hps_debug.sof</code></li> </ul> Build Arm Trusted Firmware <pre><code>cd $TOP_FOLDER\nrm -rf arm-trusted-firmware\ngit clone https://github.com/altera-opensource/arm-trusted-firmware\ncd arm-trusted-firmware\ngit checkout -b test -t origin/socfpga_v2.10.0\nmake -j 48 PLAT=agilex5 bl31 cd ..\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/arm-trusted-firmware/build/agilex5/release/bl31.bin</code></li> </ul> Build U-Boot <pre><code>cd $TOP_FOLDER\nrm -rf u-boot-socfpga v1-0001-HSD-15015933655-ddr-altera-agilex5-Hack-dual-port-DO-NOT-MERGE.patch\nwget https://raw.githubusercontent.com/altera-opensource/meta-intel-fpga-refdes/QPDS24.1_REL_AGILEX5_GSRD_PR/recipes-bsp/u-boot/files/v1-0001-HSD-15015933655-ddr-altera-agilex5-Hack-dual-port-DO-NOT-MERGE.patch\ngit clone https://github.com/altera-opensource/u-boot-socfpga\ncd u-boot-socfpga git checkout -b test -t origin/socfpga_v2023.10\npatch -p1 &lt; ../v1-0001-HSD-15015933655-ddr-altera-agilex5-Hack-dual-port-DO-NOT-MERGE.patch\n# enable dwarf4 debug info, for compatibility with arm ds\nsed -i 's/PLATFORM_CPPFLAGS += -D__ARM__/PLATFORM_CPPFLAGS += -D__ARM__ -gdwarf-4/g' arch/arm/config.mk\n# only boot from SD, do not try QSPI and NAND\nsed -i 's/u-boot,spl-boot-order.*/u-boot\\,spl-boot-order = \\&amp;mmc;/g' arch/arm/dts/socfpga_agilex5_socdk-u-boot.dtsi\n# disable NAND in the device tree\nsed -i '/&amp;nand {/!b;n;c\\\\tstatus = \"disabled\";' arch/arm/dts/socfpga_agilex5_socdk-u-boot.dtsi\n# swap gmac0 and gmac2\nsed -i '/&amp;gmac2/ { N; s/status = \"okay\"/status = \"disabled\"/; }' arch/arm/dts/socfpga_agilex5_socdk.dts\nsed -i '/&amp;gmac0/ { N; s/status = \"disabled\"/status = \"okay\"/; }' arch/arm/dts/socfpga_agilex5_socdk.dts\n# link to atf\nln -s ../arm-trusted-firmware/build/agilex5/release/bl31.bin # create configuration custom file. \ncat &lt;&lt; EOF &gt; config-fragment\n# use Image instead of kernel.itb\nCONFIG_BOOTFILE=\"Image\"\n# disable NAND/UBI related settings from defconfig. \nCONFIG_NAND_BOOT=n\nCONFIG_SPL_NAND_SUPPORT=n\nCONFIG_CMD_NAND_TRIMFFS=n\nCONFIG_CMD_NAND_LOCK_UNLOCK=n\nCONFIG_NAND_DENALI_DT=n\nCONFIG_SYS_NAND_U_BOOT_LOCATIONS=n\nCONFIG_SPL_NAND_FRAMEWORK=n\nCONFIG_CMD_NAND=n\nCONFIG_MTD_RAW_NAND=n\nCONFIG_CMD_UBI=n\nCONFIG_CMD_UBIFS=n\nCONFIG_MTD_UBI=n\nCONFIG_ENV_IS_IN_UBI=n\nCONFIG_UBI_SILENCE_MSG=n\nCONFIG_UBIFS_SILENCE_MSG=n\n# disable distroboot and use specific boot command. \nCONFIG_DISTRO_DEFAULTS=n\nCONFIG_HUSH_PARSER=y\nCONFIG_SYS_PROMPT_HUSH_PS2=\"&gt; \"\nCONFIG_USE_BOOTCOMMAND=y\nCONFIG_BOOTCOMMAND=\"load mmc 0:1 \\${loadaddr} ghrd.core.rbf; fpga load 0 \\${loadaddr} \\${filesize};bridge enable; mmc rescan; fatload mmc 0:1 82000000 Image;fatload mmc 0:1 86000000 socfpga_agilex5_socdk_emmc.dtb;setenv bootargs console=ttyS0,115200 root=\\${mmcroot} rw rootwait;booti 0x82000000 - 0x86000000\"\nCONFIG_CMD_FAT=y\nCONFIG_CMD_FS_GENERIC=y\nCONFIG_DOS_PARTITION=y\nCONFIG_SPL_DOS_PARTITION=y\nCONFIG_CMD_PART=y\nCONFIG_SPL_CRC32=y\nCONFIG_LZO=y\nCONFIG_CMD_DHCP=y\n# enable more QSPI flash manufacturers\nCONFIG_SPI_FLASH_MACRONIX=y\nCONFIG_SPI_FLASH_GIGADEVICE=y\nCONFIG_SPI_FLASH_WINBOND=y\nCONFIG_SPI_FLASH_ISSI=y\nEOF\n# build U-Boot\nmake clean &amp;&amp; make mrproper\nmake socfpga_agilex5_defconfig # use created custom configuration file to merge with the default configuration obtained in .config file. \n./scripts/kconfig/merge_config.sh -O . -m .config config-fragment\nmake -j 64\ncd ..\n</code></pre> <p>The following files are created:</p> <ul> <li><code>$TOP_FOLDER/u-boot-socfpga/u-boot.itb</code></li> <li><code>$TOP_FOLDER/u-boot-socfpga/spl/u-boot-spl-dtb.hex</code></li> </ul> Build QSPI Image <pre><code>cd $TOP_FOLDER\nquartus_pfg -c agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof ghrd.jic \\\n-o device=MT25QU128 \\\n-o flash_loader=A5ED065BB32AE6SR0 \\\n-o hps_path=$TOP_FOLDER/u-boot-socfpga/spl/u-boot-spl-dtb.hex \\\n-o mode=ASX4 \\\n-o hps=1\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/ghrd.hps.jic</code></li> </ul> Build HPS RBF <p>This is an optional step, in which you can build an HPS RBF file, which can be used to configure the HPS through JTAG instead of QSPI though the JIC file.</p> <pre><code>cd $TOP_FOLDER\nquartus_pfg -c agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof ghrd.rbf \\\n-o hps_path=$TOP_FOLDER/u-boot-socfpga/spl/u-boot-spl-dtb.hex \\\n-o hps=1\n</code></pre> <p>The following file is created:</p> <ul> <li>`$TOP_FOLDER/ghrd.hps.rbf</li> </ul> Build Linux <pre><code>cd $TOP_FOLDER\nrm -rf linux-socfpga\ngit clone https://github.com/altera-opensource/linux-socfpga\ncd linux-socfpga\ngit checkout -b test -t origin/socfpga-6.1.68-lts\nmake defconfig make -j 64 Image &amp;&amp; make intel/socfpga_agilex5_socdk_emmc.dtb </code></pre> <p>The following files are created:</p> <ul> <li><code>$TOP_FOLDER/linux-socfpga/arch/arm64/boot/dts/intel/socfpga_agilex5_socdk_emmc.dtb</code></li> <li><code>$TOP_FOLDER/linux-socfpga/arch/arm64/boot/Image</code></li> </ul> Build Rootfs <pre><code>cd $TOP_FOLDER\nrm -rf yocto &amp;&amp; mkdir yocto &amp;&amp; cd yocto\ngit clone -b nanbield https://git.yoctoproject.org/poky\ngit clone -b nanbield https://git.yoctoproject.org/meta-intel-fpga\ngit clone -b nanbield https://github.com/openembedded/meta-openembedded\nsource poky/oe-init-build-env ./build\necho 'MACHINE = \"agilex5_devkit\"' &gt;&gt; conf/local.conf\necho 'BBLAYERS += \" ${TOPDIR}/../meta-intel-fpga \"' &gt;&gt; conf/bblayers.conf\necho 'BBLAYERS += \" ${TOPDIR}/../meta-openembedded/meta-oe \"' &gt;&gt; conf/bblayers.conf\necho 'CORE_IMAGE_EXTRA_INSTALL += \"openssh gdbserver\"' &gt;&gt; conf/local.conf\nbitbake core-image-minimal\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/yocto/build/tmp/deploy/images/agilex5_devkit/core-image-minimal-agilex5_devkit.rootfs.tar.gz</code></li> </ul> Create eMMC Image <pre><code>cd $TOP_FOLDER\nsudo rm -rf sd_card &amp;&amp; mkdir sd_card &amp;&amp; cd sd_card\nwget https://releases.rocketboards.org/release/2020.11/gsrd/tools/make_sdimage_p3.py\nsed -i 's/\\\"\\-F 32\\\",//g' make_sdimage_p3.py\nchmod +x make_sdimage_p3.py\nmkdir fatfs &amp;&amp;  cd fatfs\ncp $TOP_FOLDER/ghrd.core.rbf .\ncp $TOP_FOLDER/u-boot-socfpga/u-boot.itb .\ncp $TOP_FOLDER/linux-socfpga/arch/arm64/boot/Image .\ncp $TOP_FOLDER/linux-socfpga/arch/arm64/boot/dts/intel/socfpga_agilex5_socdk_emmc.dtb .\ncd ..\nmkdir rootfs &amp;&amp; cd rootfs\nsudo tar xf $TOP_FOLDER/yocto/build/tmp/deploy/images/agilex5_devkit/core-image-minimal-agilex5_devkit.rootfs.tar.gz\ncd ..\nsudo python3 make_sdimage_p3.py -f \\\n-P fatfs/*,num=1,format=fat32,size=64M \\\n-P rootfs/*,num=2,format=ext3,size=64M \\\n-s 140M \\\n-n sdcard.img\ncd ..\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/sd_card/sdcard.img</code></li> </ul> Create Helper JIC <p>In this section we are building a helper JIC which will boot from QSPI and will allow us to program the eMMC from U-Boot.</p> <p>1. Create the jic helper folder to contain all related build artifacts:</p> <pre><code>rm -rf $TOP_FOLDER/helper-jic\nmkdir $TOP_FOLDER/helper-jic\n</code></pre> <p>2. Build a modified U-Boot, which boots from QSPI and stops at command line prompt:</p> <pre><code>cd $TOP_FOLDER/helper-jic\nrm -rf u-boot-socfpga v1-0001-HSD-15015933655-ddr-altera-agilex5-Hack-dual-port-DO-NOT-MERGE.patch\nwget https://raw.githubusercontent.com/altera-opensource/meta-intel-fpga-refdes/QPDS24.1_REL_AGILEX5_GSRD_PR/recipes-bsp/u-boot/files/v1-0001-HSD-15015933655-ddr-altera-agilex5-Hack-dual-port-DO-NOT-MERGE.patch\ngit clone https://github.com/altera-opensource/u-boot-socfpga\ncd u-boot-socfpga git checkout -b test -t origin/socfpga_v2023.10\npatch -p1 &lt; ../v1-0001-HSD-15015933655-ddr-altera-agilex5-Hack-dual-port-DO-NOT-MERGE.patch # enable dwarf4 debug info, for compatibility with arm ds\nsed -i 's/PLATFORM_CPPFLAGS += -D__ARM__/PLATFORM_CPPFLAGS += -D__ARM__ -gdwarf-4/g' arch/arm/config.mk\n# only boot from SD, do not try QSPI and NAND\nsed -i 's/u-boot,spl-boot-order.*/u-boot\\,spl-boot-order = \\&amp;flash0;/g' arch/arm/dts/socfpga_agilex5_socdk-u-boot.dtsi\n# disable NAND in the device tree\nsed -i '/&amp;nand {/!b;n;c\\\\tstatus = \"disabled\";' arch/arm/dts/socfpga_agilex5_socdk-u-boot.dtsi\n# swap gmac0 and gmac2\nsed -i '/&amp;gmac2/ { N; s/status = \"okay\"/status = \"disabled\"/; }' arch/arm/dts/socfpga_agilex5_socdk.dts\nsed -i '/&amp;gmac0/ { N; s/status = \"disabled\"/status = \"okay\"/; }' arch/arm/dts/socfpga_agilex5_socdk.dts\n# link to atf\nln -s $TOP_FOLDER/arm-trusted-firmware/build/agilex5/release/bl31.bin # create configuration custom file. \ncat &lt;&lt; EOF &gt; config-fragment\n# use Image instead of kernel.itb\nCONFIG_BOOTFILE=\"Image\"\n# disable NAND/UBI related settings from defconfig. \nCONFIG_NAND_BOOT=n\nCONFIG_SPL_NAND_SUPPORT=n\nCONFIG_CMD_NAND_TRIMFFS=n\nCONFIG_CMD_NAND_LOCK_UNLOCK=n\nCONFIG_NAND_DENALI_DT=n\nCONFIG_SYS_NAND_U_BOOT_LOCATIONS=n\nCONFIG_SPL_NAND_FRAMEWORK=n\nCONFIG_CMD_NAND=n\nCONFIG_MTD_RAW_NAND=n\nCONFIG_CMD_UBI=n\nCONFIG_CMD_UBIFS=n\nCONFIG_MTD_UBI=n\nCONFIG_ENV_IS_IN_UBI=n\nCONFIG_UBI_SILENCE_MSG=n\nCONFIG_UBIFS_SILENCE_MSG=n\n# disable distroboot and use specific boot command. \nCONFIG_DISTRO_DEFAULTS=n\nCONFIG_HUSH_PARSER=y\nCONFIG_SYS_PROMPT_HUSH_PS2=\"&gt; \"\nCONFIG_USE_BOOTCOMMAND=y\nCONFIG_BOOTCOMMAND=\"echo hello\"\nCONFIG_CMD_FAT=y\nCONFIG_CMD_FS_GENERIC=y\nCONFIG_DOS_PARTITION=y\nCONFIG_SPL_DOS_PARTITION=y\nCONFIG_CMD_PART=y\nCONFIG_SPL_CRC32=y\nCONFIG_LZO=y\nCONFIG_CMD_DHCP=y\n# enable more QSPI flash manufacturers\nCONFIG_SPI_FLASH_MACRONIX=y\nCONFIG_SPI_FLASH_GIGADEVICE=y\nCONFIG_SPI_FLASH_WINBOND=y\nCONFIG_SPI_FLASH_ISSI=y\n# boot from QSPI\nCONFIG_ENV_IS_IN_FAT=n\nCONFIG_ENV_IS_NOWHERE=y\nCONFIG_SYS_SPI_U_BOOT_OFFS=0x00300000\nEOF\n# build U-Boot\nmake clean &amp;&amp; make mrproper\nmake socfpga_agilex5_defconfig # use created custom configuration file to merge with the default configuration obtained in .config file. \n./scripts/kconfig/merge_config.sh -O . -m .config config-fragment\nmake -j 64\ncd ..\n</code></pre> <p>The following files are created:</p> <ul> <li><code>$TOP_FOLDER/u-boot-socfpga/u-boot.itb</code></li> <li><code>$TOP_FOLDER/u-boot-socfpga/spl/u-boot-spl-dtb.hex</code></li> </ul> <p>3. Build the helper JIC:</p> <pre><code>cd $TOP_FOLDER/helper-jic\nrm -f flash.pfg fpga.sof u-boot.bin spl.hex *.jic *.rbf\nln -s $TOP_FOLDER/agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof fpga.sof\nln -s u-boot-socfpga/u-boot.itb u-boot.bin\nln -s u-boot-socfpga/spl/u-boot-spl-dtb.hex spl.hex\ncat &lt;&lt; EOF &gt; flash.pfg\n&lt;pfg version=\"1\"&gt;\n    &lt;settings custom_db_dir=\"./\" mode=\"ASX4\"/&gt;\n    &lt;output_files&gt;\n        &lt;output_file name=\"flash\" hps=\"1\" directory=\"./\" type=\"PERIPH_JIC\"&gt;\n            &lt;file_options/&gt;\n            &lt;secondary_file type=\"MAP\" name=\"flash_jic\"&gt;\n                &lt;file_options/&gt;\n            &lt;/secondary_file&gt;\n            &lt;flash_device_id&gt;Flash_Device_1&lt;/flash_device_id&gt;\n        &lt;/output_file&gt;\n    &lt;/output_files&gt;\n    &lt;bitstreams&gt;\n        &lt;bitstream id=\"Bitstream_1\"&gt;\n            &lt;path signing=\"OFF\" finalize_encryption=\"0\" hps_path=\"spl.hex\"&gt;fpga.sof&lt;/path&gt;\n        &lt;/bitstream&gt;\n    &lt;/bitstreams&gt;\n    &lt;raw_files&gt;\n        &lt;raw_file bitswap=\"1\" type=\"RBF\" id=\"Raw_File_1\"&gt;u-boot.bin&lt;/raw_file&gt;\n    &lt;/raw_files&gt;\n    &lt;flash_devices&gt;\n        &lt;flash_device type=\"MT25QU128\" id=\"Flash_Device_1\"&gt;\n            &lt;partition reserved=\"1\" fixed_s_addr=\"1\" s_addr=\"0x00000000\" e_addr=\"0x001FFFFF\" fixed_e_addr=\"1\" id=\"BOOT_INFO\" size=\"0\"/&gt;\n            &lt;partition reserved=\"0\" fixed_s_addr=\"0\" s_addr=\"auto\" e_addr=\"auto\" fixed_e_addr=\"0\" id=\"P1\" size=\"0\"/&gt;\n            &lt;partition reserved=\"0\" fixed_s_addr=\"0\" s_addr=\"0x00300000\" e_addr=\"0x004CFFFF\" fixed_e_addr=\"1\" id=\"u-boot\" size=\"0\"/&gt;\n        &lt;/flash_device&gt;\n        &lt;flash_loader&gt;A5ED065BB32AE5SR0&lt;/flash_loader&gt;\n    &lt;/flash_devices&gt;\n    &lt;assignments&gt;\n        &lt;assignment page=\"0\" partition_id=\"P1\"&gt;\n            &lt;bitstream_id&gt;Bitstream_1&lt;/bitstream_id&gt;\n        &lt;/assignment&gt;\n        &lt;assignment page=\"0\" partition_id=\"u-boot\"&gt;\n            &lt;raw_file_id&gt;Raw_File_1&lt;/raw_file_id&gt;\n        &lt;/assignment&gt;\n    &lt;/assignments&gt;\n&lt;/pfg&gt;\nEOF\nquartus_pfg -c flash.pfg\n</code></pre> <p>The following file will be created:</p> <ul> <li><code>$TOP_FOLDER/helper-jic/flash.hps.jic</code></li> </ul> Write eMMC Image <p>1. Write the helper JIC to QSPI:</p> <ul> <li>Power down board</li> <li>Set MSEL dipswitch SW27 to JTAG: OFF-OFF-OFF-OFF</li> <li>Power up the board</li> <li>Write JIC image to QSPI: <pre><code>cd $TOP_FOLDER\nquartus_pgm -c 1 -m jtag -o \"pvi;helper-jic/flash.hps.jic\"\n</code></pre> </li></ul> <p>2. Boot to U-Boot prompt with the helper JIC:</p> <ul> <li>Power down board</li> <li>Set MSEL dipswitch SW27 to QSPI: OFF-ON-ON-OFF</li> <li>Power up the board</li> <li>Wait for U-Boot to boot, press any key to get to U-Boot console</li></ul> <p>3. Use <code>ifconfig</code> on your host machine to determine the IP of your TFTP server</p> <p>4. Copy the eMMC image <code>$TOP_FOLDER/sd_card/sdcard.img</code> to your TFTP server folder</p> <p>5. Use the following U-Boot commands to download and write the eMMC image:</p> <pre><code>setenv autoload no\ndhcp\nsetenv serverip &lt;your_tftp_server_ip&gt;\ntftp ${loadaddr} sdcard.img\nsetexpr blkcnt ${filesize} / 0x200\nmmc write ${loadaddr} 0 ${blkcnt}\n</code></pre> Write QSPI Flash <p>1. Power down board</p> <p>2. Set MSEL dipswitch SW27 to JTAG: OFF-OFF-OFF-OFF</p> <p>3. Power up the board</p> <p>4. Write JIC image to QSPI:</p> <pre><code>cd $TOP_FOLDER\nquartus_pgm -c 1 -m jtag -o \"pvi;ghrd.hps.jic\"\n</code></pre> Boot Linux <p>1. Power down board</p> <p>2. Set MSEL dipswitch SW27 to QSPI: OFF-ON-ON-OFF</p> <p>3. Power up the board</p> <p>4. Wait for Linux to boot, use <code>root</code> as user name, and no password wil be requested.</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/boot-examples/ug-linux-boot-agx5e-premium/#hps-test-board","title":"HPS Test Board","text":"<p>This section demonstrates how to build a Linux system from separate components, targetting the HPS Test Board. Boot source is SD Card.</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/boot-examples/ug-linux-boot-agx5e-premium/#boot-from-sd-card_1","title":"Boot from SD Card","text":"Setup Environment <p>1. Create the top folder to store all the build artifacts:</p> <pre><code>sudo rm -rf artifacts.test\nmkdir artifacts.test\ncd artifacts.test\nexport TOP_FOLDER=`pwd`\n</code></pre> <p>2. Download and setup the build toolchain. It will be used only by the GHRD makefile to build the debug HPS FSBL, to build the _hps_debug.sof file:</p> <pre><code>cd $TOP_FOLDER\nwget https://developer.arm.com/-/media/Files/downloads/gnu/11.2-2022.02/binrel\\\n/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz\ntar xf gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz\nrm -f gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz\nexport PATH=`pwd`/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu/bin:$PATH\nexport ARCH=arm64\nexport CROSS_COMPILE=aarch64-none-linux-gnu-\n</code></pre> <p>3. Set up the Quartus tools in the PATH, so they are accessible without full path</p> <pre><code>export QUARTUS_ROOTDIR=~/intelFPGA_pro/24.1/quartus/\nexport PATH=$QUARTUS_ROOTDIR/bin:$QUARTUS_ROOTDIR/linux64:$QUARTUS_ROOTDIR/../qsys/bin:$PATH\n</code></pre> Build Hardware Design <pre><code>cd $TOP_FOLDER\nrm -rf ghrd-socfpga agilex5_soc_devkit_ghrd\ngit clone -b QPDS24.1_REL_AGILEX5_GSRD_PR https://github.com/altera-opensource/ghrd-socfpga\nmv ghrd-socfpga/agilex5_soc_devkit_ghrd .\nrm -rf ghrd-socfpga\ncd agilex5_soc_devkit_ghrd\nmake config\nmake DEVICE=A5ED065BB32AE6SR0 HPS_EMIF_MEM_CLK_FREQ_MHZ=800 HPS_EMIF_REF_CLK_FREQ_MHZ=100 DAUGHTER_CARD=debug2 generate_from_tcl\nmake all\ncd ..\n</code></pre> <p>The following files are created:</p> <ul> <li><code>$TOP_FOLDER/agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof</code></li> <li><code>$TOP_FOLDER/agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0_hps_debug.sof</code></li> </ul> Build Arm Trusted Firmware <pre><code>cd $TOP_FOLDER\nrm -rf arm-trusted-firmware\ngit clone https://github.com/altera-opensource/arm-trusted-firmware\ncd arm-trusted-firmware\ngit checkout -b test -t origin/socfpga_v2.10.0\nmake -j 48 PLAT=agilex5 bl31 cd ..\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/arm-trusted-firmware/build/agilex5/release/bl31.bin</code></li> </ul> Build U-Boot <pre><code>cd $TOP_FOLDER\nrm -rf u-boot-socfpga v1-0001-HSD-15015933655-ddr-altera-agilex5-Hack-dual-port-DO-NOT-MERGE.patch\nwget https://raw.githubusercontent.com/altera-opensource/meta-intel-fpga-refdes/QPDS24.1_REL_AGILEX5_GSRD_PR/recipes-bsp/u-boot/files/v1-0001-HSD-15015933655-ddr-altera-agilex5-Hack-dual-port-DO-NOT-MERGE.patch\ngit clone https://github.com/altera-opensource/u-boot-socfpga\ncd u-boot-socfpga git checkout -b test -t origin/socfpga_v2023.10\npatch -p1 &lt; ../v1-0001-HSD-15015933655-ddr-altera-agilex5-Hack-dual-port-DO-NOT-MERGE.patch\n# enable dwarf4 debug info, for compatibility with arm ds\nsed -i 's/PLATFORM_CPPFLAGS += -D__ARM__/PLATFORM_CPPFLAGS += -D__ARM__ -gdwarf-4/g' arch/arm/config.mk\n# only boot from SD, do not try QSPI and NAND\nsed -i 's/u-boot,spl-boot-order.*/u-boot\\,spl-boot-order = \\&amp;mmc;/g' arch/arm/dts/socfpga_agilex5_socdk-u-boot.dtsi\n# disable NAND in the device tree\nsed -i '/&amp;nand {/!b;n;c\\\\tstatus = \"disabled\";' arch/arm/dts/socfpga_agilex5_socdk-u-boot.dtsi\n# swap gmac0 and gmac2\nsed -i '/&amp;gmac2/ { N; s/status = \"okay\"/status = \"disabled\"/; }' arch/arm/dts/socfpga_agilex5_socdk.dts\nsed -i '/&amp;gmac0/ { N; s/status = \"disabled\"/status = \"okay\"/; }' arch/arm/dts/socfpga_agilex5_socdk.dts\n# link to atf\nln -s ../arm-trusted-firmware/build/agilex5/release/bl31.bin # create configuration custom file. \ncat &lt;&lt; EOF &gt; config-fragment\n# use Image instead of kernel.itb\nCONFIG_BOOTFILE=\"Image\"\n# disable NAND/UBI related settings from defconfig. \nCONFIG_NAND_BOOT=n\nCONFIG_SPL_NAND_SUPPORT=n\nCONFIG_CMD_NAND_TRIMFFS=n\nCONFIG_CMD_NAND_LOCK_UNLOCK=n\nCONFIG_NAND_DENALI_DT=n\nCONFIG_SYS_NAND_U_BOOT_LOCATIONS=n\nCONFIG_SPL_NAND_FRAMEWORK=n\nCONFIG_CMD_NAND=n\nCONFIG_MTD_RAW_NAND=n\nCONFIG_CMD_UBI=n\nCONFIG_CMD_UBIFS=n\nCONFIG_MTD_UBI=n\nCONFIG_ENV_IS_IN_UBI=n\nCONFIG_UBI_SILENCE_MSG=n\nCONFIG_UBIFS_SILENCE_MSG=n\n# disable distroboot and use specific boot command. \nCONFIG_DISTRO_DEFAULTS=n\nCONFIG_HUSH_PARSER=y\nCONFIG_SYS_PROMPT_HUSH_PS2=\"&gt; \"\nCONFIG_USE_BOOTCOMMAND=y\nCONFIG_BOOTCOMMAND=\"load mmc 0:1 \\${loadaddr} ghrd.core.rbf; fpga load 0 \\${loadaddr} \\${filesize};bridge enable; mmc rescan; fatload mmc 0:1 82000000 Image;fatload mmc 0:1 86000000 socfpga_agilex5_socdk_debug.dtb;setenv bootargs console=ttyS0,115200 root=\\${mmcroot} rw rootwait;booti 0x82000000 - 0x86000000\"\nCONFIG_CMD_FAT=y\nCONFIG_CMD_FS_GENERIC=y\nCONFIG_DOS_PARTITION=y\nCONFIG_SPL_DOS_PARTITION=y\nCONFIG_CMD_PART=y\nCONFIG_SPL_CRC32=y\nCONFIG_LZO=y\nCONFIG_CMD_DHCP=y\n# enable more QSPI flash manufacturers\nCONFIG_SPI_FLASH_MACRONIX=y\nCONFIG_SPI_FLASH_GIGADEVICE=y\nCONFIG_SPI_FLASH_WINBOND=y\nCONFIG_SPI_FLASH_ISSI=y\nEOF\n# build U-Boot\nmake clean &amp;&amp; make mrproper\nmake socfpga_agilex5_defconfig # use created custom configuration file to merge with the default configuration obtained in .config file. \n./scripts/kconfig/merge_config.sh -O . -m .config config-fragment\nmake -j 64\ncd ..\n</code></pre> <p>The following files are created:</p> <ul> <li><code>$TOP_FOLDER/u-boot-socfpga/u-boot.itb</code></li> <li><code>$TOP_FOLDER/u-boot-socfpga/spl/u-boot-spl-dtb.hex</code></li> </ul> Build QSPI Image <pre><code>cd $TOP_FOLDER\nquartus_pfg -c agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof ghrd.jic \\\n-o device=MT25QU128 \\\n-o flash_loader=A5ED065BB32AE6SR0 \\\n-o hps_path=$TOP_FOLDER/u-boot-socfpga/spl/u-boot-spl-dtb.hex \\\n-o mode=ASX4 \\\n-o hps=1\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/ghrd.hps.jic</code></li> </ul> Build HPS RBF <p>This is an optional step, in which you can build an HPS RBF file, which can be used to configure the HPS through JTAG instead of QSPI though the JIC file.</p> <pre><code>cd $TOP_FOLDER\nquartus_pfg -c agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof ghrd.rbf \\\n-o hps_path=$TOP_FOLDER/u-boot-socfpga/spl/u-boot-spl-dtb.hex \\\n-o hps=1\n</code></pre> <p>The following file is created:</p> <ul> <li>`$TOP_FOLDER/ghrd.hps.rbf</li> </ul> Build Linux <pre><code>cd $TOP_FOLDER\nrm -rf linux-socfpga\ngit clone https://github.com/altera-opensource/linux-socfpga\ncd linux-socfpga\ngit checkout -b test -t origin/socfpga-6.1.68-lts\nmake defconfig make -j 64 Image &amp;&amp; make intel/socfpga_agilex5_socdk_debug.dtb </code></pre> <p>The following files are created:</p> <ul> <li><code>$TOP_FOLDER/linux-socfpga/arch/arm64/boot/dts/intel/socfpga_agilex5_socdk_debug.dtb</code></li> <li><code>$TOP_FOLDER/linux-socfpga/arch/arm64/boot/Image</code></li> </ul> Build Rootfs <pre><code>cd $TOP_FOLDER\nrm -rf yocto &amp;&amp; mkdir yocto &amp;&amp; cd yocto\ngit clone -b nanbield https://git.yoctoproject.org/poky\ngit clone -b nanbield https://git.yoctoproject.org/meta-intel-fpga\ngit clone -b nanbield https://github.com/openembedded/meta-openembedded\nsource poky/oe-init-build-env ./build\necho 'MACHINE = \"agilex5_devkit\"' &gt;&gt; conf/local.conf\necho 'BBLAYERS += \" ${TOPDIR}/../meta-intel-fpga \"' &gt;&gt; conf/bblayers.conf\necho 'BBLAYERS += \" ${TOPDIR}/../meta-openembedded/meta-oe \"' &gt;&gt; conf/bblayers.conf\necho 'CORE_IMAGE_EXTRA_INSTALL += \"openssh gdbserver\"' &gt;&gt; conf/local.conf\nbitbake core-image-minimal\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/yocto/build/tmp/deploy/images/agilex5_devkit/core-image-minimal-agilex5_devkit.rootfs.tar.gz</code></li> </ul> Create SD Card Image <pre><code>cd $TOP_FOLDER\nsudo rm -rf sd_card &amp;&amp; mkdir sd_card &amp;&amp; cd sd_card\nwget https://releases.rocketboards.org/release/2020.11/gsrd/tools/make_sdimage_p3.py\nsed -i 's/\\\"\\-F 32\\\",//g' make_sdimage_p3.py\nchmod +x make_sdimage_p3.py\nmkdir fatfs &amp;&amp;  cd fatfs\ncp $TOP_FOLDER/ghrd.core.rbf .\ncp $TOP_FOLDER/u-boot-socfpga/u-boot.itb .\ncp $TOP_FOLDER/linux-socfpga/arch/arm64/boot/Image .\ncp $TOP_FOLDER/linux-socfpga/arch/arm64/boot/dts/intel/socfpga_agilex5_socdk_debug.dtb .\ncd ..\nmkdir rootfs &amp;&amp; cd rootfs\nsudo tar xf $TOP_FOLDER/yocto/build/tmp/deploy/images/agilex5_devkit/core-image-minimal-agilex5_devkit.rootfs.tar.gz\ncd ..\nsudo python3 make_sdimage_p3.py -f \\\n-P fatfs/*,num=1,format=fat32,size=64M \\\n-P rootfs/*,num=2,format=ext3,size=64M \\\n-s 140M \\\n-n sdcard.img\ncd ..\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/sd_card/sdcard.img</code></li> </ul> Write SD Card <p>Write the SD card image <code>sd_card/sdimage.img</code> to the micro SD card using the included USB writer, and <code>dd</code> utility on Linux, or  Win32DiskImager on Windows, available at https://win32diskimager.org/.</p> Write QSPI Flash <p>1. Power down board</p> <p>2. Set MSEL dipswitch SW27 to JTAG: OFF-OFF-OFF-OFF</p> <p>3. Power up the board</p> <p>4. Write JIC image to QSPI:</p> <pre><code>cd $TOP_FOLDER\nquartus_pgm -c 1 -m jtag -o \"pvi;ghrd.hps.jic\"\n</code></pre> Boot Linux <p>1. Power down board</p> <p>2. Set MSEL dipswitch SW27 to QSPI: OFF-ON-ON-OFF</p> <p>3. Power up the board</p> <p>4. Wait for Linux to boot, use <code>root</code> as user name, and no password wil be requested.</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/","title":"Agilex 5 E-Series Premium Devkit GSRD","text":""},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#introduction","title":"Introduction","text":""},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#gsrd-overview","title":"GSRD Overview","text":"<p>The Golden System Reference Design (GSRD) is a reference design running on the Agilex 5 E-Series Premium  Development Kit.</p> <p>The GSRD is comprised of the following components:</p> <ul> <li>Golden Hardware Reference Design (GHRD)</li> <li>Reference HPS software including:<ul> <li>Arm Trusted Firmware</li> <li>U-Boot</li> <li>Linux Kernel</li> <li>Linux Drivers</li> <li>Sample Applications</li> </ul> </li> </ul>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#prerequisites","title":"Prerequisites","text":"<p>The following are required to be able to fully exercise the Agilex 5 Premium Development Kit GSRD:</p> <ul> <li> <p>Altera Agilex 5 FPGA E-Series 065B Premium Development Kit, ordering code DK-A5E065BB32AES1. Refer to board documentation for more information about the development kit.</p> <ul> <li>HPS Enablement Expansion Board. Included with the development kit.</li> <li>HPS NAND Board. Enables eMMC storage for HPS. Orderable separately.</li> <li>HPS Test Board. Supports SD card boot, and external Arm tracing. Orderable separately.</li> <li>Mini USB Cable. Included with the development kit.</li> <li>Micro USB Cable. Included with the development kit.</li> <li>Ethernet Cable. Included with the development kit.</li> <li>Micro SD card and USB card writer. Included with the development kit.</li> <li>Host PC with</li> <li>64 GB of RAM. Less will be fine for only exercising the binaries, and not rebuilding the GSRD.</li> <li>Linux OS installed. Ubuntu 22.04LTS was used to create this page, other versions and distributions may work too</li> <li>Serial terminal (for example GtkTerm or Minicom on Linux and TeraTerm or PuTTY on Windows)</li> <li>Intel Quartus Prime Pro Edition version 24.1. Used to recompile the hardware design. If only writing binaris is required, then the smaller Intel Quartus Prime Pro Edition Programmer version 24.1 is sufficient.</li> <li>TFTP server. This used to download the eMMC binaries to board to be flashed by U-Boot</li> <li>Local Ethernet network, with DHCP server</li> <li>Internet connection. For downloading the files, especially when rebuilding the GSRD.</li> </ul> </li> </ul>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#release-contents","title":"Release Contents","text":"Binaries <p>The Agilex 5 Premium Development Kit GSRD binaries are located at https://releases.rocketboards.org/2024.05/:</p> HPS Daughter Card Boot Source Link Enablement Board SD Card https://releases.rocketboards.org/2024.05/gsrd/agilex5_dk_a5e065bb32aes1_gsrd Enablement Board QSPI https://releases.rocketboards.org/2024.05/qspi/agilex5_dk_a5e065bb32aes1_qspi NAND Board eMMC https://releases.rocketboards.org/2024.05/emmc/agilex5_dk_a5e065bb32aes1_emmc Test Board SD Card https://releases.rocketboards.org/2024.05/debug/agilex5_dk_a5e065bb32aes1_debug Sources <p>Quartus Prime Pro v24.1 and the following software component versions are used to build the GSRD:</p> Component Location Branch Commit ID/Tag GHRD https://github.com/altera-opensource/ghrd-socfpga master QPDS24.1_REL_AGILEX5_GSRD_PR Linux https://github.com/altera-opensource/linux-socfpga socfpga-6.1.68-lts QPDS24.1_REL_AGILEX5_GSRD_PR Arm Trusted Firmware https://github.com/altera-opensource/arm-trusted-firmware socfpga_v2.10.0 QPDS24.1_REL_AGILEX5_GSRD_PR U-Boot https://github.com/altera-opensource/u-boot-socfpga socfpga_v2023.10 QPDS24.1_REL_AGILEX5_GSRD_PR Yocto Project: poky https://git.yoctoproject.org/poky nanbield latest Yocto Project: meta-intel-fpga https://git.yoctoproject.org/meta-intel-fpga nanbield QPDS24.1_REL_AGILEX5_GSRD_PR Yocto Project: meta-intel-fpga-refdes https://github.com/altera-opensource/meta-intel-fpga-refdes nanbield QPDS24.1_REL_AGILEX5_GSRD_PR GSRD Build Script: gsrd-socfpga https://github.com/altera-opensource/gsrd-socfpga nanbield QPDS24.1_REL_AGILEX5_GSRD_PR"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#release-notes","title":"Release Notes","text":"Embedded Software Readiness <p>Y - hardware validated; N - hardware validation in progress; Y* - tested with condition; Y** - tested, with known issues listed in the next section.</p> HPS Peripherals/Features 24.1 Readiness QPDS24.1_REL_AGILEX5_GSRD_PR tag Timer/Watchdog Y Clock Manager Y Power Manager Y MPU Y Reset Manager Y** UART Y GPIO Y QSPI Y SD/eMMC Y** I3C N I2C Y USB3.1 Y* (2.0 mode only, 3.1 mode by PRQ) USB2.0 Y NAND Not supported in Agilex\u2122 5 FPGA E-Series 065B Premium Development Kit SPI Y Bridge Y** EMAC Y** FPGA Configuration Y** RSU Y** Known Issues Issue Workaround Impacted Peripherals/Features Internal IDs Impacted Branch/Tag HPS Ethernet controller (XGMAC)is observed performing at lower rates (~50%) and having packet loss when running at 1G Mbps speed mode. Contact Altera support for more details. Ethernet 15015213942, 18036458750, 15015743194 QPDS24.1_REL_AGILEX5_GSRD_PR Read/write across the F2H bridge fails Fixed in 24.1 Patch 0.08. Refer to KDB for details. Bridge 15015307934 QPDS24.1_REL_AGILEX5_GSRD_PR Warm reset fails in U-Boot None Reset Manager 16023530680 QPDS24.1_REL_AGILEX5_GSRD_PR Reconfiguring FPGA fabric from Linux fail A patch can be provided. Contact Altera support for more details. FPGA Configuration 15015929503 QPDS24.1_REL_AGILEX5_GSRD_PR ADMA error seen during \"dd\" operation Avoid using \"dd\" command\" SD/eMMC 15015146909 QPDS24.1_REL_AGILEX5_GSRD_PR For HPS Boot First Mode, F2H bridge fails when phase 2 core.rbf is reconfigured None Bridge 22019988055 QPDS24.1_REL_AGILEX5_GSRD_PR ECC is not enabled for HPS EMIF in 24.1 GHRD None HPS EMIF 15015984966 QPDS24.1_REL_AGILEX5_GSRD_PR DDR calibration took about 10 seconds in 24.1 GSRD None HPS EMIF 14022235400 QPDS24.1_REL_AGILEX5_GSRD_PR \"XGMAC_DMA_MODE_SWR_stuck: -110\" message seen after \"dhcp\" command on HPS Enablement Board in 24.1 GSRD You can ignore the error, \"dhcp\" works as usual. Alternatively, you can also disable gmac0 instance in socfpga_agilex5_socdk.dts. EMAC 15016071381 QPDS24.1_REL_AGILEX5_GSRD_PR"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#development-kit","title":"Development Kit","text":"<p>This release targets the Agilex 5 FPGA E-Series 065B Premium Development Kit. Refer to board documentation for more information about the development kit.</p> <p></p> Installing HPS Daughtercard <p>This section shows how to install the included HPS Enablement Daughtercard.  The installation for the other optional HPS Boards is similar.</p> <p>1. Identify the correct thumb screws and washers needed, they are in a plastic bag: </p> <p>2. Locate the area on the development board where the HPS Daughtercard needs to be installed: </p> <p>3. Place the plastic washers on top of the three hex mounting posts: </p> <p>4. Place HPS Board on top of the posts and washers: </p> <p>5. Place the hex thumb screws on the two posts, as shown below. Note the 3rd one on the bottom is best unplaced as fully screwing that in may move the board. Also note the thumb screw close to the Ethernet connector is hard to screw, recommend to use small pliers and patience to make it secure. It is important that the HPS Board is secure, and does not move: </p> <p>Note: If you need to swap HPS Boards frequently,  it is recommended to remove the hex posts, and install the plastic washers between the PCB and the posts. This way you do not need to be careful for the washers not to move when you place the HPS Board on top of the posts. Note there are also plastic washers underneath the development board PCB, make sure to leave those in place when performing this operation</p> Changing MSEL <p>MSEL signals instruct the FPGA device on which configuration scheme to use. Configuration schemes used by the scenarios presented in this guide are JTAG and QSPI. MSEL is changed through dipswitch SW27. Only change the settings while the board is powered off.</p> <p>Configuration OFF-OFF-OFF-OFF corresponds to JTAG:</p> <p></p> <p>Configuration OFF-ON-ON-OFF corresponds to JTAG:</p> <p></p>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#ghrd-overview","title":"GHRD Overview","text":"<p>The Golden Hardware Reference Design is an important part of the GSRD and consists of the following components:</p> <ul> <li>Hard Processor System (HPS)<ul> <li>Dual core Arm Cortex-A76 processor</li> <li>Dual core Arm Cortex-A55 processor</li> <li>HPS Peripherals connected to Out-of-Box Experience (OOBE2) Daughter Card:<ul> <li>SDMMC</li> <li>EMAC</li> <li>HPS JTAG debug</li> <li>I3C</li> <li>USB UART</li> <li>USB 3.1</li> </ul> </li> </ul> </li> <li>Multi-Ported Front End (MPFE) for HPS External Memory Interface (EMIF)</li> <li>FPGA Peripherals connected to Lightweight HPS-to-FPGA (LWS2F) AXI Bridge and JTAG to Avalon Master Bridge<ul> <li>Three user LED outputs</li> <li>Four user DIP switch inputs</li> <li>Four user push-button inputs</li> <li>System ID</li> </ul> </li> <li>FPGA Peripherals connected to HPS-to-FPGA (S2F) AXI Bridge<ul> <li>256KB of FPGA on-chip memory</li> </ul> </li> </ul> <p> </p> <p>The GHRD allows hardware designers to access each peripheral in the FPGA portion of the SoC with System Console, through the JTAG master module. This signal-level access is independent of the driver readiness of each peripheral.</p>  MPU Address Maps <p>This section presents the address maps as seen from the MPU side.  </p>  HPS-to-FPGA Address Map <p>The three FPGA windows in the MPU address map provide access to 256 GB of FPGA space. First window is 1 GB from 00_4000_0000, second window is 15 GB from 04_4000_0000, third window is 240 GB from 44_0000_0000. The following table lists the offset of each peripheral from the HPS-to-FPGA bridge in the FPGA portion of the SoC.</p> Peripheral Address Offset Size (bytes) Attribute onchip_memory2_0 0x0 256K On-chip RAM as scratch pad Lightweight HPS-to-FPGA Address Map <p>The the memory map of system peripherals in the FPGA portion of the SoC as viewed by the MPU, which starts at the lightweight HPS-to-FPGA base address of 0x00_2000_0000, is listed in the following table.</p> Peripheral Address Offset Size (bytes) Attribute sysid 0x0001_0000 32 Unique system ID led_pio 0x0001_0080 16 LED outputs button_pio 0x0001_0060 16 Push button inputs dipsw_pio 0x0001_0070 16 DIP switch inputs JTAG Master Address Map <p>There are three JTAG master interfaces in the design, one for accessing non-secure peripherals in the FPGA fabric, and another for accessing secure peripheral in the HPS through the FPGA-to-HPS Interface and another for FPGA fabric to SDRAM.</p> <p>The following table lists the address of each peripheral in the FPGA portion of the SoC, as seen through the non-secure JTAG master interface.</p> Peripheral Address Offset Size (bytes) Attribute onchip_memory2_0 0x0004_0000 256K On-chip RAM sysid 0x0001_0000 32 Unique system ID led_pio 0x0001_0080 16 LED outputs button_pio 0x0001_0060 16 Push button inputs dipsw_pio 0x0001_0070 16 DIP switch inputs  Interrupt Routing <p>The HPS exposes 64 interrupt inputs for the FPGA logic. The following table lists the interrupt connections from soft IP peripherals to the HPS interrupt input interface.</p> Peripheral Interrupt Number Attribute dipsw_pio f2h_irq0[0] 4 DIP switch inputs button_pio f2h_irq0[1] 4 Push button inputs"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#exercising-prebuilt-binaries","title":"Exercising Prebuilt Binaries","text":"<p>This section presents how to use the prebuilt binaries included with the GSRD release.</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#configure-board","title":"Configure Board","text":"<p>1. Leave all jumpers and switches in their default configuration.</p> <p>2. Install the appropriate HPS Daughtercard.</p> <p>3. Connect mini USB cable from vertical connector on HPS Daughtercard to host PC. This is used for the HPS serial console.</p> <p>4. Connect micro USB cable from development board to host PC. This is used by the tools for JTAG communication.</p> <p>5. Connect Ethernet cable from HPS Board to an Ethernet switch connected to local network. Local network must provide a DCHP server.</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#configure-serial-console","title":"Configure Serial Console","text":"<p>All the scenarios included in this release require a serial connection. This section presents how to configure the serial connection.</p> <p>1. Install a serial terminal emulator application on your host PC:  </p> <ul> <li>For Windows: TeraTerm or PuTTY are available</li> <li>For Linux: GtkTerm or Minicom are available</li> </ul> <p>2. Power down your board if powered up. This is important, as once powered up, with the micro USB JTAG cable connected, a couple more USB serial ports will enumerate, and you may choose the wrong port.</p> <p>3. Connect mini-USB cable from the vertical mini-USB connector on the HPS Board to the host PC</p> <p>4. On the host PC, an USB serial port will enumerate. On Windows machines it will be something like <code>COM4</code>, while on Linux machines it will be something like <code>/dev/tty/USB0</code>.</p> <p>5. Configure your serial terminal emulator to use the following settings:  </p> <ul> <li>Serial port: as mentioned above</li> <li>Baud rate: 115,200</li> <li>Data bits: 8</li> <li>Stop bits: 1</li> <li>CRC: disabled</li> <li>Hardware flow control: disabled</li> </ul> <p>6. Connect your terminal emulator</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#hps-enablement-board","title":"HPS Enablement BOard","text":"<p>This section presents how to use HPS Enablement BOard to boot from SD card, and also from QSPI.</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#booting-from-sd-card","title":"Booting from SD Card","text":"Write SD Card <p>1. Download SD card image from the prebuilt binaries https://releases.rocketboards.org/2024.05/gsrd/agilex5_dk_a5e065bb32aes1_gsrd/sdimage.tar.gz and extract the archive, obtaining the file <code>gsrd-console-image-agilex5_devkit.wic</code>.</p> <p>2. Write the SD card image to the micro SD card using the included USB writer, and <code>dd</code> utility on Linux, or  Win32DiskImager on Windows, available at https://win32diskimager.org/.</p> Write QSPI Flash <p>1. Power down board</p> <p>2. Set MSEL dipswitch SW27 to JTAG: OFF-OFF-OFF-OFF</p> <p>3. Power up the board</p> <p>4. Download and extract the JIC image, then write it to QSPI <pre><code>wget https://releases.rocketboards.org/2024.05/gsrd/agilex5_dk_a5e065bb32aes1_gsrd/ghrd_a5ed065bb32ae6sr0.hps.jic.tar.gz\ntar xf ghrd_a5ed065bb32ae6sr0.hps.jic.tar.gz\nquartus_pgm -c 1 -m jtag -o \"pvi;ghrd_a5ed065bb32ae6sr0.hps.jic\"\n</code></pre></p> Boot Linux <p>1. Power down board</p> <p>2. Set MSEL dipswitch SW27 to QSPI: OFF-ON-ON-OFF</p> <p>3. Power up the board</p> <p>4. Wait for Linux to boot, use <code>root</code> as user name, and no password wil be requested.</p> Run Sample Applications <p>1. Boot to Linux</p> <p>2. Change current folder to <code>intelFPGA</code> folder <pre><code>cd intelFPGA\n</code></pre> 3. Run the hello world application <pre><code>./hello\n</code></pre> 4. Run the <code>syscheck</code> application <pre><code>./syscheck\n</code></pre> Press <code>q</code> to exit the <code>syscheck</code> application.</p> Control LEDs <p>1. Boot to Linux</p> <p>2. Control LEDs by using the following sysfs entries:</p> <ul> <li>/sys/class/leds/fpga_led0/brightness</li> <li>/sys/class/leds/fpga_led1/brightness</li> <li>/sys/class/leds/fpga_led2/brightness</li> <li>/sys/class/leds/hps_led1/brightness</li> </ul> <p>using commands such as: <pre><code>cat /sys/class/leds/fpga_led0/brightness\necho 0 &gt; /sys/class/leds/fpga_led0/brightness\necho 1 &gt; /sys/class/leds/fpga_led1/brightness\n</code></pre></p> <p>Because of how the LEDs are connected, for the above commands <code>0</code> means LED is turned on, <code>1</code> means LED is turned off.</p> Connect to Board Using SSH <p>1. Boot to Linux  </p> <p>2. Determine the board IP address using the <code>ifconfig</code> command: <pre><code>root@agilex5devkit:~# ifconfig\neth0: flags=-28605&lt;UP,BROADCAST,RUNNING,MULTICAST,DYNAMIC&gt;  mtu 1500\ninet 192.168.1.153  netmask 255.255.255.0  broadcast 192.168.1.255\n        inet6 fe80::f0eb:c8ff:fec4:eed7  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether f2:eb:c8:c4:ee:d7  txqueuelen 1000  (Ethernet)\nRX packets 649  bytes 45132 (44.0 KiB)\nRX errors 0  dropped 226  overruns 0  frame 0\nTX packets 56  bytes 8789 (8.5 KiB)\nTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\ndevice interrupt 23  lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536\ninet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;\n        loop  txqueuelen 1000  (Local Loopback)\nRX packets 100  bytes 8408 (8.2 KiB)\nRX errors 0  dropped 0  overruns 0  frame 0\nTX packets 100  bytes 8408 (8.2 KiB)\nTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre> 3. Connect to the board over SSH using <code>root</code> username, no password will be requested: <pre><code>ssh root@192.168.1.153\n</code></pre> Note: Make sure to replace the above IP address to the one matching the output of running <code>ifconfig</code> on youir board.</p> Visit Board Web Page <p>1. Boot to Linux  </p> <p>2. Determine board IP address using <code>ifconfig</code> like in the previous scenario  </p> <p>3. Start a web browser and enter the IP address in the address bar  </p> <p>4. The web browser will display a page served by the web server running on the board.  </p> <p>Note: Current release has a limitation, in that the LEDs are not controllable from the web page. This will be resolved in the next release.</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#booting-from-qspi","title":"Booting from QSPI","text":"<p>This section presents how to boot from QSPI. One notable aspect is that you need to wipe the SD card partitioning information, as otherwise U-Boot SPL could find a valid SD card image, and try to boot from that first.</p> Wipe SD Card <p>Either write 1MB of zeroes at the beginning of the SD card, or remove the SD card from the HPS Daughter Card. You can use <code>dd</code> on Linux, or <code>Win32DiskImager</code> on Windows to achieve this.</p> Write QSPI Flash <p>1. Power down board</p> <p>2. Set MSEL dipswitch SW27 to JTAG: OFF-OFF-OFF-OFF</p> <p>3. Power up the board</p> <p>4. Download and extract the JIC image, then write it to QSPI: <pre><code>wget https://releases.rocketboards.org/2024.05/qspi/agilex5_dk_a5e065bb32aes1_qspi/agilex_flash_image.hps.jic.tar.gz\ntar xf agilex_flash_image.hps.jic.tar.gz\nquartus_pgm -c 1 -m jtag -o \"pvi;agilex_flash_image.hps.jic\"\n</code></pre></p> Boot Linux <p>1. Power down board</p> <p>2. Set MSEL dipswitch SW27 to QSPI: OFF-ON-ON-OFF</p> <p>3. Power up the board</p> <p>4. Wait for Linux to boot, use <code>root</code> as user name, and no password wil be requested.</p> <p>Note: On first boot, the UBIFS rootfilesystem is initialized, and that takes a few minutes. This will not happen on next reboots. See a sample log below:</p> <pre><code>[   17.033558] UBIFS (ubi0:4): Mounting in unauthenticated mode\n[   17.039470] UBIFS (ubi0:4): background thread \"ubifs_bgt0_4\" started, PID 130\n[   17.061510] UBIFS (ubi0:4): start fixing up free space\n[   20.644496] random: crng init done\n[   27.120040] platform soc:leds: deferred probe pending\n[  243.190874] UBIFS (ubi0:4): free space fixup complete\n[  243.315909] UBIFS (ubi0:4): UBIFS: mounted UBI device 0, volume 4, name \"rootfs\"\n[  243.323290] UBIFS (ubi0:4): LEB size: 65408 bytes (63 KiB), min./max. I/O unit sizes: 8 bytes/256 bytes\n[  243.332653] UBIFS (ubi0:4): FS size: 167117440 bytes (159 MiB, 2555 LEBs), max 6500 LEBs, journal size \n</code></pre>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#hps-nand-board","title":"HPS NAND BOard","text":"<p>This section presents how to use HPS NAND BOard to boot from eMMC.</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#booting-from-emmc","title":"Booting from eMMC","text":"Configure Board <p>For this scenario, we are using the HPS NAND Board, which can be configured through dipswitch SW3 to enable either eMMC or NAND. Set SW3 to ON to enable eMMC.</p> Write eMMC Flash <p>We are writing the eMMC Flash by using U-Boot commands. We are getting to U-Boot prompt by booting from QSPI using a JIC image which contains U-Boot, thereby not relying on what is already in eMMC.</p> <p>1. Download, and extract the eMMC image <pre><code>wget https://releases.rocketboards.org/2024.05/emmc/agilex5_dk_a5e065bb32aes1_emmc/sdimage.tar.gz\ntar xf sdimage.tar.gz\n</code></pre> 2. Split the eMMC image into 1GB chunks and copy them to your TFT folder: <pre><code>split --bytes=1G gsrd-console-image-agilex5_devkit.wic\nmv xa* &lt;your_tfp_folder&gt;\n</code></pre> This will put the two chunks called <code>xaa</code> and <code>xab</code> on your TFTP folder. 3. Power down the board. </p> <p>4. Set MSEL dipswitch SW27 to JTAG: OFF-OFF-OFF-OFF</p> <p>5. Power up the board</p> <p>6. Download the helper JIC used to write the eMMC image, extract it and write it to QSPI: <pre><code>wget https://releases.rocketboards.org/2024.05/emmc/agilex5_dk_a5e065bb32aes1_emmc/uboot.jic.tar.gz\ntar xf uboot.jic.tar.gz\nquartus_pgm -c 1 -m jtag -o \"pvi;uboot.jic\"\n</code></pre> 7. Determine your host IP address using <code>ifconfig</code> to use it as the IP address of the TFTP server</p> <p>8. Power down the board</p> <p>9. Set MSEL dipswitch SW27 to QSPI: OFF-ON-ON-OFF</p> <p>10. Power up the board</p> <p>11. Stop U-Boot at the boot countdown, to drop to U-Boot console</p> <p>12. At the U-Boot console, run the following commands to write the SD card image: <pre><code>setenv autoload no\ndhcp\nsetenv serverip &lt;tftp_server_ip_address&gt;\ntftp ${loadaddr} xaa\nsetexpr blkcnt1 ${filesize} / 0x200\nmmc write ${loadaddr} 0 ${blkcnt1}\ntftp ${loadaddr} xab\nsetexpr blkcnt2 ${filesize} / 0x200\nmmc write ${loadaddr} ${blkcnt1} ${blkcnt2}\n</code></pre> Note: If you already have a valid image in eMMC, the U-Boot SPL which runs from QSPI will be able to see that and load it instead of the U-Boot from QSPI. To prevent this from happening, you can wipe out the eMMC card partitioning, then issue a reset for U-Boot to reboot into the QSPI helper JIC:</p> <pre><code>mw.w ${loadaddr} 0x0 0x80000\nmmc rescan\nmmc write ${loadaddr} 0x0 0x400\nreset\n</code></pre> Write QSPI Flash <p>1. Power down the board. </p> <p>2. Set MSEL dipswitch SW27 to JTAG: OFF-OFF-OFF-OFF</p> <p>3. Power up the board</p> <p>4. Download the JIC and write it to QSPI: <pre><code>wget https://releases.rocketboards.org/2024.05/emmc/agilex5_dk_a5e065bb32aes1_emmc/ghrd_a5ed065bb32ae6sr0.hps.jic.tar.gz tar xf ghrd_a5ed065bb32ae6sr0.hps.jic.tar.gz quartus_pgm -c 1 -m jtag -o \"pvi;ghrd_a5ed065bb32ae6sr0.hps.jic\"\n</code></pre></p> Boot Linux <p>1. Power down the board. </p> <p>2. Set MSEL dipswitch SW27 to QSPI: OFF-ON-ON-OFF</p> <p>3. Power up the board</p> <p>4. Board will boot to Linux. Enter <code>root</code> as username, no password will be requested</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#hps-test-board","title":"HPS Test BOard","text":"<p>This section presents how to use HPS Test BOard to boot from SD card.</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#booting-from-sd-card_1","title":"Booting from SD Card","text":"Configure Board <p>For this scenario we are using the HPS Test Board. There is single dipswitch on that board called SW1, which needs to be set to the ON position.</p> Write SD Card <p>1. Download SD card image from the prebuilt binaries https://releases.rocketboards.org/2024.05/debug/agilex5_dk_a5e065bb32aes1_debug/sdimage.tar.gz and extract the archive, obtaining the file <code>gsrd-console-image-agilex5_devkit.wic</code>.</p> <p>2. Write the SD card image to the micro SD card using the included USB writer, and <code>dd</code> utility on Linux, or  Win32DiskImager on Windows, available at https://win32diskimager.org/.</p> Write QSPI Flash <p>1. Power down the board. </p> <p>2. Set MSEL dipswitch SW27 to JTAG: OFF-OFF-OFF-OFF</p> <p>3. Power up the board</p> <p>4. Download the JIC and write it to QSPI: <pre><code>wget https://releases.rocketboards.org/2024.05/debug/agilex5_dk_a5e065bb32aes1_debug/ghrd_a5ed065bb32ae6sr0.hps.jic.tar.gz tar xf ghrd_a5ed065bb32ae6sr0.hps.jic.tar.gz quartus_pgm -c 1 -m jtag -o \"pvi;ghrd_a5ed065bb32ae6sr0.hps.jic\"\n</code></pre></p> Boot Linux <p>1. Power down the board. </p> <p>2. Set MSEL dipswitch SW27 to QSPI: OFF-ON-ON-OFF</p> <p>3. Power up the board</p> <p>4. Board will boot to Linux. Enter <code>root</code> as username, no password will be requested</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#rebuilding-the-gsrd","title":"Rebuilding the GSRD","text":""},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#yocto-build-prerequisites","title":"Yocto Build Prerequisites","text":"<p>Make sure you have Yocto system requirements met: https://docs.yoctoproject.org/3.4.1/ref-manual/system-requirements.html#supported-linux-distributions.</p> <p>The command to install the required packages on Ubuntu 22.04-LTS is: <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install openssh-server mc libgmp3-dev libmpc-dev gawk wget git diffstat unzip texinfo gcc \\\nbuild-essential chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping \\\npython3-git python3-jinja2 libegl1-mesa libsdl1.2-dev pylint3 xterm python3-subunit mesa-common-dev zstd \\\nliblz4-tool git fakeroot build-essential ncurses-dev xz-utils libssl-dev bc flex libelf-dev bison xinetd \\\ntftpd tftp nfs-kernel-server libncurses5 libc6-i386 libstdc++6:i386 libgcc++1:i386 lib32z1 \\\ndevice-tree-compiler curl mtd-utils u-boot-tools net-tools swig -y\n</code></pre> On Ubuntu 22.04 you will also need to point the /bin/sh to /bin/bash, as the default is a link to <code>/bin/dash</code>: <pre><code>sudo ln -sf /bin/bash /bin/sh\n</code></pre></p>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#hps-enablement-board_1","title":"HPS Enablement BOard","text":"<p>This section presents how to build the binaries for HPS Enablement BOard.</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#build-sd-card-boot-binaries","title":"Build SD Card Boot Binaries","text":"<p>The following diagram shows an overview of how the build process works for this use case:</p> <p></p> Setup Environment <p>1. Create the top folder to store all the build artifacts:</p> <pre><code>sudo rm -rf artifacts.enablement\nmkdir artifacts.enablement\ncd artifacts.enablement\nexport TOP_FOLDER=`pwd`\n</code></pre> <p>2. Download and setup the build toolchain. It will be used only by the GHRD makefile to build the debug HPS FSBL, to build the _hps_debug.sof file:</p> <pre><code>cd $TOP_FOLDER\nwget https://developer.arm.com/-/media/Files/downloads/gnu/11.2-2022.02/binrel\\\n/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz\ntar xf gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz\nrm -f gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz\nexport PATH=`pwd`/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu/bin:$PATH\nexport ARCH=arm64\nexport CROSS_COMPILE=aarch64-none-linux-gnu-\n</code></pre> <p>3. Set up the Quartus tools in the PATH, so they are accessible without full path</p> <pre><code>export QUARTUS_ROOTDIR=~/intelFPGA_pro/24.1/quartus/\nexport PATH=$QUARTUS_ROOTDIR/bin:$QUARTUS_ROOTDIR/linux64:$QUARTUS_ROOTDIR/../qsys/bin:$PATH\n</code></pre> Build Hardware Design <pre><code>cd $TOP_FOLDER\nrm -rf ghrd-socfpga agilex5_soc_devkit_ghrd\ngit clone -b QPDS24.1_REL_AGILEX5_GSRD_PR https://github.com/altera-opensource/ghrd-socfpga\nmv ghrd-socfpga/agilex5_soc_devkit_ghrd .\nrm -rf ghrd-socfpga\ncd agilex5_soc_devkit_ghrd\nmake config\nmake DEVICE=A5ED065BB32AE6SR0 HPS_EMIF_MEM_CLK_FREQ_MHZ=800 HPS_EMIF_REF_CLK_FREQ_MHZ=100 generate_from_tcl\nmake all\ncd ..\n</code></pre> <p>The following files are created:</p> <ul> <li><code>$TOP_FOLDER/agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof</code></li> <li><code>$TOP_FOLDER/agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0_hps_debug.sof</code></li> </ul> Build Core RBF <pre><code>cd $TOP_FOLDER\nrm -f ghrd_a5ed065bb32ae6sr0.rbf\nquartus_pfg -c agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0_hps_debug.sof ghrd_a5ed065bb32ae6sr0.rbf -o hps=1\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/ghrd_a5ed065bb32ae6sr0.core.rbf</code></li> </ul> Set Up Yocto <p>1. Clone the Yocto script and prepare the build:</p> <pre><code>cd $TOP_FOLDER\nrm -rf gsrd-socfpga\ngit clone --branch QPDS24.1_REL_AGILEX5_GSRD_PR --single-branch https://github.com/altera-opensource/gsrd-socfpga\ncd gsrd-socfpga\n. agilex5_devkit-gsrd-build.sh\nbuild_setup\n</code></pre> Customize Yocto <p>1. Save the <code>core.rbf</code> as <code>$WORKSPACE/meta-intel-fpga-refdes/recipes-bsp/ghrd/files/agilex5_devkit_gsrd_ghrd.core.rbf</code></p> <p>2. Update the recipe <code>$WORKSPACE/meta-intel-fpga-refdes/recipes-bsp/ghrd/hw-ref-design.bb</code> as follows:  </p> <ul> <li>Replace the entry <code>${GHRD_REPO}/agilex5_devkit_gsrd_${ARM64_GHRD_CORE_RBF};name=agilex5_devkit_gsrd_core</code> with <code>file://agilex5_devkit_gsrd_ghrd.core.rbf;sha256sum=&lt;CORE_SHA&gt;</code> where <code>CORE_SHA</code> is the sha256 checksum of the file</li> <li>Delete the line <code>SRC_URI[agilex5_devkit_gsrd_core.sha256sum] = \"bf11c8cb3b6d9487f93ce0e055b1e5256998a25b25ac4690bef3fcd6225ee1ae\"</code> The above are achieved by the following instructions:</li> </ul> <pre><code>CORE_RBF=$WORKSPACE/meta-intel-fpga-refdes/recipes-bsp/ghrd/files/agilex5_devkit_gsrd_ghrd.core.rbf\nln -s $TOP_FOLDER/ghrd_a5ed065bb32ae6sr0.core.rbf $CORE_RBF\nOLD_URI=\"\\${GHRD_REPO}\\/agilex5_devkit_gsrd_\\${ARM64_GHRD_CORE_RBF};name=agilex5_devkit_gsrd_core\"\nCORE_SHA=$(sha256sum $CORE_RBF | cut -f1 -d\" \")\nNEW_URI=\"file:\\/\\/agilex5_devkit_gsrd_ghrd.core.rbf;sha256sum=$CORE_SHA\"\nsed -i \"s/$OLD_URI/$NEW_URI/g\" $WORKSPACE/meta-intel-fpga-refdes/recipes-bsp/ghrd/hw-ref-design.bb\nsed -i \"/agilex5_devkit_gsrd_core\\.sha256sum/d\" $WORKSPACE/meta-intel-fpga-refdes/recipes-bsp/ghrd/hw-ref-design.bb\n</code></pre> Build Yocto <p>Build Yocto:</p> <pre><code>bitbake_image\n</code></pre> <p>Gather files:</p> <pre><code>package\n</code></pre> <p>The following files are created:</p> <ul> <li><code>$TOP_FOLDER/gsrd-socfpga/agilex5_devkit-gsrd-images/u-boot-agilex5_devkit-socdk-gsrd-atf/u-boot-spl-dtb.hex</code></li> <li><code>$TOP_FOLDER/gsrd-socfpga/agilex5_devkit-gsrd-images/u-boot.itb</code></li> <li><code>$TOP_FOLDER/gsrd-socfpga/agilex5_devkit-gsrd-images/sdimage.tar.gz</code></li> </ul> Build QSPI Image <pre><code>cd $TOP_FOLDER\nrm -f ghrd_a5ed065bb32ae6sr0.hps.jic ghrd_a5ed065bb32ae6sr0.core.rbf\nquartus_pfg \\\n-c agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof ghrd_a5ed065bb32ae6sr0.jic \\\n-o device=MT25QU128 \\\n-o flash_loader=A5ED065BB32AE6SR0 \\\n-o hps_path=gsrd-socfpga/agilex5_devkit-gsrd-images/u-boot-agilex5_devkit-socdk-gsrd-atf/u-boot-spl-dtb.hex \\\n-o mode=ASX4 \\\n-o hps=1\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/ghrd_a5ed065bb32ae6sr0.hps.jic</code></li> </ul> Build HPS RBF <p>This is an optional step, in which you can build an HPS RBF file, which can be used to configure the HPS through JTAG instead of QSPI though the JIC file.</p> <pre><code>cd $TOP_FOLDER\nrm -f ghrd_a5ed065bb32ae6sr0.hps.rbf\nquartus_pfg \\\n-c agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof  ghrd_a5ed065bb32ae6sr0.rbf \\\n-o hps_path=gsrd-socfpga/agilex5_devkit-gsrd-images/u-boot-agilex5_devkit-socdk-gsrd-atf/u-boot-spl-dtb.hex \\\n-o hps=1\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/ghrd_a5ed065bb32ae6sr0.hps.rbf</code></li> </ul>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#build-qspi-boot-binaries","title":"Build QSPI Boot Binaries","text":"<p>The diagram below shows how booting from QSPI JIC is built. The hardware project compilation and Yocto build remain the same, and the QSPI JIC is built based on the resulted files: </p> <p>1. Create the folder to contain all the files:</p> <pre><code>cd $TOP_FOLDER\nsudo rm -rf qspi_boot\nmkdir qspi_boot\ncd qspi_boot\n</code></pre> <p>2. Get the <code>ubinize.cfg</code> file which contains the details on how to build the <code>root.ubi</code> volume, and <code>agilex5_devkit_flash_image_hps.pfg</code> which contains the instructions for Programming File Generator on how to create the .jic file:</p> <pre><code>wget https://releases.rocketboards.org/2024.05/qspi/agilex5_dk_a5e065bb32aes1_qspi/ubinize.cfg\nwget https://releases.rocketboards.org/2024.05/qspi/agilex5_dk_a5e065bb32aes1_qspi/agilex5_devkit_flash_image_hps.pfg\n</code></pre> <p>3. Link to the files that are needed from building the hardware design, and yocto:</p> <pre><code>ln -s $TOP_FOLDER/gsrd-socfpga/agilex5_devkit-gsrd-images/console-image-minimal-agilex5_devkit_nor.ubifs rootfs.ubifs\nln -s $TOP_FOLDER/gsrd-socfpga/agilex5_devkit-gsrd-images/kernel.itb .\nln -s $TOP_FOLDER/gsrd-socfpga/agilex5_devkit-gsrd-images/u-boot-agilex5_devkit-socdk-gsrd-atf/boot.scr.uimg\nln -s $TOP_FOLDER/gsrd-socfpga/agilex5_devkit-gsrd-images/u-boot-agilex5_devkit-socdk-gsrd-atf/u-boot-spl-dtb.hex .\nln -s $TOP_FOLDER/agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof .\n</code></pre> <p>4. Process the u-boot.itb file to be exactly 2MB in size:</p> <pre><code>cp $TOP_FOLDER/gsrd-socfpga/agilex5_devkit-gsrd-images/u-boot-agilex5_devkit-socdk-gsrd-atf/u-boot.itb .\nuboot_part_size=2*1024*1024\nuboot_size=`wc -c &lt; u-boot.itb`\nuboot_pad=\"$((uboot_part_size-uboot_size))\"\ntruncate -s +$uboot_pad u-boot.itb\nmv u-boot.itb u-boot.bin\n</code></pre> <p>5. Create the <code>root.ubi</code> file and rename it to <code>hps.bin</code> as Programming File Generator needs the <code>.bin</code> extension:</p> <pre><code>ubinize -o root.ubi -p 65536 -m 1 -s 1 ubinize.cfg\nln -s root.ubi hps.bin\n</code></pre> <p>6. Create the JIC file:</p> <pre><code>quartus_pfg -c agilex5_devkit_flash_image_hps.pfg\n</code></pre>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#hps-nand-board_1","title":"HPS NAND BOard","text":"<p>This section presents how to build the binaries for HPS NAND BOard, for booting from eMMC.</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#build-emmc-binaries","title":"Build eMMC binaries","text":"<p>The following diagram shows how to build the eMMC binaries that target the HPS NAND Daughtercard: </p> Setup Environment <p>1. Create the top folder to store all the build artifacts:</p> <pre><code>sudo rm -rf artifacts.emmc\nmkdir artifacts.emmc\ncd artifacts.emmc\nexport TOP_FOLDER=`pwd`\n</code></pre> <p>2. Download and setup the build toolchain. It will be used only by the GHRD makefile to build the debug HPS FSBL, to build the _hps_debug.sof file:</p> <pre><code>cd $TOP_FOLDER\nwget https://developer.arm.com/-/media/Files/downloads/gnu/11.2-2022.02/binrel\\\n/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz\ntar xf gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz\nrm -f gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz\nexport PATH=`pwd`/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu/bin:$PATH\nexport ARCH=arm64\nexport CROSS_COMPILE=aarch64-none-linux-gnu-\n</code></pre> <p>3. Set up the Quartus tools in the PATH, so they are accessible without full path:</p> <pre><code>export QUARTUS_ROOTDIR=~/intelFPGA_pro/24.1/quartus/\nexport PATH=$QUARTUS_ROOTDIR/bin:$QUARTUS_ROOTDIR/linux64:$QUARTUS_ROOTDIR/../qsys/bin:$PATH\n</code></pre> Build Hardware Design <pre><code>cd $TOP_FOLDER\nrm -rf ghrd-socfpga agilex5_soc_devkit_ghrd\ngit clone -b QPDS24.1_REL_AGILEX5_GSRD_PR https://github.com/altera-opensource/ghrd-socfpga\nmv ghrd-socfpga/agilex5_soc_devkit_ghrd .\nrm -rf ghrd-socfpga\ncd agilex5_soc_devkit_ghrd\nmake config\nmake DEVICE=A5ED065BB32AE6SR0 HPS_EMIF_MEM_CLK_FREQ_MHZ=800 HPS_EMIF_REF_CLK_FREQ_MHZ=100 DAUGHTER_CARD=devkit_dc_emmc generate_from_tcl\nmake all\ncd ..\n</code></pre> <p>The following files are created:</p> <ul> <li><code>$TOP_FOLDER/agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof</code></li> <li><code>$TOP_FOLDER/agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0_hps_debug.sof</code></li> </ul> Build Core RBF <pre><code>cd $TOP_FOLDER\nrm -f ghrd_a5ed065bb32ae6sr0.rbf\nquartus_pfg -c agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0_hps_debug.sof ghrd_a5ed065bb32ae6sr0.rbf -o hps=1\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/ghrd_a5ed065bb32ae6sr0.core.rbf</code></li> </ul> Set Up Yocto <p>1. Clone the Yocto script and prepare the build:</p> <pre><code>cd $TOP_FOLDER\nrm -rf gsrd-socfpga\ngit clone --branch QPDS24.1_REL_AGILEX5_GSRD_PR --single-branch https://github.com/altera-opensource/gsrd-socfpga\ncd gsrd-socfpga\n. agilex5_devkit-gsrd-build.sh\nbuild_setup\n</code></pre> Customize Yocto <p>1. Save the <code>core.rbf</code> as <code>$WORKSPACE/meta-intel-fpga-refdes/recipes-bsp/ghrd/files/agilex5_devkit_emmc_ghrd.core.rbf</code> </p> <p>2. Update the recipe <code>$WORKSPACE/meta-intel-fpga-refdes/recipes-bsp/ghrd/hw-ref-design.bb</code> as follows:  </p> <ul> <li>Replace the entry <code>${GHRD_REPO}/agilex5_devkit_emmc_${ARM64_GHRD_CORE_RBF};name=agilex5_devkit_emmc_core</code> with <code>file://agilex5_devkit_emmc_ghrd.core.rbf;sha256sum=&lt;CORE_SHA&gt;</code> where <code>CORE_SHA</code> is the sha256 checksum of the file</li> <li>Delete the line <code>SRC_URI[agilex5_devkit_emmc_core.sha256sum] = \"bf11c8cb3b6d9487f93ce0e055b1e5256998a25b25ac4690bef3fcd6225ee1ae\"</code> The above are achieved by the following instructions:</li> </ul> <pre><code>CORE_RBF=$WORKSPACE/meta-intel-fpga-refdes/recipes-bsp/ghrd/files/agilex5_devkit_emmc_ghrd.core.rbf\nln -s $TOP_FOLDER/ghrd_a5ed065bb32ae6sr0.core.rbf $CORE_RBF\nOLD_URI=\"\\${GHRD_REPO}\\/agilex5_devkit_emmc_\\${ARM64_GHRD_CORE_RBF};name=agilex5_devkit_emmc_core\"\nCORE_SHA=$(sha256sum $CORE_RBF | cut -f1 -d\" \")\nNEW_URI=\"file:\\/\\/agilex5_devkit_emmc_ghrd.core.rbf;sha256sum=$CORE_SHA\"\nsed -i \"s/$OLD_URI/$NEW_URI/g\" $WORKSPACE/meta-intel-fpga-refdes/recipes-bsp/ghrd/hw-ref-design.bb\nsed -i \"/agilex5_devkit_emmc_core\\.sha256sum/d\" $WORKSPACE/meta-intel-fpga-refdes/recipes-bsp/ghrd/hw-ref-design.bb\n</code></pre> Build Yocto <p>Build Yocto:</p> <pre><code>bitbake_image\n</code></pre> <p>Gather files:</p> <pre><code>package\n</code></pre> <p>The following files are created:</p> <ul> <li><code>$TOP_FOLDER/gsrd-socfpga/agilex5_devkit-gsrd-images/u-boot-agilex5_devkit-socdk-gsrd-atf/u-boot-spl-dtb.hex</code></li> <li><code>$TOP_FOLDER/gsrd-socfpga/agilex5_devkit-gsrd-images/u-boot.itb</code></li> <li><code>$TOP_FOLDER/gsrd-socfpga/agilex5_devkit-gsrd-images/sdimage.tar.gz</code></li> </ul> Build QSPI Image <pre><code>cd $TOP_FOLDER\nrm -f ghrd_a5ed065bb32ae6sr0.hps.jic ghrd_a5ed065bb32ae6sr0.core.rbf\nquartus_pfg \\\n-c agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof ghrd_a5ed065bb32ae6sr0.jic \\\n-o device=MT25QU128 \\\n-o flash_loader=A5ED065BB32AE6SR0 \\\n-o hps_path=gsrd-socfpga/agilex5_devkit-gsrd-images/u-boot-agilex5_devkit-socdk-gsrd-atf/u-boot-spl-dtb.hex \\\n-o mode=ASX4 \\\n-o hps=1\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/ghrd_a5ed065bb32ae6sr0.hps.jic</code></li> </ul> Build HPS RBF <p>This is an optional step, in which you can build an HPS RBF file, which can be used to configure the HPS through JTAG instead of QSPI though the JIC file.</p> <pre><code>cd $TOP_FOLDER\nrm -f ghrd_a5ed065bb32ae6sr0.hps.rbf\nquartus_pfg \\\n-c agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof  ghrd_a5ed065bb32ae6sr0.rbf \\\n-o hps_path=gsrd-socfpga/agilex5_devkit-gsrd-images/u-boot-agilex5_devkit-socdk-gsrd-atf/u-boot-spl-dtb.hex \\\n-o hps=1\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/ghrd_a5ed065bb32ae6sr0.hps.rbf</code></li> </ul> Building QSPI Helper JIC <p>We are writing the eMMC Flash by using U-Boot commands. We are getting to U-Boot prompt by booting from QSPI using a helper JIC image which contains U-Boot, thereby not relying on what is already in eMMC. The following diagram illustrates how the helper JIC is built, base on the GHRD and Yocto compilation results: </p> <p>1. Create folder to contain the helper JIC artifacts</p> <pre><code>cd $TOP_FOLDER\nrm -rf jic-helper\nmkdir jic-helper\n</code></pre> <p>2. Retrieve the .pfg file instructing the Quartus Programming File Generator on how to create the JIC file, and tweak it a little bit to make it smaller:</p> <pre><code>cd jic-helper\nwget https://releases.rocketboards.org/2024.05/emmc/agilex5_dk_a5e065bb32aes1_emmc/uboot-only.pfg\nsed -i 's/directory=/hps=\"1\" directory=/g' uboot-only.pfg\nsed -i 's/type=\"JIC\"/type=\"PERIPH_JIC\"/g' uboot-only.pfg\nsed -i 's/MT25QU02G/MT25QU01G/g' uboot-only.pfg\n</code></pre> <p>3. Bring in the files that are needed:</p> <pre><code>ln -s $TOP_FOLDER/gsrd-socfpga/agilex5_devkit-gsrd-images/u-boot-agilex5_devkit-socdk-gsrd-atf/u-boot-spl-dtb.hex .\nln -s $TOP_FOLDER/agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof .\n</code></pre> <p>4. Process <code>u-boot.itb</code> file to be exactly 2MB in size, and have a <code>.bin</code> extension as needed by Quartus Programming File Generator:</p> <pre><code>cp $TOP_FOLDER/gsrd-socfpga/agilex5_devkit-gsrd-images/u-boot-agilex5_devkit-socdk-gsrd-atf/u-boot.itb .\nuboot_part_size=2*1024*1024\nuboot_size=`wc -c &lt; u-boot.itb`\nuboot_pad=\"$((uboot_part_size-uboot_size))\"\ntruncate -s +$uboot_pad u-boot.itb\nmv u-boot.itb u-boot.bin\n</code></pre> <p>5. Create the JIC file:</p> <pre><code>quartus_pfg -c uboot-only.pfg\n</code></pre> <p>The following file will be created:</p> <ul> <li><code>$TOP_FOLDER/jic-helper/agilex_flash_image.hps.jic</code></li> </ul>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#hps-test-board_1","title":"HPS Test BOard","text":"<p>This section presents how to build the binaries for HPS Test BOard.</p>"},{"location":"embedded-designs/agilex-5/e-series/premium/gsrd/ug-gsrd-agx5e-premium/#build-sd-card-binaries","title":"Build SD Card Binaries","text":"<p>The following diagram shows how the binaries are built for the HPS Test Daughtercard:  </p> <p></p> Setup Environment <p>1. Create the top folder to store all the build artifacts:</p> <pre><code>sudo rm -rf artifacts.test\nmkdir artifacts.test\ncd artifacts.test\nexport TOP_FOLDER=`pwd`\n</code></pre> <p>2. Download and setup the build toolchain. It will be used only by the GHRD makefile to build the debug HPS FSBL, to build the _hps_debug.sof file:</p> <pre><code>cd $TOP_FOLDER\nwget https://developer.arm.com/-/media/Files/downloads/gnu/11.2-2022.02/binrel\\\n/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz\ntar xf gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz\nrm -f gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz\nexport PATH=`pwd`/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu/bin:$PATH\nexport ARCH=arm64\nexport CROSS_COMPILE=aarch64-none-linux-gnu-\n</code></pre> <p>3. Set up the Quartus tools in the PATH, so they are accessible without full path</p> <pre><code>export QUARTUS_ROOTDIR=~/intelFPGA_pro/24.1/quartus/\nexport PATH=$QUARTUS_ROOTDIR/bin:$QUARTUS_ROOTDIR/linux64:$QUARTUS_ROOTDIR/../qsys/bin:$PATH\n</code></pre> Build Hardware Design <pre><code>cd $TOP_FOLDER\nrm -rf ghrd-socfpga agilex5_soc_devkit_ghrd\ngit clone -b QPDS24.1_REL_AGILEX5_GSRD_PR https://github.com/altera-opensource/ghrd-socfpga\nmv ghrd-socfpga/agilex5_soc_devkit_ghrd .\nrm -rf ghrd-socfpga\ncd agilex5_soc_devkit_ghrd\nmake config\nmake DEVICE=A5ED065BB32AE6SR0 HPS_EMIF_MEM_CLK_FREQ_MHZ=800 HPS_EMIF_REF_CLK_FREQ_MHZ=100 DAUGHTER_CARD=debug2 generate_from_tcl\nmake all\ncd ..\n</code></pre> <p>The following files are created:</p> <ul> <li><code>$TOP_FOLDER/agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof</code></li> <li><code>$TOP_FOLDER/agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0_hps_debug.sof</code></li> </ul> Build Core RBF <pre><code>cd $TOP_FOLDER\nrm -f ghrd_a5ed065bb32ae6sr0.rbf\nquartus_pfg -c agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0_hps_debug.sof ghrd_a5ed065bb32ae6sr0.rbf -o hps=1\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/ghrd_a5ed065bb32ae6sr0.core.rbf</code></li> </ul> Set Up Yocto <p>1. Clone the Yocto script and prepare the build:</p> <pre><code>cd $TOP_FOLDER\nrm -rf gsrd-socfpga\ngit clone --branch QPDS24.1_REL_AGILEX5_GSRD_PR --single-branch https://github.com/altera-opensource/gsrd-socfpga\ncd gsrd-socfpga\n. agilex5_devkit-gsrd-build.sh\nbuild_setup\n</code></pre> Customize Yocto <p>Replace the file <code>$WORKSPACE/meta-intel-fpga-refdes/recipes-bsp/ghrd/files/agilex5_devkit_debug2_ghrd.core.rbf</code> with the rebuilt core.rbf file:</p> <pre><code>CORE_RBF=$WORKSPACE/meta-intel-fpga-refdes/recipes-bsp/ghrd/files/agilex5_devkit_debug2_ghrd.core.rbf\nrm -f $CORE_RBF\nln -s $TOP_FOLDER/ghrd_a5ed065bb32ae6sr0.core.rbf $CORE_RBF\n</code></pre> Build Yocto <p>Build Yocto:</p> <pre><code>bitbake_image\n</code></pre> <p>Gather files:</p> <pre><code>package\n</code></pre> <p>The following files are created:</p> <ul> <li><code>$TOP_FOLDER/gsrd-socfpga/agilex5_devkit-gsrd-images/u-boot-agilex5_devkit-socdk-gsrd-atf/u-boot-spl-dtb.hex</code></li> <li><code>$TOP_FOLDER/gsrd-socfpga/agilex5_devkit-gsrd-images/sdimage.tar.gz</code></li> </ul> Build QSPI Image <pre><code>cd $TOP_FOLDER\nrm -f ghrd_a5ed065bb32ae6sr0.hps.jic ghrd_a5ed065bb32ae6sr0.core.rbf\nquartus_pfg \\\n-c agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof ghrd_a5ed065bb32ae6sr0.jic \\\n-o device=MT25QU128 \\\n-o flash_loader=A5ED065BB32AE6SR0 \\\n-o hps_path=gsrd-socfpga/agilex5_devkit-gsrd-images/u-boot-agilex5_devkit-socdk-gsrd-atf/u-boot-spl-dtb.hex \\\n-o mode=ASX4 \\\n-o hps=1\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/ghrd_a5ed065bb32ae6sr0.hps.jic</code></li> </ul> Build HPS RBF <p>This is an optional step, in which you can build an HPS RBF file, which can be used to configure the HPS through JTAG instead of QSPI though the JIC file.</p> <pre><code>cd $TOP_FOLDER\nrm -f ghrd_a5ed065bb32ae6sr0.hps.rbf\nquartus_pfg \\\n-c agilex5_soc_devkit_ghrd/output_files/ghrd_a5ed065bb32ae6sr0.sof  ghrd_a5ed065bb32ae6sr0.rbf \\\n-o hps_path=gsrd-socfpga/agilex5_devkit-gsrd-images/u-boot-agilex5_devkit-socdk-gsrd-atf/u-boot-spl-dtb.hex \\\n-o hps=1\n</code></pre> <p>The following file is created:</p> <ul> <li><code>$TOP_FOLDER/ghrd_a5ed065bb32ae6sr0.hps.rbf</code></li> </ul>"},{"location":"host-attach-util/fpgaconf/fpgaconf/","title":"fpgaconf","text":""},{"location":"host-attach-util/fpgaconf/fpgaconf/#synopsis","title":"SYNOPSIS","text":"<p><code>fpgaconf [-hvVn] [-S &lt;segment&gt;] [-B &lt;bus&gt;] [-D &lt;device&gt;] [-F &lt;function&gt;] [PCI_ADDR] &lt;gbs&gt;</code></p>"},{"location":"host-attach-util/fpgaconf/fpgaconf/#description","title":"DESCRIPTION","text":"<p><code>fpgaconf</code> configures the FPGA with the accelerator function (AF). It also checks the AF for compatibility with  the targeted FPGA and the FPGA Interface Manager (FIM). <code>fpgaconf</code> takes the following arguments: </p> <p><code>-h, --help</code></p> <pre><code>Prints usage information.\n</code></pre> <p><code>-v, --version</code></p> <pre><code>Prints version information and exits.\n</code></pre> <p><code>-V, --verbose</code></p> <pre><code>Prints more verbose messages while enumerating and configuring. Can be\nrequested more than once.\n</code></pre> <p><code>-n, --dry-run</code></p> <pre><code>Performs enumeration. Skips any operations with side-effects such as the\nactual AF configuration.\n</code></pre> <p><code>-S, --segment</code></p> <pre><code>PCIe segment number of the target FPGA.\n</code></pre> <p><code>-B, --bus</code></p> <pre><code>PCIe bus number of the target FPGA.\n</code></pre> <p><code>-D, --device</code></p> <pre><code>PCIe device number of the target FPGA.\n</code></pre> <p><code>-F, --function</code></p> <pre><code>PCIe function number of the target FPGA.\n</code></pre> <p><code>--force</code></p> <pre><code>Reconfigure the AFU even if it is in use.\n</code></pre> <p><code>fpgaconf</code> enumerates available FPGA devices in the system and selects compatible FPGAs for configuration. If more than one FPGA is compatible with the AF, <code>fpgaconf</code> exits and asks you to be more specific in selecting the target FPGAs by specifying a a PCIe BDF.</p>"},{"location":"host-attach-util/fpgaconf/fpgaconf/#examples","title":"EXAMPLES","text":"<p><code>fpgaconf my_af.gbs</code></p> <pre><code>Program \"my_af.gbs\" to a compatible FPGA.\n</code></pre> <p><code>fpgaconf -V -B 0x3b my_af.gbs</code></p> <pre><code>Program \"my_af.gbs\" to the FPGA in bus 0x3b, if compatible,\nwhile printing out slightly more verbose information.\n</code></pre> <p><code>fpgaconf 0000:3b:00.0 my_af.gbs</code></p> <pre><code>Program \"my_af.gbs\" to the FPGA at address 0000:3b:00.0.\n</code></pre>"},{"location":"host-attach-util/fpgad/fpgad/","title":"fpgad","text":""},{"location":"host-attach-util/fpgad/fpgad/#synopsis","title":"SYNOPSIS","text":"<p><code>fpgad --daemon [--version] [--directory=&lt;dir&gt;] [--logfile=&lt;file&gt;] [--pidfile=&lt;file&gt;] [--umask=&lt;mode&gt;] [--socket=&lt;sock&gt;] [--null-bitstream=&lt;file&gt;]</code> <code>fpgad [--socket=&lt;sock&gt;] [--null-bitstream=&lt;file&gt;]</code></p>"},{"location":"host-attach-util/fpgad/fpgad/#description","title":"DESCRIPTION","text":"<p>fpgad monitors the device sensors, checking for sensor values that are out of the prescribed range. </p> <p>When any of the sensors is detected to be out of bounds, fpgad will focus on keeping the server from rebooting by masking PCIE AER, and send a message to system administrator. System administrator can take further actions like stop the application and stop the FPGA, but fpgad just focus on monitor the sensors and will not take any cooling actions. </p> <p>Note: fpgad must be running (as root) and actively monitoring devices when a sensor anomaly occurs in order to initiate Graceful Shutdown.  If fpgad is not loaded during such a sensor anomaly, the out-of-bounds scenario will not be detected, and the resulting effect on the hardware is undefined.</p>"},{"location":"host-attach-util/fpgad/fpgad/#arguments","title":"ARGUMENTS","text":"<p><code>-v, --version</code></p> <pre><code>Prints version information and exits.\n</code></pre> <p><code>-d, --daemon</code></p> <pre><code>When specified, fpgad executes as a system daemon process.\n</code></pre> <p><code>-D, --directory &lt;dir&gt;</code></p> <pre><code>When running in daemon mode, run from the specified directory.\nIf omitted when daemonizing, `fpgad` uses /tmp.\n</code></pre> <p><code>-l, --logfile &lt;file&gt;</code></p> <pre><code>When running in daemon mode, send output to file. When not in daemon mode, the output goes to stdout.\nIf omitted when daemonizaing, fpgad uses /tmp/fpgad.log.\n</code></pre> <p><code>-p, --pidfile &lt;file&gt;</code></p> <pre><code>When running in daemon mode, write the daemon's process id to a file.\nIf omitted when daemonizing, fpgad uses /tmp/fpgad.pid.\n</code></pre> <p><code>-m, --umask &lt;mode&gt;</code></p> <pre><code>When running in daemon mode, use the mode value as the file mode creation mask passed to umask.\nIf omitted when daemonizing, fpgad uses 0.\n</code></pre> <p><code>-s, --socket &lt;sock&gt;</code></p> <pre><code>Listen for event API registration requests on the UNIX domain socket on the specified path. \nThe default=/tmp/fpga_event_socket.\n</code></pre> <p><code>-n, --null-bitstream &lt;file&gt;</code></p> <pre><code>Specify the NULL bitstream to program when an AP6 event occurs. This option may be specified multiple\ntimes. The AF, if any, that matches the FPGA's PR interface ID is programmed when an AP6\nevent occurs.\n</code></pre>"},{"location":"host-attach-util/fpgad/fpgad/#troubleshooting","title":"TROUBLESHOOTING","text":"<p>If you encounter any issues, you can get debug information in two ways:</p> <ol> <li>By examining the log file when in daemon mode.</li> <li>By running in non-daemon mode and viewing stdout.</li> </ol>"},{"location":"host-attach-util/fpgad/fpgad/#examples","title":"EXAMPLES","text":"<p><code>fpgad --daemon --null-bitstream=my_null_bits.gbs</code></p> <p>This command starts fpgad as a system daemon process: <pre><code>sudo systemctl start fpgad\n</code></pre></p>"},{"location":"host-attach-util/fpgainfo/fpgainfo/","title":"fpgainfo","text":""},{"location":"host-attach-util/fpgainfo/fpgainfo/#synopsis","title":"SYNOPSIS","text":"<pre><code>   fpgainfo [-h] [-S &lt;segment&gt;] [-B &lt;bus&gt;] [-D &lt;device&gt;] [-F &lt;function&gt;] [PCI_ADDR]\n            {errors,power,temp,fme,port,bmc,mac,phy,security}\n</code></pre>"},{"location":"host-attach-util/fpgainfo/fpgainfo/#description","title":"DESCRIPTION","text":"<p>fpgainfo displays FPGA information derived from sysfs files. The command argument is one of the following: <code>errors</code>, <code>power</code>, <code>temp</code>, <code>port</code>, <code>fme</code>, <code>bmc</code>, <code>phy</code> or <code>mac</code>,<code>security</code>,<code>events</code>. Some commands may also have other arguments or options that control their behavior.</p> <p>For systems with multiple FPGA devices, you can specify the BDF to limit the output to the FPGA resource with the corresponding PCIe configuration. If not specified, information displays for all resources for the given command.</p>"},{"location":"host-attach-util/fpgainfo/fpgainfo/#fpgainfo-commands","title":"FPGAINFO COMMANDS","text":"<p><code>errors</code></p> <p>Show/clear errors of an FPGA resource that the first argument specifies. <code>fpgainfo</code> displays information in human readable form.</p> <p><code>power</code></p> <p>Show total the power in watts that the FPGA hardware consumes.</p> <p><code>temp</code></p> <p>Show FPGA temperature values in degrees Celcius.</p> <p><code>port</code></p> <p>Show information about the port such as the AFU ID of currently loaded AFU.</p> <p><code>fme</code></p> <p>Show information about the FPGA platform including the partial reconfiguration (PR) Interface ID, the OPAE version, and the FPGA Interface Manager (FIM) ID.</p> <p><code>bmc</code></p> <p>Show all Board Management Controller sensor values for the FPGA resource, if available.</p> <p><code>phy</code></p> <p>Show information about the PHY integrated in the FPGA, if available.</p> <p><code>mac</code></p> <p>Show information about the MAC address in ROM attached to the FPGA, if available.</p> <p><code>security</code></p> <p>Show information about the security keys, hashs and flash count, if available.</p> <p><code>events</code></p> <p>Show information about events and sensors, if available.</p>"},{"location":"host-attach-util/fpgainfo/fpgainfo/#optional-arguments","title":"OPTIONAL ARGUMENTS","text":"<p><code>--help, -h</code></p> <p>Prints help information and exit.</p> <p><code>--version, -v</code></p> <p>Prints version information and exit.</p>"},{"location":"host-attach-util/fpgainfo/fpgainfo/#common-arguments","title":"COMMON ARGUMENTS","text":"<p>The following arguments are common to all commands and are optional.</p> <p><code>-S, --segment</code></p> <p>PCIe segment number of resource.</p> <p><code>-B, --bus</code></p> <p>PCIe bus number of resource.</p> <p><code>-D, --device</code></p> <p>PCIe device number of resource.</p> <p><code>-F, --function</code></p> <p>PCIe function number of resource.</p>"},{"location":"host-attach-util/fpgainfo/fpgainfo/#errors-arguments","title":"ERRORS ARGUMENTS","text":"<p>The first argument to the <code>errors</code> command specifies the resource type. It must be one of the following:    <code>fme</code>,<code>port</code>,<code>all</code></p> <p><code>fme</code></p> <p>Show/clear FME errors. </p> <p><code>port</code></p> <p>Show/clear PORT errors.</p> <p><code>all</code></p> <p>Show/clear errors for all resources.</p> <p>The optional <code>&lt;command-args&gt;</code> arguments are:</p> <p><code>--clear, -c</code></p> <p>Clear errors for the given FPGA resource.</p>"},{"location":"host-attach-util/fpgainfo/fpgainfo/#phy-arguments","title":"PHY ARGUMENTS","text":"<p>The optional <code>&lt;command-args&gt;</code> argument is:</p> <p><code>--group, -G</code></p> <p>Select which PHY group(s) information to show.</p>"},{"location":"host-attach-util/fpgainfo/fpgainfo/#events-arguments","title":"EVENTS ARGUMENTS","text":"<p>The optional <code>&lt;command-args&gt;</code> argument is:</p> <p><code>--list,-l</code></p> <p>List boots (implies --all).</p> <p><code>--boot,-b</code></p> <p>Boot index to use, i.e: \u00a0\u00a0\u00a0\u00a00 for current boot (default). \u00a0\u00a0\u00a0\u00a01 for previous boot, etc.</p> <p><code>--count,-c</code></p> <p>Number of events to print.</p> <p><code>--all,-a</code></p> <p>Print all events.</p> <p><code>--sensors,-s</code></p> <p>Print sensor data too.</p> <p><code>--bits,-i</code></p> <p>Print bit values too.</p> <p><code>--help,-h</code></p> <p>Print this help.</p>"},{"location":"host-attach-util/fpgainfo/fpgainfo/#examples","title":"EXAMPLES","text":"<p>This command shows the current power telemetry: <pre><code>./fpgainfo power\n</code></pre></p> <p>This command shows the current temperature readings: <pre><code>./fpgainfo temp\n</code></pre></p> <p>This command shows FME resource errors: <pre><code>./fpgainfo errors fme\n</code></pre> This command clears all errors on all resources: <pre><code>./fpgainfo errors all -c\n</code></pre> This command shows information of the FME on bus 0x5e <pre><code>./fpgainfo fme -B 0x5e\n</code></pre> This command shows information of the FPGA security on bus 0x5e <pre><code>./fpgainfo security -B 0x5e\n</code></pre> This command shows all events and sensors information including sensor bits: <pre><code>./fpgainfo events -asi\n</code></pre></p>"},{"location":"host-attach-util/fpgaport/fpgaport/","title":"fpgaport","text":""},{"location":"host-attach-util/fpgaport/fpgaport/#synopsis","title":"SYNOPSIS","text":"<pre><code>fpgaport [-h] [-N NUMVFS] [-X] [--debug] {assign,release} device [port]\n</code></pre>"},{"location":"host-attach-util/fpgaport/fpgaport/#description","title":"DESCRIPTION","text":"<p>The <code>fpgaport</code> enables and disables virtualization. It assigns and releases control of the port to the virtual function (VF). By default, the driver assigns the port to the physical function (PF) in the non-virtualization use case.</p>"},{"location":"host-attach-util/fpgaport/fpgaport/#positional-arguments","title":"POSITIONAL ARGUMENTS","text":"<p><code>{assign, release}</code></p> <pre><code>Action to perform.\n</code></pre> <p><code>device</code></p> <pre><code>The FPGA device being targeted with this action.\n</code></pre> <p><code>port</code></p> <pre><code>The number of the port.\n</code></pre>"},{"location":"host-attach-util/fpgaport/fpgaport/#optional-arguments","title":"OPTIONAL ARGUMENTS","text":"<p><code>-N NUMVFS, --numvfs NUMVFS</code></p> <pre><code>Create NUMVFS virtual functions. The typical value is 1.\n</code></pre> <p><code>-X, --destroy-vfs</code></p> <pre><code>Destroy all virtual functions prior to assigning.\n</code></pre> <p><code>--debug</code></p> <pre><code>Display additional log information.\n</code></pre> <p><code>-h, --help</code></p> <pre><code>Print usage information.\n</code></pre>"},{"location":"host-attach-util/fpgaport/fpgaport/#example","title":"EXAMPLE","text":"<p><code>fpgaport release /dev/dfl-fme.0 0</code></p> <pre><code>Release port 0 from physical function control.\n</code></pre> <p><code>fpgaport assign /dev/dfl-fme.0 0</code></p> <pre><code>Assign port 0 to physical function control.\n</code></pre>"},{"location":"host-attach-util/fpgasupdate/fpgasupdate/","title":"fpgasupdate","text":""},{"location":"host-attach-util/fpgasupdate/fpgasupdate/#synopsis","title":"SYNOPSIS","text":"<p><code>fpgasupdate [--log-level=&lt;level&gt;] file [bdf]</code></p>"},{"location":"host-attach-util/fpgasupdate/fpgasupdate/#description","title":"DESCRIPTION","text":"<p>The <code>fpgasupdate</code> command implements a secure firmware update for the following programmable accelerator cards (PACs): * Intel\u00ae PAC with Intel Arria\u00ae 10 GX FPGA * Intel\u00ae FPGA PAC D5005 * Intel\u00ae PAC N3000 * Intel\u00ae FPGA SmartNIC N6001-PL with Intel&amp;reg Agilex&amp;reg FPGA * Intel\u00ae FPGA IPU F2000X-PL</p> <p><code>--log-level &lt;level&gt;</code></p> <pre><code>Specifies the `log-level` which is the level of information output to your command tool.\nThe following seven levels  are available: `state`, `ioctl`, `debug`, `info`, `warning`,\n`error`, `critical`. Setting `--log-level=state` provides the most verbose output.\nSetting `--log-level=ioctl` provides the second most information, and so on. The default\nlevel is `info`.\n</code></pre> <p><code>file</code></p> <pre><code>Specifies the secure update firmware file to be programmed. This file may be to program a\nstatic region (SR), programmable region (PR), root entry hash, key cancellation, or other\ndevice-specific firmware.\n</code></pre> <p><code>bdf</code></p> <pre><code>The PCIe&amp;reg; address of the PAC to program. `bdf` is of the form `[ssss:]bb:dd:f`,\ncorresponding to PCIe segment, bus, device, function. The segment is optional. If\nyou do not specify a segment, the segment defaults to `0000`. If the system has only\none PAC you can omit the `bdf` and let `fpgasupdate`  determine the address\nautomatically.\n</code></pre>"},{"location":"host-attach-util/fpgasupdate/fpgasupdate/#troubleshooting","title":"TROUBLESHOOTING","text":"<p>To gather more debug output, decrease the <code>--log-level</code> parameter. </p>"},{"location":"host-attach-util/fpgasupdate/fpgasupdate/#examples","title":"EXAMPLES","text":"<p><code>fpgasupdate firmware.bin</code> <code>fpgasupdate firmware.bin 05:00.0</code> <code>fpgasupdate firmware.bin 0001:04:02.0 --log-level=ioctl</code></p>"},{"location":"host-attach-util/host_exerciser/host_exerciser/","title":"host_exerciser","text":""},{"location":"host-attach-util/host_exerciser/host_exerciser/#synopsis","title":"SYNOPSIS","text":"<pre><code>Usage: host_exerciser [OPTIONS] SUBCOMMAND\nOptions:\n  -h,--help                   Print this help message and exit\n  -p,--pci-address TEXT       [&lt;domain&gt;:]&lt;bus&gt;:&lt;device&gt;.&lt;function&gt;\n  -l,--log-level TEXT:{trace,debug,info,warning,error,critical,off}=warning\n                              stdout logging level\n  -s,--shared                 open in shared mode, default is off\n  -t,--timeout UINT=60000     test timeout (msec)\n  -m,--mode UINT:value in {lpbk-&gt;0,read-&gt;1,trput-&gt;3,write-&gt;2} OR {0,1,3,2}=lpbk\n                              host exerciser mode {lpbk,read, write, trput}\n  --cls UINT:value in {cl_1-&gt;0,cl_2-&gt;1,cl_4-&gt;2,cl_8-&gt;3} OR {0,1,2,3}=cl_1\n                              number of CLs per request{cl_1, cl_2, cl_4, cl_8}\n  --continuousmode BOOLEAN=false\n                              test rollover or test termination\n  --atomic UINT:value in {cas_4-&gt;9,cas_8-&gt;11,fadd_4-&gt;1,fadd_8-&gt;3,off-&gt;0,swap_4-&gt;5,swap_8-&gt;7} OR {9,11,1,3,0,5,7}=off\n                              atomic requests (only permitted in combination with lpbk/cl_1)\n  --encoding UINT:value in {default-&gt;0,dm-&gt;1,pu-&gt;2,random-&gt;3} OR {0,1,2,3}=default\n                              data mover or power user encoding -- random interleaves both in the same stream\n  -d,--delay BOOLEAN=false    Enables random delay insertion between requests\n  --interleave UINT=0         Interleave requests pattern to use in throughput mode {0, 1, 2}\n                              indicating one of the following series of read/write requests:\n                              0: rd-wr-rd-wr\n                              1: rd-rd-wr-wr\n                              2: rd-rd-rd-rd-wr-wr-wr-wr\n  --interrupt UINT:INT in [0 - 3]\n                              The Interrupt Vector Number for the device\n  --contmodetime UINT=1       Continuous mode time in seconds\n  --testall BOOLEAN=false     Run all tests\n  --clock-mhz UINT=0          Clock frequency (MHz) -- when zero, read the frequency from the AFU\nSubcommands:\n  lpbk                        run simple loopback test\n  mem                         run simple mem test\n</code></pre>"},{"location":"host-attach-util/host_exerciser/host_exerciser/#description","title":"DESCRIPTION","text":"<p>A host exerciser is used to exercise and characterize the various host-FPGA interactions eg. MMIO, Data transfer from host to FPGA , PR, host to FPGA memory etc.</p>"},{"location":"host-attach-util/host_exerciser/host_exerciser/#host-exerciser-loopback-he-lb","title":"Host Exerciser Loopback (HE-LB)","text":"<p>The HE-LB module is responsible for generating traffic with the intention of exercising the path from the AFU to the Host at full bandwidth.  Host Exerciser Loopback (HE-LB) AFU can move data between host memory and FPGA.</p> <p>HE-LB IP supports: 1. Latency (AFU to Host memory read) 2. MMIO latency (Write+Read) 3. MMIO BW (64B MMIO writes) 4. BW (Read/Write, Read only, Wr only)</p>"},{"location":"host-attach-util/host_exerciser/host_exerciser/#host-exerciser-memory-he-mem","title":"Host Exerciser Memory (HE-MEM)","text":"<p>The HE-MEM module is used to exercise use of FPGA connected DDR; data read from the host is  written to DDR, and the same data is read from DDR before sending it back to the  host. HE-MEM uses external DDR memory (i.e. EMIF) to store data. It has a customized version of the AVMM interface to communicate with the EMIF memory controller.</p> <p>Execution of these exercisors requires the user to bind specific VF endpoint to vfio-pci Bind the correct endpoint for a device with B/D/F 0000:b1:00.0</p> <p><code>[user@localhost]: sudo opae.io init -d 0000:b1:00.2 user:user</code></p>"},{"location":"host-attach-util/host_exerciser/host_exerciser/#host-exerciser-sub-commands","title":"HOST EXERCISER SUB COMMANDS","text":"<p><code>lpbk</code></p> <p>run host exerciser loopback test</p> <p><code>mem</code></p> <p>run host exerciser memory test</p>"},{"location":"host-attach-util/host_exerciser/host_exerciser/#optional-arguments","title":"OPTIONAL ARGUMENTS","text":"<p><code>--help, -h</code></p> <p>Prints help information and exit.</p>"},{"location":"host-attach-util/host_exerciser/host_exerciser/#common-arguments-options","title":"COMMON ARGUMENTS / OPTIONS","text":"<p>The following arguments are common to all commands and are optional.</p> <p><code>-p,--pci-address</code></p> <p>PCIe domain, bus, device, function number of fpga resource.</p> <p><code>-l,--log-level</code></p> <p>set host exerciser tool log level, trace, debug, info, warning, error, critical, off</p> <p><code>-s,--shared</code></p> <p>open FPGA PCIe resource in shared mode</p> <p><code>-t,--timeout</code></p> <p>host exerciser tool time out, by default time out 60000</p> <p><code>-m,--mode</code></p> <p>host exerciser test modes are lpbk, read, write, trput</p> <p><code>--cls</code></p> <p>Number of cachelines per request 1, 2, 3, 4.</p> <p><code>--continuousmode</code></p> <p>Configures test rollover or test termination mode.</p> <p><code>--atomic</code></p> <p>atomic requests.</p> <p><code>--encoding</code></p> <p>select data mover mode or power user mode or random.</p> <p><code>-d,--delay</code></p> <p>Enables random delay insertion between requests.</p> <p><code>--interleave</code></p> <p>Enables interleave requests in throughput mode. Value:3'b000-Rd,Wr,Rd,Wr Value:3'b001-Rd,Rd,Wr,Wr Value:3'b010-Rd,Rd,Rd,Rd,Wr,Wr,Wr,Wr Value:3'b011-Not supported</p> <p><code>--interrupt</code></p> <p>Accelerator interrupt vector Number.</p> <p><code>--contmodetime</code></p> <p>Continuous mode time in seconds.</p> <p><code>--testall</code></p> <p>Run all host exerciser tests.</p> <p><code>--clock-mhz</code></p> <p>pcie clock frequency, default value 350Mhz.</p>"},{"location":"host-attach-util/host_exerciser/host_exerciser/#examples","title":"EXAMPLES","text":"<p>This command exerciser Loopback afu: <pre><code>host_exerciser lpbk\n</code></pre></p> <p>This command exerciser memory afu: <pre><code>host_exerciser mem\n</code></pre></p> <p>This command exerciser Loopback afu on pcie 000:3b:00.0: <pre><code>host_exerciser --pci-address 000:3b:00.0    lpbk\n</code></pre></p> <p>This command exerciser Loopback afu on pcie 000:3b:00.0 and run in write mode: <pre><code>host_exerciser --pci-address 000:3b:00.0   --mode write lpbl\n</code></pre></p> <p>This command exerciser Loopback afu on pcie 000:3b:00.0 and run 2 cache lines per request: <pre><code>host_exerciser --pci-address 000:3b:00.0   --cls cl_2  lpbk\n</code></pre></p> <p>This command exerciser Loopback afu on pcie 000:3b:00.0 and run continuous mode for 10 seconds: <pre><code>host_exerciser --pci-address 000:3b:00.0   -cls cl_1   -m 0 --continuousmode true --contmodetime 10 lpbk\n</code></pre></p>"},{"location":"host-attach-util/hssi/hssi/","title":"hssi","text":""},{"location":"host-attach-util/hssi/hssi/#synopsis","title":"SYNOPSIS","text":"<p><code>hssi COMMON_OPTIONS MODE MODE_OPTIONS</code></p>"},{"location":"host-attach-util/hssi/hssi/#description","title":"DESCRIPTION","text":"<p>The <code>hssi</code> application provides a means of interacting with the 10G, 100G, and 200G/400F HE-HSSI AFUs. In all operating modes, the application initializes the AFU and completes the desired transfer as described by the mode- specific options.</p> <p>COMMON_OPTIONS - application options common to the 10G, 100g, and 200G/400G modes.</p> <p><code>-h, --help</code></p> <pre><code>Display common command-line help and exit.\n</code></pre> <p><code>-p, --pci-address ADDR</code></p> <pre><code>The PCIe address of the desired accelerator in ssss:bb:dd.f format.\n</code></pre> <p><code>-s, --shared on|off</code></p> <pre><code>Whether to open the accelerator in shared mode. The default is off.\n</code></pre> <p><code>-t, --timeout VALUE</code></p> <pre><code>The application timeout value in milliseconds. The default timeout is 60000 msec.\n</code></pre> <p>MODE - select AFU. Valid values are hssi_10g, hssi_100g, hssi_200g_400g.</p> <p>MODE_OPTIONS [hssi_10g] - application options specific to the 10G AFU.</p> <p><code>-h, --help</code></p> <pre><code>Display 10G AFU specific command-line help and exit.\n</code></pre> <p><code>--port PORT</code></p> <pre><code>Select the QSFP port in the range 0-7. The default is port 0.\n</code></pre> <p><code>--eth-loopback on|off</code></p> <pre><code>Whether to enable loopback on the ethernet interface. Valid values are\non and off. The default is on.\n</code></pre> <p><code>--num-packets PACKETS</code></p> <pre><code>The number of packets to transfer. The default is 1 packet.\n</code></pre> <p><code>--random-length fixed|random</code></p> <pre><code>Specify packet length randomization. Valid values are fixed and\nrandom. The default is fixed (no randomization).\n</code></pre> <p><code>--random-payload incremental|random</code></p> <pre><code>Specify payload randomization. Valid values are incremental and\nrandom. The default is incremental.\n</code></pre> <p><code>--packet-length LENGTH</code></p> <pre><code>Specify packet length. The default is 64 bytes.\n</code></pre> <p><code>--src-addr ADDR</code></p> <pre><code>Specify the source MAC address. The default value is 11:22:33:44:55:66.\n</code></pre> <p><code>--dest-addr ADDR</code></p> <pre><code>Specify the destination MAC address. The default value is 77:88:99:aa:bb:cc.\n</code></pre> <p><code>--rnd-seed0 SEED0</code></p> <pre><code>Specify the prbs generator bits [31:0]. The default is 1592590336.\n</code></pre> <p><code>--rnd-seed1 SEED1</code></p> <pre><code>Specify the prbs generator bits [47:32]. The default is 1592590337.\n</code></pre> <p><code>--rnd-seed2 SEED2</code></p> <pre><code>Specify the prbs generator bits [91:64]. The default is 155373.\n</code></pre> <p>MODE_OPTIONS [hssi_100g] - application options specific to the 100G AFU.</p> <p><code>--port PORT</code></p> <pre><code>Select the QSFP port in the range 0-7. The default is port 0.\n</code></pre> <p><code>--eth-loopback on|off</code></p> <pre><code>Whether to enable loopback on the ethernet interface. Valid values are\non and off. The default is on.\n</code></pre> <p><code>--num-packets PACKETS</code></p> <pre><code>The number of packets to transfer. The default is 1 packet.\n</code></pre> <p><code>--gap random|none</code></p> <pre><code>Inter-packet gap. Valid values are random and none. The default is none.\n</code></pre> <p><code>--pattern random|fixed|increment</code></p> <pre><code>Pattern mode. Valid values are random, fixed, or increment. The default\nis random.\n</code></pre> <p><code>--src-addr ADDR</code></p> <pre><code>Specify the source MAC address. The default value is 11:22:33:44:55:66.\n</code></pre> <p><code>--dest-addr ADDR</code></p> <pre><code>Specify the destination MAC address. The default value is 77:88:99:aa:bb:cc.\n</code></pre> <p><code>--start-size SIZE</code></p> <pre><code>Specify the packet size in bytes, or the first packet size for --pattern increment.\n</code></pre> <p><code>--end-size SIZE</code></p> <pre><code>Specify the end packet size in bytes.\n</code></pre> <p><code>--end-select pkt_num|gen_idle</code></p> <pre><code>Specify packet generation end mode.\n</code></pre> <p>MODE_OPTIONS [pkt_filt_10g] - application options specific to the Packet Filter 10G AFU.</p> <p><code>--dfl-dev DFL_DEV</code></p> <pre><code>Packet Filter DFL device, eg --dfl-dev dfl_dev.0\n</code></pre> <p>MODE_OPTIONS [pkt_filt_100g] - application options specific to the Packet Filter 100G AFU.</p> <p><code>--dfl-dev DFL_DEV</code></p> <pre><code>Packet Filter DFL device, eg --dfl-dev dfl_dev.1\n</code></pre> <p>MODE_OPTIONS [hssi_200g_400g] - application options specific to the 200G/400G AFU.</p> <p><code>--num-packets PACKETS</code></p> <pre><code>The number of packets to transfer. Must be a multiple of 32. Default value is 32. Increasing the timeout (--timeout) may be necessary if specifying a large number of packets.\n</code></pre>"},{"location":"host-attach-util/hssi/hssi/#examples","title":"EXAMPLES","text":"<p><code>hssi -h</code> <code>hssi hssi_10g -h</code> <code>sudo hssi --pci-address=0000:3b:00.0 hssi_10g --eth-loopback=on --num-packets=500</code> <code>sudo hssi --pci-address=0000:3b:00.0 hssi_100g --pattern=increment</code> <code>sudo hssi --pci-address=0000:0d:00.6 hssi_200g_400g --num-packets=640000</code></p>"},{"location":"host-attach-util/hssi_ethernet/hssiloopback/","title":"HSSI ethernet loopback","text":""},{"location":"host-attach-util/hssi_ethernet/hssiloopback/#synopsis","title":"SYNOPSIS","text":"<pre><code>hssiloopback [-h] [--pcie-address PCIE_ADDRESS, -P PCIE_ADDRESS] --loopback [{enable,disable}]\n</code></pre>"},{"location":"host-attach-util/hssi_ethernet/hssiloopback/#description","title":"DESCRIPTION","text":"<p>The <code>hssiloopback</code>  tool enables and disable ethernet loopback.</p>"},{"location":"host-attach-util/hssi_ethernet/hssiloopback/#optional-arguments","title":"OPTIONAL ARGUMENTS","text":"<p><code>-h, --help</code></p> <p>Prints usage information</p> <p><code>--pcie-address PCIE_ADDRESS, -P PCIE_ADDRESS</code></p> <p>The PCIe address of the desired fpga  in ssss:bb:dd.f format. sbdf of device to program (e.g. 04:00.0 or 0000:04:00.0). Optional when one device in system.</p> <p><code>--loopback [{enable,disable}]</code></p> <p>Ethernet enable or disable loopback.</p>"},{"location":"host-attach-util/hssi_ethernet/hssiloopback/#examples","title":"EXAMPLES","text":"<p><code>hssiloopback --pcie-address  0000:04:00.0 --loopback enable</code></p> <p>Enables ethernet loopback</p> <p><code>hssiloopback --pcie-address  0000:04:00.0 --loopback disable</code></p> <p>Disable ethernet loopback</p>"},{"location":"host-attach-util/hssi_ethernet/hssimac/","title":"HSSI ethernet mac","text":""},{"location":"host-attach-util/hssi_ethernet/hssimac/#synopsis","title":"SYNOPSIS","text":"<pre><code>hssimac [-h] --pcie-address PCIE_ADDRESS [--port PORT]\n</code></pre>"},{"location":"host-attach-util/hssi_ethernet/hssimac/#description","title":"DESCRIPTION","text":"<p>The <code>hssimac</code>  tool provides Maximum TX and RX frame size.</p>"},{"location":"host-attach-util/hssi_ethernet/hssimac/#optional-arguments","title":"OPTIONAL ARGUMENTS","text":"<p><code>-h, --help</code></p> <p>Prints usage information</p> <p><code>--pcie-address PCIE_ADDRESS, -P PCIE_ADDRESS</code></p> <p>The PCIe address of the desired fpga  in ssss:bb:dd.f format. sbdf of device to program (e.g. 04:00.0 or 0000:04:00.0).</p> <p><code>--port PORT</code></p> <p>hssi port number.</p>"},{"location":"host-attach-util/hssi_ethernet/hssimac/#examples","title":"EXAMPLES","text":"<p><code>hssimac --pcie-address  0000:04:00.0 --port 1</code></p> <p>prints Maximum TX and RX frame size for port 1.</p>"},{"location":"host-attach-util/hssi_ethernet/hssistats/","title":"HSSI ethernet statistics","text":""},{"location":"host-attach-util/hssi_ethernet/hssistats/#synopsis","title":"SYNOPSIS","text":"<pre><code>hssistats [-h] [--pcie-address PCIE_ADDRESS, -P PCIE_ADDRESS]\n</code></pre>"},{"location":"host-attach-util/hssi_ethernet/hssistats/#description","title":"DESCRIPTION","text":"<p>The <code>hssistats</code>  tool provides the MAC statistics.</p>"},{"location":"host-attach-util/hssi_ethernet/hssistats/#optional-arguments","title":"OPTIONAL ARGUMENTS","text":"<p><code>-h, --help</code></p> <p>Prints usage information</p> <p><code>--pcie-address PCIE_ADDRESS, -P PCIE_ADDRESS</code></p> <p>The PCIe address of the desired fpga in ssss:bb:dd.f format. sbdf of device to program (e.g. 04:00.0 or 0000:04:00.0). Optional when one device in system.</p>"},{"location":"host-attach-util/hssi_ethernet/hssistats/#examples","title":"EXAMPLES","text":"<p><code>hssistats --pcie-address  0000:04:00.0</code></p> <p>prints the MAC statistics </p>"},{"location":"host-attach-util/hssi_loopback/hssi_loopback/","title":"hssi_loopback","text":""},{"location":"host-attach-util/hssi_loopback/hssi_loopback/#name","title":"NAME","text":"<p>hssi_loopback - Software utility to run HSSI loopback tests on FPGA</p>"},{"location":"host-attach-util/hssi_loopback/hssi_loopback/#synopsis","title":"SYNOPSIS","text":"<p><code>hssi_loopback [[--bus|-b &lt;bus number&gt;] [--device | -d &lt;device number&gt;] [--function | -f &lt;function number&gt;]]|[--socket-id &lt;socket-id&gt;]       [--mode|-m auto|e40|e10]        [send [&lt;source port&gt; [&lt;destination port&gt;] [--packet-count|-c &lt;count&gt;] [--packet-delay|-d &lt;delay&gt;] [--packet-length|-l &lt;length&gt;]] |status [clear] | stop | readmacs</code></p>"},{"location":"host-attach-util/hssi_loopback/hssi_loopback/#description","title":"DESCRIPTION","text":"<p>The <code>hssi_loopback</code> utility works in conjunction with a packet generator accelerator function unit (AFU) to test high-speed serial interface (HSSI) cards. The <code>hssi_loopback</code> utility tests both external and internal loopbacks. <code>hssi_loopback</code> runs an external loopback test when the command line arguments include both source and destination ports. <code>hssi_loopback</code> runs an internal loopback test when command line arguments include a single port. <code>hssi_loopback</code> only runs on the Intel Xeon with Arria 10 FPGA. You cannot run it on the Intel PAC (programmable accelerator card).</p> <p>NOTE: The following limitations apply to the current version of hssi_loopback:</p> <ul> <li>For the external loopback the two port arguments can be the same. For the e10 design, the ports should be the same.</li> <li>The <code>hssi_loopback</code> test supports only the e40 and e10 E2E AFUs.  The e10 E2E AFU tests HSSI with a retimer card.</li> <li>The <code>hssi_loopback</code> test uses the control and status registers (CSRs) defined in the AFU.</li> </ul>"},{"location":"host-attach-util/hssi_loopback/hssi_loopback/#options","title":"OPTIONS","text":"<p><code>-S SOCKET_ID, --socket-id SOCKET_ID</code></p> <p>Socket ID FPGA resource.</p> <p><code>-B BUS, --bus BUS</code></p> <p>Bus ID of FPGA resource.</p> <p><code>-D DEVICE, --device DEVICE</code></p> <p>Device ID of FPGA resource.</p> <p><code>-F FUNCTION, --function FUNCTION</code></p> <p>Function ID of FPGA resource.</p> <p><code>-G, --guid</code></p> <p>Specifies guid for the resource enumeration.</p> <p><code>-m, --mode</code></p> <p>One of the following: [<code>auto</code>, <code>e40</code>, <code>e10</code>] <code>auto</code> is the default and indicates that the software runs the mode based on the first accelerator functional unit it identifies.</p> <p><code>-t, --timeout</code></p> <p>Timeout (in seconds) before the application terminates in continuous mode. Continuous mode is the default when you do not specify the number of packets.</p> <p><code>-y, --delay</code></p> <p>Delay (in seconds) between printing out a simple status line. Default is 0.100 seconds (100 milliseconds).</p> <p><code>-c, --packet-count</code></p> <p>The number of packets to send.</p> <p><code>-d, --packet-delay</code></p> <p>The delay in between packets. This delay is the number of 100 MHz clock cycles, roughly 10 nanoseconds.</p> <p><code>-s, --packet-size</code></p> <p>The packet size to send. The minimum is 46 bytes and the maximum is 1500 bytes. The default is 46 bytes.</p>"},{"location":"host-attach-util/hssi_loopback/hssi_loopback/#commands","title":"COMMANDS","text":"<p><code>send &lt;source port&gt; [&lt;destination port&gt;] [--packet-count|-c &lt;count&gt;] [--packet-delay|-d &lt;delay&gt;] [--packet-length|-l &lt;length&gt;]</code></p> <p>Send packets from one port to the other. If the command line does not specify a destination port, the test runs an internal  loopback. Otherwise, the test runs an external loopback from the source port to the destination port.</p> <p><code>status [clear]</code></p> <p>Read and interpret the status registers and print to the screen. <code>clear</code> clears the status registers.</p> <p><code>stop</code></p> <p>Issue a stop command to all Ethernet controllers in the AFU.</p> <p><code>readmacs</code></p> <p>Read and display the port MAC addresses. An EEPROM stores the MAC addresses.</p>"},{"location":"host-attach-util/hssi_loopback/hssi_loopback/#exit-codes","title":"EXIT CODES","text":"<p>0    Success - Number of packets received are equal to the number of packets sent and no errors           are reported.</p> <p>-1    Loopback failure - Either number of packets does not match or the test detected errors.</p> <p>-2    Errors parsing arguments.</p>"},{"location":"host-attach-util/hssi_loopback/hssi_loopback/#examples","title":"EXAMPLES","text":"<p>Read the MAC addresses of the AFU loaded on bus 0x5e:</p> <pre><code>&gt;sudo hssi_loopback readmacs -B 0x5e\n</code></pre> <p>Run an external loopback, sending 100 packets from port 0 to port 1. The AFU is on bus 0x5e:</p> <pre><code>&gt;sudo hssi_loopback -B 0x5e send 0 1 -c 100\n</code></pre> <p>Run an internal loopback until a timeout of 5 seconds is reached. The AFU is on bus 0x5e:</p> <pre><code>&gt;sudo hssi_loopback -B 0x5e send 0 -t 5\n</code></pre>"},{"location":"host-attach-util/mem_tg/mem_tg/","title":"mem_tg","text":""},{"location":"host-attach-util/mem_tg/mem_tg/#synopsis","title":"SYNOPSIS","text":"<pre><code>Usage: mem_tg [OPTIONS] SUBCOMMAND\nOptions:\n  -h,--help                   Print this help message and exit\n  -g,--guid TEXT=4DADEA34-2C78-48CB-A3DC-5B831F5CECBB\n                              GUID\n  -p,--pci-address TEXT       [&lt;domain&gt;:]&lt;bus&gt;:&lt;device&gt;.&lt;function&gt;\n  -l,--log-level TEXT:{trace,debug,info,warning,error,critical,off}=info\n                              stdout logging level\n  -s,--shared                 open in shared mode, default is off\n  -t,--timeout UINT=60000     test timeout (msec)\n  -m,--mem-channel UINT=0     Target memory bank for test to run on (0 indexed)\n  --loops UINT=1              Number of read/write loops to be run\n  -w,--writes UINT=1          Number of unique write transactions per loop\n  -r,--reads UINT=1           Number of unique read transactions per loop\n  -b,--bls UINT=1             Burst length of each request\n  --stride UINT=1             Address stride for each sequential transaction\n  --data UINT:value in {fixed-&gt;0,prbs15-&gt;2,prbs31-&gt;3,prbs7-&gt;1,rot1-&gt;3} OR {0,2,3,1,3}=fixed\n                              Memory traffic data pattern: fixed, prbs7, prbs15, prbs31, rot1\n  -f,--mem-frequency UINT=0   Memory traffic clock frequency in MHz\nSubcommands:\n  tg_test                     configure &amp; run mem traffic generator test\n</code></pre>"},{"location":"host-attach-util/mem_tg/mem_tg/#description","title":"DESCRIPTION","text":"<p>The memory traffic generator (TG) used to exercise and test available memory channels with a configurable traffic pattern.</p> <p>Execution of this application requires the user to bind the specific VF endpoint containing the mem_tg AFU id to vfio-pci</p> <p>In the TG, read responses are checked against a specified pattern. If the application is configured to perform a read only test on a region of memory that has not previously been initialized to contain that pattern it will flag a test failure.</p>"},{"location":"host-attach-util/mem_tg/mem_tg/#optional-arguments","title":"OPTIONAL ARGUMENTS","text":"<p><code>--help, -h</code></p> <p>Prints help information and exit.</p>"},{"location":"host-attach-util/mem_tg/mem_tg/#common-arguments-options","title":"COMMON ARGUMENTS / OPTIONS","text":"<p>The following arguments are common to all commands and are optional.</p> <p><code>-p,--pci-address</code></p> <p>PCIe domain, bus, device, function number of fpga resource.</p> <p><code>-l,--log-level</code></p> <p>set application log level, trace, debug, info, warning, error, critical, off</p> <p><code>-s,--shared</code></p> <p>open FPGA PCIe resource in shared mode</p> <p><code>-t,--timeout</code></p> <p>mem_tg application time out, by default time out 60000</p> <p><code>-m,--mem-channel</code></p> <p>Target memory bank for test to run on (0 indexed)  default: 0</p> <p><code>--loops</code></p> <p>Number of read/write loops to be run  default: 1</p> <p><code>-w,--writes</code></p> <p>Number of unique write transactions per loop.  default: 1</p> <p><code>-r,--reads</code></p> <p>Number of unique read transactions per loop  default: 1</p> <p><code>-b,--bls</code></p> <p>AXI4 burst length of each request.  Supports 1-256 transfers beginning from 0. default: 0</p> <p><code>--stride</code></p> <p>Address stride for each sequential transaction (&gt;= burst length)  default: 1</p> <p><code>--data</code></p> <p>Memory traffic data pattern. 0 = fixed {0xFF, 0x00} 1 = prbs7 2 = prbs15 3 = prbs31 4 = rot1</p> <p>default: fixed</p> <p><code>-f, --mem-frequency</code></p> <p>Memory traffic clock frequency in MHz  default: 300 MHz</p>"},{"location":"host-attach-util/mem_tg/mem_tg/#examples","title":"EXAMPLES","text":"<p>This command will run a basic read/write test on the channel 0 traffic generator: <pre><code>mem_tg tg_test\n</code></pre></p> <p>This command will run the application for an afu on pcie 000:b1:00.7: <pre><code>mem_tg --pci-address 000:b1:00.7 tg_test\n</code></pre></p> <p>This command will test channel 2 write bandwidth: <pre><code>mem_tg -loops 1000 -w 1000 -r 0 -m 2 tg_test\n</code></pre></p> <p>This command will perform a read bandwidth test with a burst of 16 on channel 1 and perform a data comparison with the prbs7 pattern: <pre><code>mem_tg -loops 1000 -w 0 -r 1000 -b 0xF --data prbs7 -m 1 tg_test\n</code></pre></p> <p>This command will perform a read/write test with 1 MB strided access to channel 0 memory: <pre><code>mem_tg -loops 10000 --stride 0x100000 tg_test\n</code></pre></p>"},{"location":"host-attach-util/mmlink/mmlink/","title":"mmlink","text":""},{"location":"host-attach-util/mmlink/mmlink/#synopsis","title":"Synopsis","text":"<p><code>mmlink [-v] [-B &lt;bus&gt;] [-D &lt;device&gt;] [-F &lt;function&gt;] [-S &lt;socket&gt;] [-P &lt;TCP port&gt;] [-I &lt;IP Address&gt;]</code></p>"},{"location":"host-attach-util/mmlink/mmlink/#description","title":"Description","text":"<p>The Remote Signal Tap logic analyzer provides real-time hardware debugging for the Accelerator Function Unit (AFU).  It provides a signal trace capability that the Quartus Prime software adds to the AFU. The Remote Signal Tap logic analyzer provides access to the Remote Signal Tap part of the Port MMIO space and then runs the remote protocol.</p>"},{"location":"host-attach-util/mmlink/mmlink/#examples","title":"Examples","text":"<p><code>./mmlink  -B 0x5e -P 3333</code></p> <p>MMLink app starts and listens for connection.</p>"},{"location":"host-attach-util/mmlink/mmlink/#options","title":"Options","text":"<p><code>-v,--version</code></p> <p>Prints version information and exits.</p> <p><code>-B,--bus</code> </p> <p>FPGA Bus number.</p> <p><code>-D,--device</code> </p> <p>FPGA Device number.</p> <p><code>-F,--function</code> </p> <p>FPGA function number.</p> <p><code>-S,--socket</code> </p> <p>FPGA socket number.</p> <p><code>-P,--port</code> </p> <p>TCP port number.</p> <p><code>-I,--ip</code> </p> <p>IP address of FPGA system. </p>"},{"location":"host-attach-util/mmlink/mmlink/#notes","title":"Notes","text":"<p>Driver privilege:</p> <p>Change AFU driver privilege to user:</p> <pre><code>$ chmod 777 /dev/intel-fpga-port.0\n</code></pre> <p>Change locked memory size:</p> <p>edit the file /etc/security/limits.conf</p> <pre><code>$ sudo vi /etc/security/limits.conf\n\nuser    hard   memlock           10000\n\nuser    soft   memlock           10000\n</code></pre> <p>Exit terminal and log into a new terminal.</p> <p>Verify that the locked memory is now set:  ``` $ ulimit -l 10000</p>"},{"location":"host-attach-util/ofs_uio/ofs_uio/","title":"ofs.uio","text":""},{"location":"host-attach-util/ofs_uio/ofs_uio/#synopsis","title":"SYNOPSIS","text":"<p><code>ofs.uio [-h] [--pcie-address PCIE_ADDRESS] [--uio uiox] [--feature-id FEATURE_ID] [--region-index REGION_INDEX]                   [--mailbox-cmdcsr offset] [--bit-size {8,16,32,64}] [--peek offset] [--poke offset value]                   [--mailbox-read offset] [--mailbox-dump address size] [--mailbox-write address value]</code></p> <p><code>ofs.uio [--uio uiox] [--peek offset]</code> <code>ofs.uio [--uio uiox] [--poke offset value]</code> <code>ofs.uio [--uio uiox] [--mailbox-read address]</code> <code>ofs.uio [--uio uiox] [--mailbox-write address value]</code> <code>ofs.uio [--uio uiox] [--mailbox-dump address size]</code> <code>ofs.uio [--pcie-address PCIE_ADDRESS] [--feature-id FEATURE_ID] [--peek offset]</code> <code>ofs.uio [--pcie-address PCIE_ADDRESS] [--feature-id FEATURE_ID] [--poke offset value]</code> <code>ofs.uio [--pcie-address PCIE_ADDRESS] [--feature-id FEATURE_ID] [--mailbox-read address]</code> <code>ofs.uio [--pcie-address PCIE_ADDRESS] [--feature-id FEATURE_ID] [--mailbox-write address value]</code> <code>ofs.uio [--pcie-address PCIE_ADDRESS] [--feature-id FEATURE_ID] [--mailbox-dump address size]</code></p>"},{"location":"host-attach-util/ofs_uio/ofs_uio/#description","title":"DESCRIPTION","text":"<p><code>ofs.uio</code> is a tool that provides user space access to DFL UIO devices, command line options like peek, poke, mailbox-read, mailbox-write, mailbox-dump to  access Configuration and Status Registers (CSRs).</p>"},{"location":"host-attach-util/ofs_uio/ofs_uio/#options","title":"OPTIONS","text":""},{"location":"host-attach-util/ofs_uio/ofs_uio/#peek","title":"Peek","text":"<p>Peek/Read UIO CSR offset <code>ofs.uio [--uio uio] [--peek offset]</code> <code>ofs.uio [--pcie-address PCIE_ADDRESS] [--feature-id FEATURE_ID] [--peek offset]</code></p>"},{"location":"host-attach-util/ofs_uio/ofs_uio/#poke","title":"Poke","text":"<p>Poke/Write value to UIO CSR offset <code>ofs.uio [--uio uio] [--poke offset value]</code> <code>ofs.uio [--pcie-address PCIE_ADDRESS] [--feature-id FEATURE_ID] [--poke offset value]</code></p>"},{"location":"host-attach-util/ofs_uio/ofs_uio/#mailbox-read","title":"Mailbox Read","text":"<p>Read CSR address using mailbox <code>ofs.uio [--uio uio] [--mailbox-read address]</code> <code>ofs.uio [--pcie-address PCIE_ADDRESS] [--feature-id FEATURE_ID] [--mailbox-read address]</code></p>"},{"location":"host-attach-util/ofs_uio/ofs_uio/#mailbox-write","title":"Mailbox Write","text":"<p>Write value to CSR address using mailbox  <code>ofs.uio [--uio uio] [--mailbox-write address value]</code> <code>ofs.uio [--pcie-address PCIE_ADDRESS] [--feature-id FEATURE_ID] [--mailbox-write address value]</code></p>"},{"location":"host-attach-util/ofs_uio/ofs_uio/#mailbox-dump","title":"Mailbox Dump","text":"<p>Reads/Dumps block size of CSR address using mailbox <code>ofs.uio [--uio uio] [--mailbox-dump address size]</code> <code>ofs.uio [--pcie-address PCIE_ADDRESS] [--feature-id FEATURE_ID] [--mailbox-dump address size]</code></p>"},{"location":"host-attach-util/ofs_uio/ofs_uio/#bit-size","title":"Bit size","text":"<p>Read/Write bit-field 8,16,32,64 sizes <code>ofs.uio [--uio uio] --bit-size 8 [--peek offset]</code> <code>ofs.uio [--uio uio] --bit-size 32 [--peek offset]</code></p>"},{"location":"host-attach-util/ofs_uio/ofs_uio/#pcie-address","title":"PCIe Address","text":"<p>PCIE_ADDR PCIe address of FPGA device <code>ofs.uio [--pcie-address PCIE_ADDRESS] [--feature-id FEATURE_ID] [--peek offset]</code></p>"},{"location":"host-attach-util/ofs_uio/ofs_uio/#uio-region-index","title":"UIO region index","text":"<p>UIO region index, default region index is 0  <code>ofs.uio [--uio uio] --region-index 0 [--peek offset]</code> <code>ofs.uio [--uio uio] --region-index 1 [--peek offset]</code></p>"},{"location":"host-attach-util/ofs_uio/ofs_uio/#mailbox-command-status-csr-offset","title":"Mailbox command status csr offset","text":"<p>Mailbox command status csr offset,  default value set to dfl pcie subsystem system feature mailbox command status register offset 0x28  <code>ofs.uio [--uio uio] --mailbox-cmdcsr 0xa8 [--mailbox-read address]</code> <code>ofs.uio [--pcie-address PCIE_ADDRESS] [--feature-id FEATURE_ID] --mailbox-cmdcsr 0xa8  [--mailbox-read address]</code></p>"},{"location":"host-attach-util/ofs_uio/ofs_uio/#examples","title":"EXAMPLES","text":"<p>Peek/Read <pre><code>ofs.uio --uio uio0 --peek 0x0\npeek(0x0): 0x3000000010002015\n\nofs.uio --uio uio6 --peek 0x0\npeek(0x0): 0x3000000100000020\n\nofs.uio --pcie-address 0000:b1:00.0 --feature-id 0x15 --peek 0x0\npeek(0x0): 0x3000000010002015\n\nofs.uio --uio uio0 --peek 0x0 --bit-size 32\npeek(0x0): 0x10002015\n</code></pre></p> <p>Poke/Write <pre><code>ofs.uio --uio uio6 --peek 0x8\npeek(0x8): 0x0\nofs.uio --uio uio6 --poke  0x8 0xabcdd12345\npoke(0x8):0xabcdd12345\n\nofs.uio --pcie-address 0000:b1:00.0 --feature-id 0x15 --peek 0x0\npeek(0x8): 0x0\nofs.uio --pcie-address 0000:b1:00.0 --feature-id 0x15 --poke  0x8 0x1234\npoke(0x8):0x1234\n</code></pre></p> <p>Mailbox Read <pre><code>ofs.uio --uio uio6 --mailbox-read 0x0\nMailboxRead(0x0): 0x1000000\nofs.uio --uio uio6 --mailbox-read 0x8\nMailboxRead(0x8): 0x110c000\n\nofs.uio --pcie-address 0000:b1:00.0 --feature-id 0x20 --mailbox-read 0x0\nMailboxRead(0x0): 0x1000000\nofs.uio --pcie-address 0000:b1:00.0 --feature-id 0x20 --mailbox-read 0x8 \nMailboxRead(0x8): 0x110c000\n</code></pre></p> <p>Mailbox Write <pre><code>ofs.uio --uio uio6 --mailbox-write 0x0 0x1234\nMailboxWrite(0x0):0x1234\nofs.uio --uio uio6 --mailbox-read 0x0\nMailboxRead(0x0):0x1234\n\nofs.uio --pcie-address 0000:b1:00.0 --feature-id 0x20 --mailbox-write 0x0 0x1234\nMailboxWrite(0x0):0x1234\nofs.uio --pcie-address 0000:b1:00.0 --feature-id 0x20 --mailbox-read 0x0 \nMailboxRead(0x0):0x1234\n</code></pre></p> <p>Mailbox Dump <pre><code>ofs.uio --uio uio6 --mailbox-dump 0x0 0x10\nMailboxDump(0x0): 0x1000000\nMailboxDump(0x4): 0x1000000\nMailboxDump(0x8): 0x110c000\nMailboxDump(0xc): 0x110c000\nMailboxDump(0x10): 0x0\nMailboxDump(0x14): 0x0\nMailboxDump(0x18): 0x0\nMailboxDump(0x1c): 0x0\nMailboxDump(0x20): 0x0\nMailboxDump(0x24): 0x0\nMailboxDump(0x28): 0x0\nMailboxDump(0x2c): 0x0\nMailboxDump(0x30): 0x0\nMailboxDump(0x34): 0x0\nMailboxDump(0x38): 0x0\nMailboxDump(0x3c): 0x0\n\nofs.uio --pcie-address 0000:b1:00.0 --feature-id 0x20 --mailbox-dump 0x0 0x10\nMailboxDump(0x0): 0x1000000\nMailboxDump(0x4): 0x1000000\nMailboxDump(0x8): 0x110c000\nMailboxDump(0xc): 0x110c000\nMailboxDump(0x10): 0x0\nMailboxDump(0x14): 0x0\nMailboxDump(0x18): 0x0\nMailboxDump(0x1c): 0x0\nMailboxDump(0x20): 0x0\nMailboxDump(0x24): 0x0\nMailboxDump(0x28): 0x0\nMailboxDump(0x2c): 0x0\nMailboxDump(0x30): 0x0\nMailboxDump(0x34): 0x0\nMailboxDump(0x38): 0x0\nMailboxDump(0x3c): 0x0\n</code></pre></p>"},{"location":"host-attach-util/opae_io/opae_io/","title":"opae.io","text":""},{"location":"host-attach-util/opae_io/opae_io/#synopsis","title":"SYNOPSIS","text":"<p><code>opae.io ls [-v,--viddid VIDDID] [-s,--sub-viddid SUB_VIDDID] [--all] [--system-class]</code> <code>opae.io init [-d,--device PCI_ADDR] [USER[:GROUP]]</code> <code>opae.io release [-d,--device PCI_ADDR]</code> <code>opae.io [-d,--device PCI_ADDR] [-r,--region REGION] walk [--offset [OFFSET]] [-u,--show-uuid] [-D,--dump] [-c,--count COUNT] [-y,--delay DELAY] [-s,--safe]</code> <code>opae.io [-d,--device PCI_ADDR] [-r,--region REGION] dump [--offset [OFFSET]] [-o,--output OUTPUT] [-f,--format {bin,hex}] [-c,--count COUNT]</code> <code>opae.io [-d,--device PCI_ADDR] [-r,--region REGION] peek OFFSET</code> <code>opae.io [-d,--device PCI_ADDR] [-r,--region REGION] poke OFFSET VALUE</code> <code>opae.io [-d,--device PCI_ADDR] [-r,--region REGION] script SCRIPT ARG1 ARG2 ... ARGN</code> <code>opae.io [-d,--device PCI_ADDR] [-r,--region REGION]</code></p>"},{"location":"host-attach-util/opae_io/opae_io/#description","title":"DESCRIPTION","text":"<p><code>opae.io</code> is an interactive Python environment packaged on top of <code>libopaevfio.so</code>, which provides user space access to PCIe devices via the vfio-pci driver. The main feature of opae.io is its built-in Python command interpreter, along with some Python bindings that provide a means to access Configuration and Status Registers (CSRs) that reside on the PCIe device.</p> <p><code>opae.io</code> has two operating modes: command line mode and interactive mode.</p>"},{"location":"host-attach-util/opae_io/opae_io/#command-line-mode","title":"COMMAND LINE MODE","text":"<p>To view the accelerator devices that are present on the system, <code>opae.io</code> provides the <code>ls</code> command option.</p> <p><code>opae.io ls [-v,--viddid VIDDID] [-s,--sub-viddid SUB_VIDDID] [--all] [--system-class]</code></p> <p>Each accelerator device is listed along with the PCIe address, the PCIe vendor/device ID, a brief description of the device, and the driver to which the device is currently bound.</p> <p>Device filtering is available by providing a Vendor ID:Device ID pair, eg -v 8086:bcce. Further filtering can be done by providing a sub- Vendor ID:sub-Device ID pair, eg -s 8086:1771. The --all option provides a list of all of the PCIe devices in the system, which an be quite verbose. The --system-class option prints the PCIe database class of the accelerator device, rather than the product name.</p> <p><code>opae.io</code> provides an option to initialize a PCIe device for use with the vfio-pci driver. In order for the device CSRs to be accessed from user space, the device must first be bound to the vfio-pci driver. This is the job of the <code>init</code> command option.</p> <p><code>opae.io init [-d,--device PCI_ADDR] [USER[:GROUP]]</code></p> <p>The <code>init</code> command unbinds the specified device from its current driver and binds it to vfio-pci. This creates a new vfio group under /dev/vfio. This group path is then used by the <code>libopaevfio.so</code> library to interact with the device.</p> <p>To release the PCIe device from vfio-pci and return it to use with its previous driver, the <code>release</code> command option is used.</p> <p><code>opae.io release [-d,--device PCI_ADDR]</code></p> <p>The <code>release</code> command option reverses the actions of the last <code>init</code> command, releasing the device from vfio-pci and binding it to the driver which was bound at the time the <code>init</code> command was issued.</p> <p>The <code>walk</code> command option traverses and displays the Device Feature List of the given region.</p> <p><code>opae.io walk [--offset [OFFSET]] [-u,--show-uuid] [-D,--dump] [-c,--count COUNT] [-y,--delay DELAY] [-s,--safe]</code></p> <p>The various fields of each Device Feature Header are displayed. The <code>--show-uuid</code> option additionally displays the GUID for each feature. OFFSET can be used to specify the beginning of the DFL in the MMIO region. --dump displays the raw DFH contents in hex format. COUNT limits the number of DFH entries traversed. DELAY causes a pause between each printout. --safe examines each DFH offset for proper alignment.</p> <p>The <code>dump</code> command provides a means to dump the MMIO space in ASCII hex or binary format.</p> <p><code>opae.io dump [--offset [OFFSET]] [-o,--output OUTPUT] [-f,--format {bin,hex}] [-c,--count COUNT]</code></p> <p>OFFSET specifies the starting MMIO offset. OUTPUT gives the name of a file to capture the dump output, where sys.stdout is used by default. --format allows changing the output format. COUNT specifies the number of qwords to dump.</p> <p>The <code>peek</code> command option reads and displays a CSR value.</p> <p><code>opae.io peek OFFSET</code></p> <p>The <code>poke</code> command option writes a given value to a CSR.</p> <p><code>opae.io poke OFFSET VALUE</code></p> <p><code>opae.io</code> can also execute Python scripts from the command line. These Python scripts may contain calls to the device built-in functions that are available during an interactive session. Refer to the description of interactive mode for details.</p> <p><code>opae.io script myscript.py a b c</code></p> <p>In order to enter the interactive mode of <code>opae.io</code>, simply invoke it and optionally pass the desired device address and MMIO region options.</p> <p><code>opae.io [-d,--device PCI_ADDR] [-r,--region REGION]</code></p>"},{"location":"host-attach-util/opae_io/opae_io/#interactive-mode","title":"INTERACTIVE MODE","text":"<p>Upon entering interactive mode, <code>opae.io</code> begins a Python interpreter session and displays the command prompt shown below:</p> <p>0000:3f:00.0[0]&gt;&gt;</p> <p>The first portion of the prompt shows the address of the active PCIe device, here 0000:3f:00.0. The part in square brackets shows the active MMIO region, here [0].</p> <p>The interpreter waits for a valid Python command, then attempts to execute the given command in the usual way. The only differences between the traditional Python command intepreter and <code>opae.io</code> are that opae.io provides 1) the notion of an active PCIe device and MMIO region and 2) several built-in functions and objects that allow manipulating the active device and MMIO region.</p>"},{"location":"host-attach-util/opae_io/opae_io/#built-in-functions","title":"BUILT-IN FUNCTIONS","text":"<p>The <code>opae.io</code> built-in functions assume an active device and MMIO region. Attempting to use the built-in functions without first opening a device and region will result in errors.</p> <p><code>peek(OFFSET)</code></p> <p>The <code>peek</code> built-in function reads and displays a CSR value from the active device and region, at the offset supplied by its argument.</p> <p>0000:3f:00.0[0]&gt;&gt; peek(0x28) 0xdeadbeef</p> <p><code>poke(OFFSET, VALUE)</code></p> <p>The <code>poke</code> built-in function writes the given VALUE to the current MMIO region at the given OFFSET.</p> <p>0000:3f:00.0[0]&gt;&gt; poke(0x28, 0xdeadbeef)</p> <p><code>read_csr(OFFSET)</code></p> <p>The <code>read_csr</code> built-in function returns the value of the CSR at the active MMIO region and the given OFFSET.</p> <p>0000:3f:00.0[0]&gt;&gt; print('0x{:0x}'.format(read_csr(0x28))) 0xdeadbeef</p> <p><code>write_csr(OFFSET, VALUE)</code></p> <p>The <code>write_csr</code> built-in function writes the given VALUE to the current MMIO region at the given OFFSET.</p> <p>0000:3f:00.0[0]&gt;&gt; write_csr(0x28, 0xdeadbeef)</p> <p><code>device(PCI_ADDR)</code></p> <p>The <code>device</code> built-in function allows changing the active PCIe device.</p> <p>0000:3f:00.0[0]&gt;&gt; device('0000:2b:00.0') 0000:2b:00.0&gt;&gt;</p> <p><code>region(REGION)</code></p> <p>The <code>region</code> built-in function allows changing the active MMIO region.</p> <p>0000:2b:00.0&gt;&gt; region(0) 0000:2b:00.0[0]&gt;&gt;</p> <p><code>allocate_buffer(SIZE)</code></p> <p>The <code>allocate_buffer</code> built-in function creates and returns a DMA buffer object. The underlying buffer will be SIZE bytes in length.</p> <p>0000:2b:00.0[0]&gt;&gt; b1 = allocate_buffer(4096) 0000:2b:00.0[0]&gt;&gt; print(b1.size, '0x{:0x}'.format(b1.address), b1.io_address) 4096 0x7f9361c66000 0</p> <p><code>version()</code></p> <p>The <code>version</code> built-in function returns a tuple containing the four components used to identify the opae.io version:</p> <p>0000:2b:00.0[0]&gt;&gt; print(version()) ('opae.io', 0, 2, 0)</p>"},{"location":"host-attach-util/opae_io/opae_io/#built-in-objects","title":"BUILT-IN OBJECTS","text":"<p><code>opae.io</code> interactive mode provides two global objects corresponding to the current device and that device's current MMIO region. These objects are referred to by global variables <code>the_device</code> and <code>the_region</code>, respectively.</p> <p>The <code>device</code> class:</p> <p>the_device.descriptor() : method that returns the integer file descriptor of the <code>VFIO container</code>.</p> <p>0000:2b:00.0[0]&gt;&gt; print(the_device.descriptor()) 5</p> <p>the_device.repr() : method that is invoked when a <code>device</code> object is printed.</p> <p>0000:2b:00.0[0]&gt;&gt; print(the_device) 0000:2b:00.0</p> <p>the_device.allocate(SIZE) : method that allocates and returns a <code>system_buffer</code> object. The buffer will be mapped into the DMA space of <code>the_device</code>.</p> <p>0000:2b:00.0[0]&gt;&gt; b1 = the_device.allocate(4096)</p> <p>the_device.pci_address() : read-only property that returns the PCIe address of <code>the_device</code>.</p> <p>0000:2b:00.0[0]&gt;&gt; print(the_device.pci_address) 0000:2b:00.0</p> <p>the_device.num_regions : read-only property that returns the number of MMIO regions in <code>the_device</code>.</p> <p>0000:2b:00.0[0]&gt;&gt; print(the_device.num_regions) 2</p> <p>the_device.regions : read-only property that returns a list of the active MMIO regions of <code>the_device</code>:</p> <p>0000:2b:00.0[0]&gt;&gt; print(the_device.regions) [0, 2]</p> <p>The <code>region</code> class:</p> <p>the_region.write32(OFFSET, VALUE) : method that writes a 32-bit VALUE to the CSR at OFFSET.</p> <p>the_region.read32(OFFSET) : method that returns a 32-bit CSR at the given OFFSET.</p> <p>0000:2b:00.0[0]&gt;&gt; the_region.write32(0x28, 0xdeadbeef) 0000:2b:00.0[0]&gt;&gt; print('0x{:0x}'.format(the_region.read32(0x28))) 0xdeadbeef</p> <p>the_region.write64(OFFSET, VALUE): method that writes a 64-bit VALUE to the CSR at OFFSET.</p> <p>the_region.read64(OFFSET): method that returns a 64-bit CSR at the given OFFSET.</p> <p>0000:2b:00.0[0]&gt;&gt; the_region.write64(0x28, 0xbaddecaf) 0000:2b:00.0[0]&gt;&gt; print('0x{:0x}'.format(the_region.read64(0x28))) 0xbaddecaf</p> <p>the_region.index(): method that returns the MMIO index of <code>the_region</code>.</p> <p>0000:2b:00.0[0]&gt;&gt; print(the_region.index()) 0</p> <p>the_region.repr(): method that is invoked when a <code>region</code> object is printed.</p> <p>0000:2b:00.0[0]&gt;&gt; print(the_region) 0</p> <p>the_region.len(): method that is invoked to determine the MMIO region size.</p> <p>0000:2b:00.0[0]&gt;&gt; print(len(the_region)) 524288</p> <p>The <code>allocate_buffer()</code> built-in function and the <code>device.allocate()</code> method return objects of type <code>system_buffer</code>.</p> <p>The <code>system_buffer</code> class is as follows:</p> <p><code>buf.size</code>: read-only property that gives the buffer size.</p> <p>0000:2b:00.0[0]&gt;&gt; print(b1.size) 4096</p> <p><code>buf.address</code>: read-only property that gives the buffer's user mode virtual address.</p> <p>0000:2b:00.0[0]&gt;&gt; print('0x{:0x}'.format(b1.address)) 0x7f2c15d8200</p> <p><code>buf.io_address</code>: read-only property that gives the buffer's IO address.</p> <p>0000:2b:00.0[0]&gt;&gt; print('0x{:0x}'.format(b1.io_address)) 0x0</p> <p><code>buf.__getitem__</code> and <code>buf.__setitem__</code>: indexing get/set of 64-bit data item.</p> <p>0000:2b:00.0[0]&gt;&gt; b1[0] = 0xdecafbad 0000:2b:00.0[0]&gt;&gt; print('0x{:0x}'.format(b1[0])) 0xdecafbad</p> <p><code>buf.read8(OFFSET)</code> <code>buf.read16(OFFSET)</code> <code>buf.read32(OFFSET)</code> <code>buf.read64(OFFSET)</code> : methods that read the given size data item from the given buffer OFFSET.</p> <p><code>buf.fill8(VALUE)</code> <code>buf.fill16(VALUE)</code> <code>buf.fill32(VALUE)</code> <code>buf.fill64(VALUE)</code> : methods that fill the buffer with the given VALUE, using the given size.</p> <p><code>b1.compare(b2)</code>: method that compares buffers. The method returns the index of the first byte that miscompares, or the length of b1.</p>"},{"location":"host-attach-util/opaeuio/opaeuio/","title":"opaeuio","text":""},{"location":"host-attach-util/opaeuio/opaeuio/#synopsis","title":"SYNOPSIS","text":"<p><code>opaeuio [-h] [-i] [-r] [-d DRIVER] [-u USER] [-g GROUP] [-v] [device]</code></p>"},{"location":"host-attach-util/opaeuio/opaeuio/#description","title":"DESCRIPTION","text":"<p>The <code>opaeuio</code> command enables the binding/unbinding of a DFL device to/from the dfl-uio-pdev device driver. See https://kernel.org/doc/html/v4.14/driver-api/uio-howto.html for a description of uio.</p>"},{"location":"host-attach-util/opaeuio/opaeuio/#options","title":"OPTIONS","text":"<p><code>device</code>     The DFL device name, eg dfl_dev.10</p> <p><code>-h, --help</code></p> <pre><code>Display command-line help and exit.\n</code></pre> <p><code>-i, --init</code></p> <pre><code>Specifies binding mode operation - initialize the given device for uio.\nUsed in conjunction with -u, -g, and -d.\n</code></pre> <p><code>-r, --release</code></p> <pre><code>Specifies unbinding mode operation - release the given device from uio.\n</code></pre> <p><code>-d DRIVER, --driver DRIVER</code></p> <pre><code>Specifies the device driver to bind to when binding to uio.\nThe default value is dfl-uio-pdev.\n</code></pre> <p><code>-u USER, --user USER</code></p> <pre><code>The user ID to assign when binding to uio. A new device node is created in\n/dev when the device is bound to uio. Use this option to specify\nthe new device owner.\n</code></pre> <p><code>-g GROUP, --group GROUP</code></p> <pre><code>The group ID to assign when binding to uio. Use this option to specify the\nnew device group for the device created in /dev.\n</code></pre> <p><code>-v, --version</code></p> <pre><code>Display script version information and exit.\n</code></pre>"},{"location":"host-attach-util/opaeuio/opaeuio/#examples","title":"EXAMPLES","text":"<p><code>opaeuio -h</code> <code>opaeuio -v</code> <code>sudo opaeuio -i -u lab -g labusers dfl_dev.10</code> <code>sudo opaeuio -r dfl_dev.10</code></p>"},{"location":"host-attach-util/opaevfio/opaevfio/","title":"opaevfio","text":""},{"location":"host-attach-util/opaevfio/opaevfio/#synopsis","title":"SYNOPSIS","text":"<p><code>opaevfio [-h] [-i] [-r] [-d DRIVER] [-u USER] [-g GROUP] [-n] [-v] [addr]</code></p>"},{"location":"host-attach-util/opaevfio/opaevfio/#description","title":"DESCRIPTION","text":"<p>The <code>opaevfio</code> command enables the binding/unbinding of a PCIe device to/from the vfio-pci device driver. See https://kernel.org/doc/Documentation/vfio.txt for a description of vfio-pci.</p>"},{"location":"host-attach-util/opaevfio/opaevfio/#options","title":"OPTIONS","text":"<p><code>addr</code>     The PCIe address of the device in ssss:bb:dd.f format, eg 0000:7f:00.0</p> <p><code>-h, --help</code></p> <pre><code>Display command-line help and exit.\n</code></pre> <p><code>-i, --init</code></p> <pre><code>Specifies binding mode operation - initialize the given addr for vfio.\nUsed in conjunction with -u, -g, and -n.\n</code></pre> <p><code>-r, --release</code></p> <pre><code>Specifies unbinding mode operation - release the given addr from vfio.\nUsed in conjunction with -d.\n</code></pre> <p><code>-d DRIVER, --driver DRIVER</code></p> <pre><code>Specifies the device driver to bind to when releasing from vfio.\nWhen omitted, the device is not rebound to a driver (default).\n</code></pre> <p><code>-u USER, --user USER</code></p> <pre><code>The user ID to assign when binding to vfio. A new device node is created in\n/dev/vfio when the device is bound to vfio-pci. Use this option to specify\nthe new device owner.\n</code></pre> <p><code>-g GROUP, --group GROUP</code></p> <pre><code>The group ID to assign when binding to vfio. Use this option to specify the\nnew device group for the device created in /dev/vfio.\n</code></pre> <p><code>-n, --no-sriov</code></p> <pre><code>Do not enable SR-IOV when binding to vfio. The default value for this option\nis FALSE, ie the script should specify SR-IOV functionality when binding to\nthe vfio-pci driver. When omitted, the modprobe command which loads the vfio-pci\ndriver will contain the `enable_sriov=1` option. When given, it will not.\n</code></pre> <p><code>-v, --version</code></p> <pre><code>Display script version information and exit.\n</code></pre>"},{"location":"host-attach-util/opaevfio/opaevfio/#examples","title":"EXAMPLES","text":"<p><code>opaevfio -h</code> <code>opaevfio -v</code> <code>sudo opaevfio -i -u lab -g labusers 0000:7f:00.0</code> <code>sudo opaevfio -r 0000:7f:00.0</code></p>"},{"location":"host-attach-util/pac_hssi_config/pac_hssi_config/","title":"pac_hssi_config","text":"<pre><code># pac_hssi_config #\n\n## SYNOPSIS ##\n```console\npac_hssi_config.py [-h] subcommand [subarg] [bdf]\n</code></pre>"},{"location":"host-attach-util/pac_hssi_config/pac_hssi_config/#description","title":"DESCRIPTION","text":"<p>The <code>pac_hssi_config.py</code> tool exercises the Ethernet 10 Gbps (10GbE) and 40GbE transceivers for designs using the Intel\u00ae Programmable Acceleration Card (PAC) with Intel Arria\u00ae 10 GX FPGA. This tool does not support the  Intel Xeon\u00ae Processor with Integrated FPGA. </p> <p></p> <p>The two required arguments to the <code>pac_hssi_config.py</code> tool specify the subcommand and bus, device, and function (BDF) for the PCIe device under test. You must provide the BDF parameter for systems with more than one PCIe card. </p> <pre><code>.. note::\n    If you do not provide the BDF when required, the command prints a list of valid BDFs for the system. You can also\n    determine the BDF using the ``lspci`` command.\n</code></pre> <p>For usage help, type the following at a command prompt:</p> <p><code>pac_hssi_config.py [-h|--help]</code></p> <p>To configure the network ports, send data, and read statistics, use the following form of the <code>pac_hssi_config.py</code> script:</p> <p><code>pac_hssi_config.py subcommand [subarg] [bdf]</code></p> <p>Only a subset of subcommand arguments support <code>subarg</code>. </p>"},{"location":"host-attach-util/pac_hssi_config/pac_hssi_config/#table-1-general-subcommands","title":"Table 1. General Subcommands","text":"Subcommand Subarg Description <code>stat</code> N/A Prints high speed serial interface (HSSI) controller statistics. <code>eeprom</code> N/A Reads the 128-bit unique board ID, MAC address, and board-specific IDs from EEPROM."},{"location":"host-attach-util/pac_hssi_config/pac_hssi_config/#table-2-1040-gbe-traffic-generation-subcommands","title":"Table 2. 10/40 GbE Traffic Generation Subcommands","text":"Subcommand Subarg Description <code>e10init</code> and <code>e40init</code> N/A Initializes HSSI PHY to 10GbE or 40GbE mode.  Clears statistics and enable internal HSSI transceiver loopback. <code>e10loop</code> and <code>e40loop</code> On/Off Turns on or off internal HSSI transceiver loopback. <code>e10reset</code> and <code>e40reset</code> On/Off Asserts or deasserts AFU reset.  Clears packet statistics and disables internal HSSI transceiver loopback. <code>e10send</code> and <code>e40send</code> N/A Sends 1,000,000 1500-byte packets. For 10GbE sends packets on all four ports. 40GbE has a single port. <code>e10stat</code> and <code>e40stat</code> N/A Prints packet statistics. <code>e10statclr</code> and <code>e40statclr</code> N/A Clears packet statistics.  Use this command after switching loopback modes to clear any transient statistics accumulated during the mode switch. <p>The transceiver equalization <code>eqwrite</code> and <code>eqread</code> subcommands write and read transceiver equalization settings.  These subcommands require you to specify the transceiver channel, the equalization setting, and the value (for writes).  Use the following form for the <code>eqwrite</code> command:</p> <p><code>pac_hssi_config.py eqwrite [transceiver channel number] [equalization setting] [equalization value] [bdf]</code></p> <p>Use the following form for the <code>eqread</code>command:</p> <p><code>pac_hssi_config.py eqread [transceiver channel number] [equalization setting] [bdf]</code> </p>"},{"location":"host-attach-util/pac_hssi_config/pac_hssi_config/#table-3-transceiver-equalization-subcommands","title":"Table 3. Transceiver Equalization Subcommands","text":"Subcommand Channel Number Equalization Setting Value <code>eqwrite</code> 0-3 0 = Continuous time-linear equalization (CTLE)  1 = Variable gain amplifier (VGA)  2 = DCGAIN  3 = Pre-emphasis first post-tap  4 = Pre-emphasis second post-tap  5 = Pre-emphasis first pre-tap  6 = Pre-emphasis second pre-tap  7 = Differential output voltage (VOD) Specifies the value for the specified equalization setting. <code>eqread</code> 0-3 0 = Continuous time-linear equalization (CTLE)  1 = Variable gain amplifier (VGA)  2 = DCGAIN  3 = Pre-emphasis first post-tap  4 = Pre-emphasis second post-tap  5 = Pre-emphasis first pre-tap  6 = Pre-emphasis second pre-tap  7 = Differential output voltage (VOD) N/A <p>For more information about reconfiguring transceiver analog parameter settings In Arria\u00ae 10 devices, refer to \"Changing PMA Analog Parameters\" in the  Intel\u00ae Arria\u00ae 10 Transceiver PHY User Guide.</p>"},{"location":"host-attach-util/packager/packager/","title":"packager","text":""},{"location":"host-attach-util/packager/packager/#synopsis","title":"SYNOPSIS","text":"<p><code>packager &lt;cmd&gt; [arguments]</code></p>"},{"location":"host-attach-util/packager/packager/#description","title":"Description","text":"<p>The packager provides tools that Accelerator Functional Unit (AFU) developers use to create Accelerator Function (AF)  files. The AF file is the programming file for an AFU on Intel\u00ae FPGA platforms. The packager tool concatenates the metadata from the JSON file to a raw binary file <code>(.rbf)</code> that the Intel Quartus\u00ae Prime software generates. </p> <p>The packager's only function is to create an AF file. Refer to Packager Command Syntax for more information about invoking the packager. The packager depends on a JSON file to describe AFU metadata. Refer to  Accelerator Description File for more information about the JSON file.</p> <p>The packager requires Python 2.7.1 and Python 2.7.3. The tool indicates if it is being called with a compatible  of Python.</p>"},{"location":"host-attach-util/packager/packager/#packager-command-syntax","title":"Packager Command Syntax","text":"<p>The packager is a command line tool with the following syntax:</p> <p><code>$ packager &lt;cmd&gt; [arguments]</code></p> <p>The following table describes the <code>&lt;CMD&gt;</code> arguments:</p> Command Arguments Description <code>create-gbs</code> <code>--rbf=&lt;RBF_PATH&gt;</code> <code>--afu=&lt;AFU_JSON_PATH&gt;</code> <code>--gbs=&lt;GBS_PATH&gt;</code> <code>--set-value=&lt;key&gt;.&lt;value&gt;</code> Creates the AF file. The engineering name for this file is the green bit stream, abbreviated gbs. The <code>--rbf</code> and <code>--afu</code>   arguments are required.  <code>&lt;RBF_PATH&gt;</code> is the path to the RBF file for the AFU. The Quartus\u00ae Prime software generates this RBF by compiling the AFU design. <code>&lt;AFU_JSON_PATH&gt;</code> is the path to the Accelerator Description file. This is a JSON file that describes the metadata that <code>create-gbs</code> appends to the RBF. <code>&lt;GBS_PATH&gt;</code> is the path to the RBF file for the FPGA Interface Manager (FIM) that contains the FPGA interface unit and other interfaces. If you do not specify the <code>--gbs</code>, the command defaults to <code>&lt;rbf_name&gt;.gbs</code>. You can use the optional <code>--set-value=&lt;key&gt;.&lt;value&gt;</code> argument to set values for JSON metadata. To set more than one JSON value, list a series of <code>&lt;key&gt;.&lt;value&gt;</code>  pairs. <code>modify-gbs</code> <code>--gbs=&lt;gbs_PATH&gt;</code> Modifies the AF file. The <code>--input-gbs</code>argument is required. If you do not provide the <code>--output-gbs</code> argument, <code>modify-gbs</code> overwrites the <code>--input-gbs</code> file. Use the <code>--set-value=&lt;key&gt;.&lt;value&gt;</code> argument to set values for JSON metadata. To set more than one JSON value, list a series of <code>&lt;key&gt;.&lt;value&gt;</code>  pairs. <code>gbs-info</code> <code>--input-gbs=&lt;gbs_PATH&gt;</code> Prints information about the AF file. The <code>--input-gbs</code> argument is required. <code>get-rbf</code> <code>--gbs=&lt;GBS_PATH&gt;</code> <code>--rbf=&lt;RBF_PATH&gt;</code> Creates the RBF by extracting it from the AF file. The <code>--gbs</code>argument is required. If you do not specify the <code>--rbf</code> argument, the command defaults to <code>&lt;gbs_name.rbf</code> . None, or any <code>&lt;CMD&gt;</code> <code>--help</code> Summarizes the <code>&lt;CMD&gt;</code> options. Typing <code>packager --help</code> gives a list of <code>&lt;CMD&gt;</code> values. Typing <code>packager &lt;CMD&gt; --help</code> provides detailed help for <code>&lt;CMD&gt;</code>"},{"location":"host-attach-util/packager/packager/#examples","title":"Examples","text":"<p>To generate an AF file, run:</p> <p><code>$ packager create-gbs --rbf=&lt;RBF_PATH&gt; --afu=&lt;AFU_JSON_PATH&gt; --gbs=&lt;GBS_PATH&gt;</code></p> <p>TIP: JSON files are very particular about syntax such as trailing commas. If you are getting errors, use <code>jsonlint.com</code> to validate that your JSON is formatted correctly. </p> <p>To modify metadata in an existing AF, run the following command:</p> <p><code>$ packager modify-gbs --input-gbs=&lt;PATH_TO_GBS_TO_BE_MODIFIED&gt; --outputgbs=&lt;NAME_FOR_NEW_GBS&gt; --set-value &lt;key&gt;:&lt;value&gt;</code></p> <p>You can pass in a number of : pairs with --set-value to update values in an AF.  <p>To print the metadata of an existing AF: </p> <p><code>$ packager get-info --gbs=&lt;GBS_PATH&gt;</code> </p> <p>To extract the RBF from the AF:</p> <p><code>$ packager get-rbf --gbs=&lt;GBS_PATH&gt; --rbf=&lt;NAME_FOR_RBF&gt;</code></p>"},{"location":"host-attach-util/packager/packager/#accelerator-description-file","title":"Accelerator Description File","text":"<p>The Accelerator Description File is a JSON file that describes the metadata associated with an AFU. The Open Progammable Accelerator Engine (OPAE) uses this metadata during reconfiguration. Here is an example file:</p> <p><pre><code>{\n   \"version\": 1,\n   \"platform-name\": \"DCP\",\n   \"afu-image\": {\n      \"magic-no\": 488605312,\n      \"interface-uuid\": \"01234567-89AB-CDEF-0123-456789ABCDEF\",\n      \"power\": 0,\n      \"accelerator-clusters\": [{\n         \"name\": \"dma_test_afu\",\n         \"total-contexts\": 1,   \n         \"accelerator-type-uuid\": \"331DB30C-9885-41EA-9081-F88B8F655CAA\"\n      }\n      ]  \n   }\n}\n</code></pre> The packager stores these parameter values in the resultant AF. After reprogramming the AFU using partial reconfiguration (PR), the  software driver reconfigures the PLLs by writing the clock-frequency-high and clock-frequency-low values (if present) over the  PCIe\u00ae and CCI interfaces. </p> <p>.. note:: <pre><code>The JSON file format may change as the architecture evolves. Any changes to the current format trigger an update\nto the version number.  \n</code></pre></p> <p>CATEGORY | NAME | TYPE | DESCRIPTION | MANDATORY ---------|------|------|-------------|:----------:| Per-AFU  | version | Integer | Version of the metadata format. | Yes Per-AFU  | magic-no (to be deprecated)| Integer | Magic no. Associated with the FPGA Interface Manager. | No Per-AFU  | platform-name | String | Name of the platform for which the metadata is intended. The field value is \u201cDCP\u201d for Intel  Acceleration Stack for FPGAs. | No Per-AFU  | interface-uuid | UUID | Interface id associated with the FPGA Interface Manager. | Yes Per-AFU  | power | Integer | Accelerator Function power consumption, in watts. Set to 0 for Intel Acceleration Stack for FPGAs platforms. | Yes Per-AFU  | clock-frequency-low | Float | Clock frequency for 1st PLL (Clock network)1 in MHz. | No Per-AFU  | clock-frequency-high | Float | Clock frequency for 2nd PLL (0 if absent) in MHz. | No Per-AFC Cluster | total-contexts | Integer | Number of AFCs in this cluster. Always be 1 in current architectures. | Yes Per-AFC Cluster | afc-type-uuid |  UUID | AFC type = AFU ID in current architectures. | Yes Per-AFC Cluster | name | string | AFC name = AFU name in current architectures. | Yes</p> Date Intel Acceleration Stack Version Changes Made 2018.05.21 DCP 1.1 Beta (works with Quartus Prime Pro 17.1.1) Fixed typos."},{"location":"host-attach-util/pci_device/pci_device/","title":"pci_device","text":""},{"location":"host-attach-util/pci_device/pci_device/#synopsis","title":"SYNOPSIS","text":"<p><code>pci_device [-h] [-E] device-filter [{aer,bind,plug,remove,rescan,topology,unbind,unplug,vf}]</code></p>"},{"location":"host-attach-util/pci_device/pci_device/#description","title":"DESCRIPTION","text":"<p>pci_device is a tool to aid in common operations for managing PCIe devices and drivers.</p>"},{"location":"host-attach-util/pci_device/pci_device/#options","title":"OPTIONS","text":""},{"location":"host-attach-util/pci_device/pci_device/#positional-arguments","title":"POSITIONAL ARGUMENTS","text":"<pre><code>`device filter`\n\nPCIe address of a device or vendor/device ID pair.\nThe PCIe address follows the format of [segment:]bus:device.function\nwhile the vendor/device ID pair follows the format [vendor ID]:[device ID]\nwhere at least one of these must be present.\n\n`{aer,bind,plug,remove,rescan,topology,unbind,unplug,vf}`\n\naction to perform on device\n\n`aer`\nPerform AER (Advanced Error Reporting) operations.\nThe aer action has its own sub-commands which are listed below:\n\n* `dump` sub-command will print out the AER error counters as reported\n   by the sysfs files for the device.\n* `mask` can either print out the current AER mask bits or set them\n  * If `show` or `print` (or nothing) is given after the `mask`\n    command, it will show the current mask bits for AER.\nBy default output will be written in stdout but can be written to an\noutput file if `-o|--output FILENAME` argument is given.\n  * If `all` is given after the `mask` command, it will mask all bits\n    (by setting the values to 0xffffffff and 0xffffffff).\n  * If `off` is given after the `mask` command, it will unmask all\n    bits (by setting the values to 0x0 and 0x0).\n  * If two numbers are present after the `mask` command, those two\n    numbers will be used to set the mask bits.\nValues for setting the mask can also be read in from an input file if\n`-i|--input FILENAME` argument is given.\n\n_NOTE_: mask related operations require root privileges\n\n`bind`\n\nAssociate a device with its driver.\n\n`plug`\n\nRestore a device that was previously given to `pci_device &lt;device&gt; unplug`\n\n`remove`\n\nRemove the pci device from the pci bus\n\n`rescan`\n\nRescan the bus as identified by the bus component of the PCIe device address\n\n'topology`\n\nPrint the PCIe topology from the root port to the PCIe device.\nThis shows the PCIe tree rooted at the PCIe root port.\nEach line shows the the PCIe address, vendor ID, and device ID along with\nthe driver bound to the device. The indentation is used to show\nparent/child relationship of devices.\n\nThe line listing the target PCIe device as identified by the given PCIe\naddress will be highlighted in green while the endpoints will be\nhighlighted in cyan.\n\nThe example below shows the topology of an N3000 device with eight virtual\nfunctions created from one of the Ethernet controllers:\n\n```console\n[pci_address(0000:3a:00.0), pci_id(0x8086, 0x2030)] (pcieport)\n    [pci_address(0000:3b:00.0), pci_id(0x10b5, 0x8747)] (pcieport)\n        [pci_address(0000:3c:09.0), pci_id(0x10b5, 0x8747)] (pcieport)\n            [pci_address(0000:3f:00.0), pci_id(0x8086, 0x0b30)] (dfl-pci)\n        [pci_address(0000:3c:11.0), pci_id(0x10b5, 0x8747)] (pcieport)\n            [pci_address(0000:43:00.0), pci_id(0x8086, 0x0b32)] (no driver)\n    [pci_address(0000:3c:08.0), pci_id(0x10b5, 0x8747)] (pcieport)\n            [pci_address(0000:3d:02.0), pci_id(0x8086, 0x154c)] (iavf)\n            [pci_address(0000:3d:00.1), pci_id(0x8086, 0x0d58)] (i40e)\n            [pci_address(0000:3d:02.7), pci_id(0x8086, 0x154c)] (iavf)\n            [pci_address(0000:3d:02.5), pci_id(0x8086, 0x154c)] (iavf)\n            [pci_address(0000:3d:02.3), pci_id(0x8086, 0x154c)] (iavf)\n            [pci_address(0000:3d:02.1), pci_id(0x8086, 0x154c)] (iavf)\n            [pci_address(0000:3d:00.0), pci_id(0x8086, 0x0d58)] (i40e)\n            [pci_address(0000:3d:02.6), pci_id(0x8086, 0x154c)] (iavf)\n            [pci_address(0000:3d:02.4), pci_id(0x8086, 0x154c)] (iavf)\n            [pci_address(0000:3d:02.2), pci_id(0x8086, 0x154c)] (iavf)\n        [pci_address(0000:3c:10.0), pci_id(0x10b5, 0x8747)] (pcieport)\n            [pci_address(0000:41:00.0), pci_id(0x8086, 0x0d58)] (i40e)\n            [pci_address(0000:41:00.1), pci_id(0x8086, 0x0d58)] (i40e)\n\n```\n\n`unbind`\n\nUnbind the driver bound to the device.\n\n`unplug`\n\nRemove device from PCI bus in anticipation of a RSU event by configuring its root port and associated endpoints.\n\n`vf`\n\nCreate/destroy VFs (virtual functions) by setting the number here.\nThe number given here will be written to sriov_numvfs sysfs file triggering\nthe PCIe subsystem to create/destroy VFs so that the current number of VFs\nwill be equal to the given number. If the number given is outside of the total VFs supported, an error message will be displayed to indicate this.\n</code></pre>"},{"location":"host-attach-util/pci_device/pci_device/#optional-arguments","title":"OPTIONAL ARGUMENTS","text":"<pre><code>`-h, --help`\n\nshow this help message and exit\n\n`-E, --other-endpoints`\n\nperform action on peer PCIe devices\n</code></pre>"},{"location":"host-attach-util/pci_device/pci_device/#examples","title":"EXAMPLES","text":"<pre><code>pci_device 0000:3d:00.0 remove\npci_device 0000:3d:00.0 rescan\npci_device 3d:00.0 topology\npci_device :0b30 topology\npci_device :0b30 aer\npci_device :0b30 aer mask\npci_device :0b30 aer mask all\npci_device :0b30 aer mask -o mask.dat\npci_device :0b30 aer mask -i mask.dat\n</code></pre>"},{"location":"host-attach-util/rsu/rsu/","title":"rsu","text":""},{"location":"host-attach-util/rsu/rsu/#synopsis","title":"SYNOPSIS","text":"<pre><code>rsu [-h] [-d] {bmc,bmcimg,retimer,fpga,sdm,fpgadefault} [PCIE_ADDR]\n</code></pre>"},{"location":"host-attach-util/rsu/rsu/#description","title":"DESCRIPTION","text":""},{"location":"host-attach-util/rsu/rsu/#mode-1-rsu","title":"Mode 1: RSU","text":"<pre><code>rsu bmc --page=(user|factory) [PCIE_ADDR]\nrsu retimer [PCIE_ADDR]\nrsu fpga --page=(user1|user2|factory) [PCIE_ADDR]\nrsu sdm --type=(sr|pr|sr_cancel|pr_cancel) [PCIE_ADDR]\n</code></pre> <p>Perform RSU (remote system update) operation on PAC device given its PCIe address. An RSU operation sends an instruction to the device to trigger a power cycle of the card only. This will force reconfiguration from flash for either BMC, Retimer, SDM, (on devices that support these) or the FPGA.</p>"},{"location":"host-attach-util/rsu/rsu/#mode-2-default-fpga-image","title":"Mode 2: Default FPGA Image","text":"<pre><code>rsu fpgadefault --page=(user1|user2|factory) --fallback=&lt;csv&gt; [PCIE_ADDR]\n</code></pre> <p>Set the default FPGA boot sequence. The --page option determines the primary FPGA boot image. The --fallback option allows a comma-separated list of values to specify fallback images.</p>"},{"location":"host-attach-util/rsu/rsu/#positional-arguments","title":"POSITIONAL ARGUMENTS","text":"<p><code>{bmc,bmcimg,retimer,fpga,sdm,fpgadefault}</code></p> <p>type of RSU operation or set Default FPGA Image operation.</p> <p><code>PCIE_ADDR</code>  PCIe address of device to do rsu (e.g. 04:00.0 or 0000:04:00.0) </p>"},{"location":"host-attach-util/rsu/rsu/#optional-arguments","title":"OPTIONAL ARGUMENTS","text":"<p><code>-h, --help</code> show this help message and exit</p> <p><code>-d, --debug</code> log debug statements</p> <p><code>--force</code> force rsu operation</p>"},{"location":"host-attach-util/rsu/rsu/#example","title":"EXAMPLE","text":"<pre><code># rsu bmc --page=user 25:00.0\n</code></pre> <p>Triggers a boot of the BMC image (user page) for the device with PCIe  address 25:00.0.</p> <pre><code># rsu bmc --page=factory 25:00.0\n</code></pre> <p>Triggers a factory boot of the BMC image for the device with  PCIe address 25:00.0.</p> <pre><code># rsu fpga --page=user2 25:00.0\n</code></pre> <p>Triggers a reconfiguration of the FPGA (user2 page) for the  device with PCIe address 25:00.0.</p> <pre><code># rsu --force fpga --page=user2 25:00.0\n</code></pre> <p>Forces a reconfiguration of the FPGA (user2 page) for the  device with PCIe address 25:00.0. Default behavior is to not perform  the rsu operation if DPC (downstream port containment) is not supported  and AER (advanced error reporting) is also not supported. Using --force  changes this behavior to perform rsu operation regardless but may result  in a surprise removal of pci devices which may cause the Linux kernel  to panic.</p> <pre><code># rsu fpga --page=factory 25:00.0\n</code></pre> <p>Triggers a factory reconfiguration of the FPGA for the device  with PCIe address 25:00.0.</p> <pre><code># rsu sdm --type=sr 25:00.0\n</code></pre> <p>Triggers Static Region key programming for the device with  PCIE address 25:00.0.</p> <pre><code># rsu fpgadefault --page=factory --fallback=user1,user2 25:00.0\n</code></pre> <p>Sets the FPGA boot sequence to factory with fallbacks user1, user2.</p>"},{"location":"host-attach-util/userclk/userclk/","title":"userclk","text":""},{"location":"host-attach-util/userclk/userclk/#synopsis","title":"SYNOPSIS","text":"<p><code>userclk [-hv] [-S &lt;segment&gt;] [-B &lt;bus&gt;] [-D &lt;device&gt;] [-F &lt;function&gt;] [PCI_ADDR] [-H &lt;User clock high frequency&gt;] -L &lt;User clock low frequency&gt;]</code></p>"},{"location":"host-attach-util/userclk/userclk/#description","title":"DESCRIPTION","text":"<p>userclk sets the frequency range for an AFU. </p>"},{"location":"host-attach-util/userclk/userclk/#examples","title":"EXAMPLES","text":"<p><code>./userclk -B 0x5e -H 400 -L 200</code></p> <p>Sets AFU frequency.</p>"},{"location":"host-attach-util/userclk/userclk/#options","title":"OPTIONS","text":"<p><code>-v,--version</code></p> <p>Prints version information and exits.</p> <p><code>-S,--segment</code> </p> <p>FPGA segment number.</p> <p><code>-B,--bus</code> </p> <p>FPGA Bus number.</p> <p><code>-D,--device</code> </p> <p>FPGA Device number.</p> <p><code>-F,--function</code> </p> <p>FPGA function number.</p> <p><code>-H,--freq-high</code> </p> <p>User clock high frequency. </p> <p><code>-L,--freq-low</code> </p> <p>User clock low frequency. </p> Date Intel Acceleration Stack Version Changes Made 2018.05.21 DCP 1.1 Beta (works with Quartus Prime Pro 17.1.1) Fixed typos."},{"location":"host-attach-util/vabtool/vabtool/","title":"vabtool","text":""},{"location":"host-attach-util/vabtool/vabtool/#synopsis","title":"SYNOPSIS","text":"<p><code>vabtool [-r RETRIES] [-d] [-y] [-v] &lt;ACTION&gt;</code></p> <p>Where ACTION is defined as one of the following:</p> <p><code>vabtool sr_key_provision PCIE_ADDRESS SR_RKH_FILE FPGA_IMG_FILE</code> <code>vabtool sr_status PCIE_ADDRESS</code> <code>vabtool pr_key_provision PCIE_ADDRESS PR_AUTH_CERT_FILE PR_RKH_FILE</code> <code>vabtool pr_status PCIE_ADDRESS</code> <code>vabtool sr_key_cancel PCIE_ADDRESS SR_RKH_CANCEL_FILE</code> <code>vabtool sr_cancel_status PCIE_ADDRESS</code> <code>vabtool pr_key_cancel PCIE_ADDRESS PR_RKH_CANCEL_FILE</code> <code>vabtool pr_cancel_status PCIE_ADDRESS</code></p>"},{"location":"host-attach-util/vabtool/vabtool/#description","title":"DESCRIPTION","text":"<p>The <code>vabtool</code> command helps perform Vendor Authenticated Boot provisioning of Static Region and Partial Reconfiguration Region key hashes and helps perform SR and PR hash cancellation and status reporting.</p>"},{"location":"host-attach-util/vabtool/vabtool/#options","title":"OPTIONS","text":"<p><code>-r RETRIES, --retries RETRIES</code></p> <pre><code>Specifies the number of times a failed SR or PR key provision is to be\nretried. The default value for RETRIES is 3.\n</code></pre> <p><code>-d, --dry-run</code></p> <pre><code>Don't execute the actual fpgasupdate and rsu commands, but only print\nthe commands that would be executed during a normal run of the script.\n</code></pre> <p><code>-y, --yes</code></p> <pre><code>The tool will respond with an automatic Yes answer to all confirmation\nprompts posed by the sub-tools.\n</code></pre> <p><code>-v, --version</code></p> <pre><code>Display script version information and exit.\n</code></pre>"},{"location":"host-attach-util/vabtool/vabtool/#examples","title":"EXAMPLES","text":"<p><code>sudo vabtool -y sr_key_provision 0000:bc:00.0 my_sr_rkh.bin my_fpga.bin</code> <code>sudo vabtool sr_status 0000:bc:00.0</code> <code>sudo vabtool -y pr_key_provision 0000:bc:00.0 pr_auth_cert.bin my_pr_rkh.bin</code> <code>sudo vabtool pr_status 0000:bc:00.0</code> <code>sudo vabtool sr_key_cancel 0000:bc:00.0 my_sr_rhk_cancel.bin</code> <code>sudo vabtool sr_cancel_status 0000:bc:00.0</code> <code>sudo vabtool pr_key_cancel 0000:bc:00.0 my_pr_rhk_cancel.bin</code> <code>sudo vabtool pr_cancel_status 0000:bc:00.0</code></p>"},{"location":"linux-dfl/dfl/dfl/","title":"Device Feature List Driver","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Stratix 10, Agilex 7</p>"},{"location":"linux-dfl/dfl/dfl/#introduction","title":"Introduction","text":"<p>This driver defines a feature list structure that creates a linked list of feature headers (DFHs) within the MMIO space to provide an extensible way of adding features for FPGA. The driver can walk through feature headers to enumerate feature devices (e.g. FPGA Management Engine, Port and Accelerator Function Unit) and their private features for FPGA devices that support the DFL structure. This linked list is then itself traversed and each feature/private feature is associated with a driver.</p> Driver Mapping Source(s) Required for DFL dfl.ko Device Feature List Driver drivers/fpga/dfl.c Y <p>An example DFL:</p> <p></p> <p>Also known as the DFL \"walker\", <code>dfl-ko</code> walks the DFL and instantiates other DFL-enabled drivers. The same driver is used on both host-attach and in HPS, assuming they are connected by either a soft or hard PCIe IP. The same DFL walker is used regardless of the chosen OFS attach method (PCIe Attach, Direct Attach). This driver is required for all DFL-enabled FPGA designs.</p> <p>The following chart visualizes DFL discovery:</p> <p></p>"},{"location":"linux-dfl/dfl/dfl/#driver-sources","title":"Driver Sources","text":"<p>The GitHub source code for this driver can be found at https://github.com/OFS/linux-dfl/blob/master/drivers/fpga/dfl.c</p> <p>The Upstream source code for this driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/fpga/dfl.c?h=master.</p>"},{"location":"linux-dfl/dfl/dfl/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Access PCIe BAR to create a linked list within MMIO for all DFL features</li> </ul>"},{"location":"linux-dfl/dfl/dfl/#kernel-configurations","title":"Kernel Configurations","text":"<p>FPGA_DFL</p> <p></p>"},{"location":"linux-dfl/dfl/dfl/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-dfl/dfl/dfl/#example-designs","title":"Example Designs","text":"<p>This driver is found in all DFL enabled OFS designs. Examples include the the FIM design for PCIe Attach supporting DFL, Stratix 10 PCIe Attach, and SoC Attach. Please refer to site for more information about these designs.</p>"},{"location":"linux-dfl/dfl/dfl/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-dfl/dfl_afu/dfl_afu/","title":"Accelerator Functional Unit (aka workload) Driver For Host Attach","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Stratix 10, Agilex 7</p>"},{"location":"linux-dfl/dfl_afu/dfl_afu/#introduction","title":"Introduction","text":"<p>This driver extends the capability of the Accelerator Functional Unit or application workload by implementing management features. You can connect to FPGA infrastructure through the AFU's port interface. An application layer, called Open Programmable Acceleration Engine (OPAE) is built on top of the AFU driver group and can directly communicate with the AFU port regardless of whether the workload sits in a partial reconfiguration region or not. The AFU driver is composed of 4 source files that define its core functionality.</p> Driver Mapping Source(s) Required or Optional DFL Driver? dfl-afu.ko AFU Driver drivers/fpga/dfl-afu.h Optional <p><code>dfl-afu-dma-region.c</code> (Upstream) provides DMA region management. It can pin/unpin pages in memory for transfers to occur, create/destroy/find DMA regions, and map/unmap regions of memory.</p> <p><code>dfl-afu-error.c</code> (Upstream) handles error reporting from the AFU / Port. It can mask/unmask port errors, clear errors, and show various errors associated with the AFU.</p> <p><code>dfl-afu-region.c</code> (Upstream) provides the portion of the driver responsible for MMIO Region Management. It can add/destroy MMIO regions, and find regions by offset or index.</p> <p><code>dfl-afu-main.c</code> (Upstream) handles management capabilities of the AFU / Port. It can enable/disable/reset AFU ports, open/close/probe access to AFU devices, and show the current state of the AFU's power consumption, <code>userclk</code> frequency, and AFU ID, and provides various other capabilities related to port management.</p>"},{"location":"linux-dfl/dfl_afu/dfl_afu/#accelerator-functional-unit","title":"Accelerator Functional Unit","text":"<p>The AFU region is the region where a user can put their custom application logic.  It can optionally contain a Partial Reconfiguration region for dynamic workload updates.</p> <p></p>"},{"location":"linux-dfl/dfl_afu/dfl_afu/#driver-sources","title":"Driver Sources","text":"<p>The GitHub source code for this driver can be found at https://github.com/OFS/linux-dfl/tree/master/drivers/fpga.</p> <p>The Upstream source code for this driver can be found at [(https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/fpga?h=master]((https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/fpga?h=master).</p>"},{"location":"linux-dfl/dfl_afu/dfl_afu/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Create AFU MMIO Regions, DMAs</li> <li>Report on AFU related errors</li> <li>Create Memory Mappings and pin memory between device and host</li> </ul>"},{"location":"linux-dfl/dfl_afu/dfl_afu/#kernel-configurations","title":"Kernel Configurations","text":"<p>FPGA_DFL_AFU</p> <p></p>"},{"location":"linux-dfl/dfl_afu/dfl_afu/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-dfl/dfl_afu/dfl_afu/#example-designs","title":"Example Designs","text":"<p>This driver is found in all DFL enabled OFS designs that support an AFU region. Examples include the the FIM design for PCIe Attach supporting DFL, Stratix 10 PCIe Attach, and SoC Attach. Please refer to site for more information about these designs.</p>"},{"location":"linux-dfl/dfl_afu/dfl_afu/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-dfl/dfl_emif/dfl_emif/","title":"Host Attach Memory Subsystem IP Driver","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Stratix 10, Agilex 7</p>"},{"location":"linux-dfl/dfl_emif/dfl_emif/#introduction","title":"Introduction","text":"<p>This driver is for the Memory Subsystem IP private feature implemented under FPGA Device Feature List (DFL) framework. It is used to expose memory interface status information as well as memory clearing control.</p> Driver Mapping Source(s) Required or Optional DFL Driver? dfl-emif.ko FPGA DFL EMIF Driver drivers/memory/dfl-emif.c Optional"},{"location":"linux-dfl/dfl_emif/dfl_emif/#agilex-7-f-series-and-i-series-fpga-memory-subsystem-ip","title":"Agilex 7 F-Series and I-Series FPGA Memory Subsystem IP","text":"<p>The memory subsystem IP is a high-level solution on top of the External Memory Interfaces Agilex\u00ae 7 FPGA IP, providing an easy way to instantiate up to 8 external memory interfaces (EMIFs) with application-level optimizations.  The memory subsystem IP provides the following components:</p> <ul> <li>Up to 8 lookup IP instances.</li> <li>Up to 8 EMIF instances.</li> <li>A memory controller that implements all the memory commands and protocol-level requirements.</li> <li>A soft logic adapter to boost memory throughput by traffic shaping.</li> </ul> <p>The memory subsystem supports DDR4 and DIMMs. For more information about this IP, please refer to the Agilex 7 F-Series and I-Series FPGA Memory Subsystem IP User Guide.</p> <p></p>"},{"location":"linux-dfl/dfl_emif/dfl_emif/#stratix-10-external-memory-interface","title":"Stratix 10 External Memory Interface","text":"<p>The External Memory Interfaces Stratix 10 FPGA IP provides an physical later interface which builds the data path and manages timing transfers between the FPGA and the memory device.  It also includes a memory controller which implements all the memory commands and protocol level requirements.  This IP supports a variety of memory types including DDR4, QDR-IV and DIMMs.</p>"},{"location":"linux-dfl/dfl_emif/dfl_emif/#driver-sources","title":"Driver Sources","text":"<p>The GitHub source code for this driver can be found at https://github.com/OFS/linux-dfl/blob/master/drivers/memory/dfl-emif.c#L4</p> <p>The Upstream source code for this driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/memory/dfl-emif.c?h=master.</p>"},{"location":"linux-dfl/dfl_emif/dfl_emif/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Access status of memory calibration</li> <li>Memory clearing control</li> </ul>"},{"location":"linux-dfl/dfl_emif/dfl_emif/#kernel-configurations","title":"Kernel Configurations","text":"<p>FPGA_DFL_EMIF</p> <p></p>"},{"location":"linux-dfl/dfl_emif/dfl_emif/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-dfl/dfl_emif/dfl_emif/#example-designs","title":"Example Designs","text":"<p>This driver is used in the PCIe Attach shell designs for Agilex 7 and in the PCIe Attach shell design for Stratix 10 FPGA.  Please refer to the Open FPGA Documentation site for more information about these designs.</p>"},{"location":"linux-dfl/dfl_emif/dfl_emif/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-dfl/dfl_fme/dfl_fme/","title":"Host Attach DFL FPGA Management Engine IP Driver","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Stratix 10, Agilex 7</p>"},{"location":"linux-dfl/dfl_fme/dfl_fme/#introduction","title":"Introduction","text":"<p>This set of drivers is designed to support FME functionality, as implemented under FPGA Device Feature List (DFL) framework. It is used to expose FME capabilities.</p> Driver Mapping Source(s) Required for DFL dfl-fme.ko FPGA Management Engine IP drivers/fpga/ - dfl-fme.h, dfl-fme-main.c, dfl-fme-pr.c, dfl-fme-error.c, dfl-fme-perf.c Y dfl-fme-mgr.ko PR IP drivers/fpga/dfl-fme-mgr.c N dfl-fme-br.ko SW Dependency drivers/fpga/dfl-fme-br.c N dfl-fme-region.ko SW Dependency drivers/fpga/dfl-fme-region.c N <pre><code>graph TD;\n    A[dfl-fme]--&gt;B[dfl-fme-mgr];\n    A[dfl-fme]--&gt;C[dfl-fme-br];\n    A[dfl-fme]--&gt;D[dfl-fme-region]; </code></pre>"},{"location":"linux-dfl/dfl_fme/dfl_fme/#fpga-management-engine-ip","title":"FPGA Management Engine IP","text":"<p>The FPGA Management Engine IP provides management features for the platform and controls reset and loading of the AFU into the partial reconfiguration region of the FPGA. Implementation of a PR region is optional.</p> <p>Each FME feature exposes its capability to host software drivers through a device feature header (DFH) register found at the beginning of its control status register (CSR) space. The FME CSR maps to physical function 0 (PF0) Base address register 0 (BAR0) so that software can access it through a single PCIe link. For more information about DFHs, refer to the Device Feature Header (DFH) structure.</p>"},{"location":"linux-dfl/dfl_fme/dfl_fme/#driver-sources","title":"Driver Sources","text":"<p>The GitHub source code for these drivers can be found at https://github.com/OFS/linux-dfl/tree/master/drivers/fpga, where branches labelled fpga-ofs-dev-*-lts correspond with the latest developmental versions of the DFL driver suite on that specific kernel version.</p> <p>The Upstream source code for this driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/drivers/fpga?h=master.</p>"},{"location":"linux-dfl/dfl_fme/dfl_fme/#driver-capabilities","title":"Driver Capabilities","text":"<p>This driver set is a DFL specific implementation of generic FPGA drivers available in the kernel. <code>dfl-fme-mgr</code> is a DFL specific instantiation of the generic FPGA manager (drivers/linux/fpga/fpga-mgr.c), <code>dfl-fme-br</code> builds on top of a generic FPGA bridge (drivers/fpga/fpga-bridge.c), and <code>dfl-fme-region</code> instantiates an FPGA region. All three supplementary DFL Drivers depend on <code>dfl-fme</code>.</p> <p>The DFL FME driver is a feature device implemented under the Device Feature List (DFL) framework. It enables the platform driver for the FME IP and implements all FPGA platform level management features. Only one FME is created per DFL based FPGA device. The DFL Bridge, Manager, and Region drivers are only required when attempting to configure a PR region in the FIM.</p>"},{"location":"linux-dfl/dfl_fme/dfl_fme/#kernel-configurations","title":"Kernel Configurations","text":"<p>FPGA_DFL_FME</p> <p></p> <p>FPGA_DFL_FME_MGR</p> <p></p> <p>FPGA_DFL_FME_BRIDGE</p> <p></p> <p>FPGA_DFL_FME_REGION</p> <p></p>"},{"location":"linux-dfl/dfl_fme/dfl_fme/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-dfl/dfl_fme/dfl_fme/#example-designs","title":"Example Designs","text":"<p>The FPGA Management Engine IP is included as a part of the FIM design for PCIe Attach supporting DFL, Stratix 10 PCIe Attach, and SoC Attach. Please refer to site for more information about these designs.</p>"},{"location":"linux-dfl/dfl_fme/dfl_fme/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-dfl/dfl_n3000_nios/dfl_n3000_nios/","title":"FPGA DFL NIOS Driver for Intel PAC N3000","text":"<p>Upstream Status: Upstreamed</p> <p>Devices supported: Arria 10 GX</p>"},{"location":"linux-dfl/dfl_n3000_nios/dfl_n3000_nios/#introduction","title":"Introduction","text":"<p>This is the driver for the N3000 Nios private feature on Intel PAC (Programmable Acceleration Card) N3000. It communicates with the embedded Nios processor to configure the retimers on the card. It also instantiates the SPI master (spi-altera) for the card's BMC (Board Management Controller). It matches and probes based on the Nios private feature node on a DFL from an Intel N3000 device. This driver also depends on the generic DFL driver.</p> Driver Mapping Source(s) Required for DFL dfl-n3000-nios.ko FPGA DFL NIOS Driver for Intel PAC N3000 drivers/fpga/dfl-n3000-nios.c N"},{"location":"linux-dfl/dfl_n3000_nios/dfl_n3000_nios/#driver-sources","title":"Driver Sources","text":"<p>The GitHub source code for this driver can be found at https://github.com/OFS/linux-dfl/blob/master/drivers/fpga/dfl-n3000-nios.c#L4.</p> <p>The Upstream source code for this driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/fpga/dfl-n3000-nios.c.</p>"},{"location":"linux-dfl/dfl_n3000_nios/dfl_n3000_nios/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Instantiate the SPI interface for an N3000</li> <li>Communicate with N3000 retimers</li> </ul>"},{"location":"linux-dfl/dfl_n3000_nios/dfl_n3000_nios/#kernel-configurations","title":"Kernel Configurations","text":"<p>FPGA_DFL_NIOS_INTEL_PAC_N3000</p> <p></p>"},{"location":"linux-dfl/dfl_n3000_nios/dfl_n3000_nios/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-dfl/dfl_n3000_nios/dfl_n3000_nios/#example-designs","title":"Example Designs","text":"<p>N/A</p>"},{"location":"linux-dfl/dfl_n3000_nios/dfl_n3000_nios/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-dfl/dfl_pci/dfl_pci/","title":"DFL PCI Express Subsystem IP Driver","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Stratix 10, Agilex 7</p>"},{"location":"linux-dfl/dfl_pci/dfl_pci/#introduction","title":"Introduction","text":"<p>This driver enables PCIe functionality for PCIe based FPGA solutions that implement the DFL. This driver provides interfaces for user-space applications to configure, enumerate, open and access FPGA accelerators on the FPGA DFL devices, enables system level management functions such as FPGA partial reconfiguration, power management and virtualization with DFL framework.</p> <p>The <code>dfl-pci</code> driver is a DFL specific instantiation of the generic <code>pci.ko</code> driver.</p> Driver Mapping Source(s) Required for DFL dfl-pci.ko FPGA DFL PCIe Device Driver drivers/fpga/dfl-pci.c Y"},{"location":"linux-dfl/dfl_pci/dfl_pci/#agilex-7-pcie-susbystem","title":"Agilex 7 PCIe Susbystem","text":"<p>The PCIe Subsystem is one of three subsystems supported by the OFS FIM. It contains configuration registers for the Vendor, Device and Subsystem Vendor IDs. These registers are used in PCIe add-in cards to uniquely identify the card for assignment to software drivers.</p> <p>The host-side PCIe SS supports PCIe Gen 4x16 speeds using an AXI-ST Data mover interface across a hardened P-Tile. Is natively supports multiple configurations - including 2 PFs, and 1 PF with multiple VFs. It contains optional support for DMA engines and Single-root I/O Virtualization (SR-IOV). Full documentation on the FPGA IP Subsystem for PCI Express IP User Guide can be found on the Open FPGA Stack Git site.</p>"},{"location":"linux-dfl/dfl_pci/dfl_pci/#driver-sources","title":"Driver Sources","text":"<p>The GitHub source code for this driver can be found at https://github.com/OFS/linux-dfl/blob/master/drivers/fpga/dfl-pci.c.</p> <p>The Upstream source code for this driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/fpga/dfl-pci.c?h=master.</p>"},{"location":"linux-dfl/dfl_pci/dfl_pci/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Initialize DFL-enabled PCIe SS instances</li> <li>Probe for DFLs in PCIe BAR space, and enumerate their features</li> <li>Configure SR-IOV</li> </ul>"},{"location":"linux-dfl/dfl_pci/dfl_pci/#kernel-configurations","title":"Kernel Configurations","text":"<p>FPGA_DFL_PCI</p> <p></p>"},{"location":"linux-dfl/dfl_pci/dfl_pci/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-dfl/dfl_pci/dfl_pci/#example-designs","title":"Example Designs","text":"<p>The PCIe SS is included as a part of the FIM design for PCIe Attach supporting DFL, Stratix 10 PCIe Attach, and SoC Attach. Please refer to site for more information about these designs.</p>"},{"location":"linux-dfl/dfl_pci/dfl_pci/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-dfl/intel_m10_bmc_core/intel_m10_bmc_core/","title":"Max\u00ae 10 Board Management Controller Driver","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <ul> <li><code>intel-m10-bmc-log</code> is not upstreamed.</li> </ul> <p>Devices supported: Stratix 10, Agilex 7</p>"},{"location":"linux-dfl/intel_m10_bmc_core/intel_m10_bmc_core/#introduction","title":"Introduction","text":"<p>This driver is designed to support the core functionality of the Max 10 Board Management Controller. It provides support for accessing the BMC, and supports all operations that are in turn supported by the BMC itself including configuring non-volatile FPGA flash, reading telemetry data, and remotely updating the FPGA and BMC images.</p> Driver Mapping Source(s) Required for DFL intel-m10-bmc-core.ko MAX 10 Board Management Controller drivers/mfd/intel-m10-bmc-core.c N intel-m10-bmc-pmci.ko MAX 10 Board Management Controller with PMCI drivers/mfd/intel-m10-bmc-pmci.c N intel-m10-bmc-spi.ko MAX 10 Board Management Controller with SPI drivers/mfd/intel-m10-bmc-spi.c N intel-m10-bmc-sec-update.ko MAX10 BMC Secure Update driver drivers/fpga/intel-m10-bmc-sec-update.c N intel-m10-bmc-hwmon.ko MAX10 BMC Hardware Monitoring drivers/hwmon/intel-m10-bmc-hwmon.c N <pre><code>graph TD;\n    A[intel-m10-bmc-core]--&gt;B[intel-m10-bmc-spi] \n    A[intel-m10-bmc-core]--&gt;C[intel-m10-bmc-pmci]\n    A[intel-m10-bmc-core]--&gt;E[intel-m10-bmc-hwmon]\n    A[intel-m10-bmc-core]--&gt;F[intel-m10-bmc-sec-update]</code></pre> <p><code>intel-m10-bmc-core</code> provides common code for the Board Management Controller chip. It polls the M10 handshake register, can access and update BMC CSRs, display version information, and read MAC statistics.</p> <p>Either <code>intel-m10-bmc-spi</code> or <code>intel-m10-bmc-pmci</code> are required for a given BMC, depending on which communication standard is supported by the board as provide by its DFH. D5005 uses SPI, Agilex 7 devices use PMCI. Both of these drivers assist in communicating across the connection between the FPGA fabric and the Max 10 by acting as a master device. As the SPI master the driver will covert SPI messages to Avalon transactions. Both drivers consume the common code present in <code>intel-m10-bmc-core</code>.</p> <p><code>intel-m10-bmc-hwmon</code> hooks into the generic Linux <code>hwmon</code> framework already present in the Kernel and instantiations the Max 10 BMC instance. This includes support for all on-board sensors for voltage, current, and temperature.</p>"},{"location":"linux-dfl/intel_m10_bmc_core/intel_m10_bmc_core/#board-management-controller","title":"Board Management Controller","text":"<p>The Board Management Controller (BMC) supports features such as board power management, flash management, configuration management, and board telemetry monitoring and protection. The majority of the BMC logic is in a separate Max\u00ae 10 device; a small portion of the BMC known as the PMCI resides in the main Agilex FPGA.</p>"},{"location":"linux-dfl/intel_m10_bmc_core/intel_m10_bmc_core/#driver-sources","title":"Driver Sources","text":"<p>The GitHub source code for this driver suite can be found at https://github.com/OFS/linux-dfl/blob/master/drivers/, and under the <code>fpga</code>, <code>mfd</code>, and <code>hwmon</code> directories.</p> <p>The Upstream source code for this driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/mfd?h=master.</p>"},{"location":"linux-dfl/intel_m10_bmc_core/intel_m10_bmc_core/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Communicate with BMC handshake register, issue supported commands</li> <li>Read / write to BMC attached flash</li> <li>Register on-board sensors with kernel hwmon framework</li> </ul>"},{"location":"linux-dfl/intel_m10_bmc_core/intel_m10_bmc_core/#kernel-configurations","title":"Kernel Configurations","text":"<p>MFD_INTEL_M10_BMC_CORE</p> <p></p> <p>MFD_INTEL_M10_BMC_SPI</p> <p></p> <p>MFD_INTEL_M10_BMC_PMCI</p> <p></p> <p>FPGA_M10_BMC_SEC_UPDATE</p> <p></p> <p>SENSORS_INTEL_M10_BMC_HWMON</p> <p></p>"},{"location":"linux-dfl/intel_m10_bmc_core/intel_m10_bmc_core/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-dfl/intel_m10_bmc_core/intel_m10_bmc_core/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-dfl/intel_s10_phy/intel_s10_phy/","title":"Intel HSSI configurable ethernet phy driver","text":"<p>Upstream Status: Not Upstreamed</p> <p>Devices supported: Stratix 10</p>"},{"location":"linux-dfl/intel_s10_phy/intel_s10_phy/#introduction","title":"Introduction","text":"<p>This is the Intel HSSI configurable ethernet phy driver. It provides the ability to view and change some of the transceiver tuner parameters for a QSFP interface on legacy D5005 designs.</p> Driver Mapping Source(s) Required for DFL intel-s10-phy.ko Intel HSSI configurable ethernet phy driver drivers/net/phy/intel-s10-phy.c N"},{"location":"linux-dfl/intel_s10_phy/intel_s10_phy/#driver-sources","title":"Driver Sources","text":"<p>The GitHub source code for this driver can be found at https://github.com/OFS/linux-dfl/blob/fpga-ofs-dev-6.1-lts/drivers/net/phy/intel-s10-phy.c.</p>"},{"location":"linux-dfl/intel_s10_phy/intel_s10_phy/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Read and write XCVR status and statistics</li> </ul>"},{"location":"linux-dfl/intel_s10_phy/intel_s10_phy/#kernel-configurations","title":"Kernel Configurations","text":"<p>INTEL_S10_PHY</p> <p></p>"},{"location":"linux-dfl/intel_s10_phy/intel_s10_phy/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-dfl/intel_s10_phy/intel_s10_phy/#example-designs","title":"Example Designs","text":"<p>N/A</p>"},{"location":"linux-dfl/intel_s10_phy/intel_s10_phy/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-dfl/ptp_dfl_tod/ptp_dfl_tod/","title":"Ethernet IEEE 1588 Time of Day Clock FPGA IP Driver for Host Attach","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p>"},{"location":"linux-dfl/ptp_dfl_tod/ptp_dfl_tod/#introduction","title":"Introduction","text":"<p>This page provides an overview of the Time-of-day driver for the Time of Day Clock FPGA IP that is used in the 1588PTP Design examples.  The Time of Day Clock FPGA IP is exposed as PTP Hardware Clock (PHC) device to the Linux PTP stack to synchronize the system clock to its ToD information using phc2sys utility of the Linux PTP stack.</p>"},{"location":"linux-dfl/ptp_dfl_tod/ptp_dfl_tod/#time-of-day-clock-fpga-ip","title":"Time of Day Clock FPGA IP","text":"<p>The Time-of-day (TOD) Clock streams 96-bit and 64-bit time-of-day to one or more timestamping units in an IEEE 1588v2 solution. For information regarding this soft IP core, please refer to the Ethernet Design Example Components User Guide.</p> <p></p>"},{"location":"linux-dfl/ptp_dfl_tod/ptp_dfl_tod/#driver-sources","title":"Driver Sources","text":"<p>The GitHub source code for this driver can be found at https://github.com/OFS/linux-dfl/blob/master/drivers/ptp/ptp_dfl_tod.c.</p> <p>The Upstream source code for this driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/ptp/ptp_dfl_tod.c?h=master.</p>"},{"location":"linux-dfl/ptp_dfl_tod/ptp_dfl_tod/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Reads and writes time in Time of Day timestamp registers.</li> <li>Performs fine and course clock offset adjustment.</li> <li>Periodic time drift adjustment.</li> <li>Only tested on Host attach Agilex 7</li> </ul>"},{"location":"linux-dfl/ptp_dfl_tod/ptp_dfl_tod/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_PTP_DFL_TOD</p> <p></p>"},{"location":"linux-dfl/ptp_dfl_tod/ptp_dfl_tod/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-dfl/ptp_dfl_tod/ptp_dfl_tod/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-dfl/qsfp_mem_dfl/qsfp_mem_dfl/","title":"Memory Based QSFP Support Driver for Host Attach","text":"<p>Upstream Status: Not Upstreamed</p> <p>Devices supported: Stratix 10, Arria 10 GX</p>"},{"location":"linux-dfl/qsfp_mem_dfl/qsfp_mem_dfl/#introduction","title":"Introduction","text":"<p>This legacy driver builds on top of the QSFP Module and Ethernet IP drivers and enables them in a DFL design. This DFL-based driver will shadow the QSFP module's memory pages in memory. It leverages the core driver code from <code>qsfp-mem-core.ko</code>.</p> Driver Mapping Source(s) Required for DFL qsfp-mem-dfl.ko Memory Based QSFP Support for DFL drivers/net/phy/qsfp-mem-dfl.c N qsfp-mem-platform.ko Memory based QSFP support drivers/net/phy/qsfp-mem-platform.c N qsfp-mem-core.ko Memory based QSFP support drivers/net/phy/qsfp-mem-core.c N <pre><code>graph TD;\n    A[regmap-mmio]--&gt;B[qsfp-mem-core];\n    B[qsfp-mem-core]--&gt;C[qsfp-mem-platform];\n    B[qsfp-mem-core]--&gt;D[qsfp-mem-dfl];</code></pre>"},{"location":"linux-dfl/qsfp_mem_dfl/qsfp_mem_dfl/#driver-sources","title":"Driver Sources","text":"<p>The GitHub source code for this driver can be found at https://github.com/OFS/linux-dfl/tree/fpga-ofs-dev-6.1-lts/drivers/net/phy.</p>"},{"location":"linux-dfl/qsfp_mem_dfl/qsfp_mem_dfl/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Probe and match the corresponding DFL Device</li> <li>Init a QSFP Device</li> <li>Send data over I2C</li> </ul>"},{"location":"linux-dfl/qsfp_mem_dfl/qsfp_mem_dfl/#kernel-configurations","title":"Kernel Configurations","text":"<p>QSFP_MEM_CORE</p> <p></p> <p>QSFP_MEM</p> <p></p> <p>QSFP_MEM_DFL</p> <p></p>"},{"location":"linux-dfl/qsfp_mem_dfl/qsfp_mem_dfl/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-dfl/qsfp_mem_dfl/qsfp_mem_dfl/#example-designs","title":"Example Designs","text":"<p>N/A</p>"},{"location":"linux-dfl/qsfp_mem_dfl/qsfp_mem_dfl/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-dfl/s10hssi/s10hssi/","title":"Control Plane Driver for Stratix 10 HSSI","text":"<p>Upstream Status: Not Upstreamed</p> <p>Devices supported: Stratix 10</p>"},{"location":"linux-dfl/s10hssi/s10hssi/#introduction","title":"Introduction","text":"<p>This driver provides control plane support for a Stratix 10 High Speed Serial Interface. The Stratix 10 High Speed Serial Interface provides a data path between the FPGA and the external QSFP interfaces. This data path does not involve packets transferred between host memory and the fpga. As such a very limited set of networking functionality is provided.</p> Driver Mapping Source(s) Required for DFL s10hssi.ko Control Plane Driver for Stratix 10 HSSI drivers/net/ethernet/s10hssi.c N"},{"location":"linux-dfl/s10hssi/s10hssi/#driver-sources","title":"Driver Sources","text":"<p>The GitHub source code for this driver can be found at https://github.com/OFS/linux-dfl/blob/fpga-ofs-dev-6.1-lts/drivers/net/ethernet/intel/s10hssi.c.</p>"},{"location":"linux-dfl/s10hssi/s10hssi/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Read and write XCVR status and statistics</li> <li>Set MAC address</li> <li>Enable loopback</li> </ul>"},{"location":"linux-dfl/s10hssi/s10hssi/#kernel-configurations","title":"Kernel Configurations","text":"<p>S10HSSI</p> <p></p>"},{"location":"linux-dfl/s10hssi/s10hssi/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-dfl/s10hssi/s10hssi/#example-designs","title":"Example Designs","text":"<p>N/A</p>"},{"location":"linux-dfl/s10hssi/s10hssi/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-dfl/spi_altera_dfl/spi_altera_dfl/","title":"Generic Serial Flash Interface Intel FPGA IP Driver","text":"<p>Upstream Status: Upstreamed</p> <p>Devices supported: Stratix 10, Agilex 7</p>"},{"location":"linux-dfl/spi_altera_dfl/spi_altera_dfl/#introduction","title":"Introduction","text":"<p>This driver is the DFL specific implementation of the Generic Serial Flash Interface Intel FPGA IP driver, which provides access to Serial Peripheral Interface (SPI) flash devices. This is a DFL bus driver for the Altera SPI master controller, which is connected to a SPI slave to Avalon bridge in an Intel Max10 BMC. It handles the probing for available DFL-enabled SPI devices, will initialize any discovered SPI devices, and allows you to read and write over an available interface. The driver supports writing both Configuration memory (configuration data for Active Serial configuration schemes) and General purpose memory. Generic Serial Flash Interface Intel\u00ae FPGA IP User Guide. This driver also depends on the generic DFL driver.</p> Driver Mapping Source(s) Required for DFL spi-altera-core.ko Altera SPI Controller core code drivers/spi/spi-altera-core.c N spi-altera-platform.ko Device Feature List Driver drivers/spi/spi-altera-platform.c N spi-altera-dfl.ko Device Feature List Driver drivers/spi/spi-altera-dfl.c N <pre><code>graph TD;\n    A[spi-altera-core]--&gt;B[spi-altera-platform];\n    A[spi-altera-core]--&gt;C[spi-altera-dfl];\n    D[dfl]--&gt;C[spi-altera-dfl]; </code></pre>"},{"location":"linux-dfl/spi_altera_dfl/spi_altera_dfl/#driver-sources","title":"Driver Sources","text":"<p>The GitHub source code for this driver can be found at https://github.com/OFS/linux-dfl/tree/master/drivers/spi.</p> <p>The Upstream source code for this driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/fpga/dfl.c?h=master.</p>"},{"location":"linux-dfl/spi_altera_dfl/spi_altera_dfl/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Match and probe DFL-enabled SPI interfaces on the DFL</li> <li>Read / write into memory over a given interface</li> </ul>"},{"location":"linux-dfl/spi_altera_dfl/spi_altera_dfl/#kernel-configurations","title":"Kernel Configurations","text":"<p>SPI_ALTERA</p> <p></p> <p>SPI_ALTERA_CORE</p> <p></p> <p>SPI_ALTERA_DFL</p> <p></p>"},{"location":"linux-dfl/spi_altera_dfl/spi_altera_dfl/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-dfl/spi_altera_dfl/spi_altera_dfl/#example-designs","title":"Example Designs","text":"<p>This driver is found in all DFL enabled OFS designs. Examples include the the FIM design for PCIe Attach supporting DFL, Stratix 10 PCIe Attach, and SoC Attach. Please refer to site for more information about these designs.</p>"},{"location":"linux-dfl/spi_altera_dfl/spi_altera_dfl/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-dfl/uart_16550/uart_16550/","title":"Altera 16550 Compatible UART Core Driver for Host Attach","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p>"},{"location":"linux-dfl/uart_16550/uart_16550/#introduction","title":"Introduction","text":"<p>This driver for the 16550 Compatible UART Core to establish TTY communications to FPGA through PCIe.</p>"},{"location":"linux-dfl/uart_16550/uart_16550/#16550-compatible-uart-core","title":"16550 Compatible UART Core","text":"<p>The 16550 UART (Universal Asynchronous Receiver/Transmitter) soft IP core with Avalon\u00ae interface is designed to be register space compatible with the de-facto standard 16550 found in the PC industry. The core provides RS-232 Signaling interface, False start detection, Modem control signal and registers, Receiver error detection and Break character generation/detection. The core also has an Avalon\u00ae Memory-Mapped ( Avalon\u00ae -MM) agent interface that allows Avalon\u00ae -MM host peripherals (such as Nios\u00ae II and Nios\u00ae V processors) to communicate with the core simply by reading and writing control and data registers. For information regarding this soft IP core, please refer to the Embedded Peripherals IP User Guide.</p> <p></p>"},{"location":"linux-dfl/uart_16550/uart_16550/#driver-sources","title":"Driver Sources","text":"<p>The GitHub source code for this driver can be found at https://github.com/OFS/linux-dfl/blob/master/drivers/tty/serial/8250/8250_dfl.c.</p> <p>The Upstream source code for this driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/tty/serial/8250/8250_dfl.c?h=master.</p>"},{"location":"linux-dfl/uart_16550/uart_16550/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Establishes serial connection with FPGA.</li> </ul>"},{"location":"linux-dfl/uart_16550/uart_16550/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_SERIAL_8250_DFL</p> <p></p>"},{"location":"linux-dfl/uart_16550/uart_16550/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-dfl/uart_16550/uart_16550/#example-designs","title":"Example Designs","text":"<p>This driver is used in the PCIe Attach shell designs for Agilex 7.  Please refer to site for more information about these designs.</p>"},{"location":"linux-dfl/uart_16550/uart_16550/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-dfl/uio_dfl/uio_dfl/","title":"Generic DFL driver for Userspace I/O devices","text":"<p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 7, Stratix 10</p>"},{"location":"linux-dfl/uio_dfl/uio_dfl/#introduction","title":"Introduction","text":"<p>This DFL based driver provides direct access to DFL devices from userspace. A sample userspace application using this driver is available for download in a git repository: git clone https://github.com/OPAE/opae-sdk.git It can be found at: opae-sdk/libraries/libopaeuio/.</p> Driver Mapping Source(s) Required for DFL uio_dfl.ko Generic DFL driver for Userspace I/O devices drivers/uio/uio_dfl.c Y <pre><code>graph TD;\n    A[uio]--&gt;C[uio-dfl];\n    B[dfl]--&gt;C[uio-dfl];</code></pre>"},{"location":"linux-dfl/uio_dfl/uio_dfl/#driver-sources","title":"Driver Sources","text":"<p>The GitHub source code for this driver can be found at https://github.com/OFS/linux-dfl/blob/master/drivers/uio/uio_dfl.c.</p> <p>The Upstream source code for this driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/uio/uio_dfl.c.</p>"},{"location":"linux-dfl/uio_dfl/uio_dfl/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Probe and match DFL UIO device(s)</li> </ul>"},{"location":"linux-dfl/uio_dfl/uio_dfl/#kernel-configurations","title":"Kernel Configurations","text":"<p>UIO_DFL</p> <p></p>"},{"location":"linux-dfl/uio_dfl/uio_dfl/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-dfl/uio_dfl/uio_dfl/#example-designs","title":"Example Designs","text":"<p>N/A</p>"},{"location":"linux-dfl/uio_dfl/uio_dfl/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/apb_timers/apb_timers/","title":"General-Purpose Timers Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Device Supported: Agilex 5 , Agilex 7</p>"},{"location":"linux-embedded/apb_timers/apb_timers/#introduction","title":"Introduction","text":"<p>The Hard Processor System (HPS) provides four 32-bit general-purpose timers connected to the level 4 (L4) peripheral bus. The timers optionally generate an interrupt when the 32-bit binary count-down timer reaches zero.</p> <p>For more information please refer to the Intel Agilex 5 Hard Processor System Technical Reference Manual.</p> <p></p>"},{"location":"linux-embedded/apb_timers/apb_timers/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/clocksource/dw_apb_timer.c.</p>"},{"location":"linux-embedded/apb_timers/apb_timers/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Supports interrupt generation</li> <li>Supports free-running mode</li> <li>Supports user-defined count mode</li> </ul>"},{"location":"linux-embedded/apb_timers/apb_timers/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_DW_APB_TIMER</p> <p></p>"},{"location":"linux-embedded/apb_timers/apb_timers/#device-tree","title":"Device Tree","text":"<p>Example Device tree location:</p> <p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/arm64/boot/dts/intel/socfpga_agilex5.dtsi</p> <p></p>"},{"location":"linux-embedded/apb_timers/apb_timers/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-embedded/apb_timers/apb_timers/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/clock_manager/clock_manager/","title":"Clock Manager Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: No</p> <p>Devices supported: Agilex 5</p>"},{"location":"linux-embedded/clock_manager/clock_manager/#introduction","title":"Introduction","text":"<p>Hard Processor System (HPS) clock generation is centralized in the clock manager. The clock manager is responsible for providing software-programmable clock control to configure all clocks generated in the HPS. Clocks are organized into clock groups.</p> <p>A clock group is a set of clock signals that originate from the same clock source which may be synchronous to each other. The Clock Manager has a two Phase-Locked Loop (PLL) clock group where the clock source is a common PLL voltage-controlled oscillator (VCO). A clock group which is independent and asynchronous to other clocks may only have a single clock, also known as clock slice. Peripheral clocks are a group of independent clock slices.</p> <p>For more information please refer to the Intel Agilex 5 Hard Processor System Technical Reference Manual.</p> <p></p>"},{"location":"linux-embedded/clock_manager/clock_manager/#features","title":"Features","text":"<ul> <li>Generates and manages clocks in the HPS.</li> <li>Contains two flexible PLL blocks Main PLL and Peripheral PLL.</li> <li>Generates clock gate controls for enabling and disabling most of the clocks.</li> <li>Allows software to program clock characteristics.</li> <li>Supports interrupting the Cortex-A53 MPCore on PLL-lock and loss-of-lock.</li> </ul>"},{"location":"linux-embedded/clock_manager/clock_manager/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://github.com/altera-opensource/linux-socfpga/blob/socfpga-6.1.55-lts/drivers/clk/socfpga/clk-agilex5.c.</p>"},{"location":"linux-embedded/clock_manager/clock_manager/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Support to configure peripherals clock through common clock framework.</li> <li>Support to enable or disable software-managed clocks.</li> </ul>"},{"location":"linux-embedded/clock_manager/clock_manager/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_CLK_INTEL_SOCFPGA64</p> <p></p>"},{"location":"linux-embedded/clock_manager/clock_manager/#device-tree","title":"Device Tree","text":"<p>Example Device tree location:</p> <p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/arm64/boot/dts/intel/socfpga_agilex5.dtsi</p> <p></p> <p>Also dt-bindings can be found at:</p> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-6.1.55-lts/include/dt-bindings/clock/agilex5-clock.h</p>"},{"location":"linux-embedded/clock_manager/clock_manager/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-embedded/clock_manager/clock_manager/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/dma/dma/","title":"Direct Memory Access Controller (DMAC) Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"linux-embedded/dma/dma/#introduction","title":"Introduction","text":"<p>The DMAC driver supports two DMACs with a maximum of four channels each. This driver transfers data between memory and peripherals and other memory locations in the system.</p>"},{"location":"linux-embedded/dma/dma/#hps-direct-memory-access-controller-dmac","title":"HPS Direct Memory Access Controller (DMAC)","text":"<p>The DMAC is part of the Hard Processor System (HPS) of the FPGA.  The HPS provides two DMACs to handle the data transfer between memory-mapped peripherals and memories, off-loading this work from the MPU system complex. Some common features are listed below.</p> <ul> <li>Software programmable with dedicated register field</li> <li>Supports multiple transfer types</li> <li>Each DMAC channels supports four channels</li> <li>Each DMAC supports interrupt interface to the Generic Interrupt Controller (GIC)</li> <li>Supports up to 48 peripheral request interfaces</li> </ul> <p></p> <p>For more information please refer to the following guide: Agilex 5 Hard Processor System Technical Reference Manual</p>"},{"location":"linux-embedded/dma/dma/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at</p> <p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/dma/dw-axi-dmac/dw-axi-dmac-platform.c</p>"},{"location":"linux-embedded/dma/dma/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>DMA bus width configuration</li> <li>Transaction configuration</li> <li>Interrupt control and handling</li> </ul>"},{"location":"linux-embedded/dma/dma/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_DW_AXI_DMAC</p> <p></p>"},{"location":"linux-embedded/dma/dma/#device-tree","title":"Device Tree","text":"<p>Example Device tree location to configure the dma: https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/arm64/boot/dts/intel/socfpga_agilex5.dtsi</p> <p></p>"},{"location":"linux-embedded/dma/dma/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-embedded/dma/dma/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/edac/edac/","title":"Error Detection and Correction (EDAC) Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"linux-embedded/edac/edac/#introduction","title":"Introduction","text":"<p>The Error Detection and Correction (EDAC) driver supports use of the Error Checking and Correction (ECC) Controller in the HPS.  The ECC controllers are implemented in the on-chip RAM, USB OTG 2.0 and 3.1 and Ethernet MACs in the HPS.  To find out more about the ECC controller please refer to the Hard Processor Technical Reference Manual.</p> <p></p>"},{"location":"linux-embedded/edac/edac/#driver-sources","title":"Driver Sources","text":"<p>The source code for the driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/edac/altera_edac.c.</p>"},{"location":"linux-embedded/edac/edac/#driver-capabilities","title":"Driver Capabilities","text":"<p>The Error Detection and Correction (EDAC) driver comprises the ECC manager main component and sub-components of the supported EDAC SoC components.</p> <p>The driver's main functions are to register the EDAC platform drivers in Linux, initialize the EDAC sub-components by performing initial setup of the IRQ interrupt handlers and soft-error handling for uncorrected error events, and to support debugging features like soft-error injections and reads of the error counters.</p> <p>The data flow diagram of EDAC is shown below:</p> <p></p>"},{"location":"linux-embedded/edac/edac/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_EDAC_ALTERA</p> <p></p>"},{"location":"linux-embedded/edac/edac/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-embedded/edac/edac/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/emac/emac/","title":"Ethernet Media Access Controller (EMAC) Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Not Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"linux-embedded/emac/emac/#introduction","title":"Introduction","text":"<p>The Ethernet Media Access Controller (EMAC) Driver controls initialization, configuration and traffic shaping of the three EMACs in the Hard Processor System (HPS).</p> Driver Capability /drivers/net/ethernet/stmicro/stmmac/dwmac-socfpga.c Sets PHY layer configuration such as GMII, RGMII, RMII and speed. /drivers/net/ethernet/stmicro/stmmac/stmmac_platform.c Obtains the features EMAC features supported to main driver /drivers/net/ethernet/stmicro/stmmac/stmmac_main.c Sets ethtool operations Initializes hardware Initializes traffic control Calls networking API (NAPI) Registers IP as netdev Initialize PHY, DMA, MAC Transaction Layer, Management MAC counters, Precision Time Protocol, Watchdog Timer, Ring Length, PCS protocol and TCP Segmentation Offload /drivers/net/ethernet/stmicro/stmmac/hwif.c Initializes hardware interface and obtains device ID and IP version /drivers/net/ethernet/stmicro/stmmac/dwxgmac2_core.c Configures filters, link speed, MDIO/MII bus /drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c Provides bus interface for MII registers <p>The following group of drivers is required to support EMAC functionality:</p> <pre><code>graph TD;\n    A[dwmac-socfpga.c]--&gt;B[stmmac_platform.c];\n    B[stmmac_platform.c]--&gt;C[stmmac_main.c];\n    C[stmmac_main.c]--&gt;D[hwif.c]; \n    D[hwif.c]--&gt;E[dwxgmac2_core.c];\n    E[dwxgmac2_core.c]--&gt;F[stmmac_mdio.c];  </code></pre>"},{"location":"linux-embedded/emac/emac/#emac-ip","title":"EMAC IP","text":"<p>The hard processor system (HPS) provides three Ethernet media access controller (EMAC) peripherals. Each EMAC can be used to transmit and receive data at 10M/100M/1G/2.5G speeds over Ethernet connections in compliance with the IEEE 802.3-2018 specification and enable support for Time Sensitive Networking (TSN) applications.</p> <p>The EMAC has an extensive memory-mapped Control and Status Register (CSR) set, which can be accessed by the on-board Arm processors.</p> <p>The EMAC is an integration of the Synopsys Ethernet XGMAC IP with the SMTG hub and external memory. The EMAC can be accessed from HPS or FPGA fabric over an AXI interface. For more information please refer to the Agilex 5 Hard Processor System Technical Reference Manual.</p> <ul> <li>IEEE 1588-2008 Advanced Timestamp: Precision Time Protocol (PTP), 2-steps, PTP offload and timestamping</li> <li>IEEE 802.1AS: Timing and synchronization</li> <li>IEEE 802.1Qav: Time-sensitive streams forwarding queuing</li> <li>The XGMAC supports the following features<ul> <li>Full-duplex operation at 10M/100M/1G/2.5 Gbps (GMII)</li> <li>Full-duplex RGMII support (10M/100M/1 G)</li> <li>Half-duplex operation in 10/100 Mbps modes</li> <li>Separate transmission, reception, and configuration (control and status register) interfaces to the application</li> <li>MDIO interface for multiple PHY devices and their configuration and management</li> <li>Programmable frame length, supporting standard or jumbo Ethernet frames up to 9 KB</li> </ul> </li> </ul> <p></p>"},{"location":"linux-embedded/emac/emac/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://github.com/altera-opensource/linux-socfpga/blob/socfpga-6.1.55-lts/drivers/net/ethernet/stmicro/stmmac/.  </p>"},{"location":"linux-embedded/emac/emac/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Set PHY layer configurations such as GMII, RGMII, RMII and speed.</li> <li>Initializes hardware, traffic control, calls networking API (NAPI), registers IP as netdev, initializes PHY, DMA, MAC Transaction Layer, Management MAC Counters, Precision Time Protocol, Watchdog Timer, Ring Length, PCS Protocol, and TCP Segmentation Offload.</li> <li>Initializes the hardware interface and obtains the device ID and IP version.</li> <li>Configures filters, link speed, MDIO/MII bus.</li> <li>Provides a bus interface for MII registers.</li> </ul>"},{"location":"linux-embedded/emac/emac/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_STMMAC_ETH</p> <p></p>"},{"location":"linux-embedded/emac/emac/#device-tree","title":"Device Tree","text":"<p>Example Device tree location: https://github.com/altera-opensource/linux-socfpga/blob/socfpga-6.1.55-lts/arch/arm64/boot/dts/intel/socfpga_agilex5.dtsi</p> <p></p>"},{"location":"linux-embedded/emac/emac/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-embedded/emac/emac/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/gpio/gpio/","title":"General Purpose I/O Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 5, Agilex 7</p>"},{"location":"linux-embedded/gpio/gpio/#introduction","title":"Introduction","text":"<p>The Hard Processor System (HPS) provides two General-Purpose I/O (GPIO) interface modules.</p> <p>The GPIO interface supports Digital debounce, configurable interrupt mode, and has up to 48 dedicated I/O pins. For more information please refer to the Agilex 5 Hard Processor System Technical Reference Manual.</p> <p>The figure below shows a block diagram of the GPIO interface:</p> <p></p>"},{"location":"linux-embedded/gpio/gpio/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/gpio/gpio-dwapb.c.</p>"},{"location":"linux-embedded/gpio/gpio/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>GPIO muxed between I2C and SPI.</li> <li>Interrupt propagation between the device and logic on board.</li> <li>Control other circuitry on board.</li> <li>Digital debounce.</li> <li>Configurable interrupt mode.</li> </ul>"},{"location":"linux-embedded/gpio/gpio/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_GPIO_DWAPB</p> <p></p>"},{"location":"linux-embedded/gpio/gpio/#device-tree","title":"Device Tree","text":"<p>Example Device tree location:</p> <p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/arm64/boot/dts/intel/socfpga_agilex5.dtsi</p> <p></p>"},{"location":"linux-embedded/gpio/gpio/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-embedded/gpio/gpio/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/hssi/hssi/","title":"Ethernet Subsystem (HSSI) Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Not Upstreamed</p> <p>Devices supported: Agilex 7</p>"},{"location":"linux-embedded/hssi/hssi/#introduction","title":"Introduction","text":"<p>The Ethernet Subsystem FPGA IP driver acts as a bridge between the software operating in the HPS and the Ethernet Subsystem within the FPGA. It provides various levels of abstraction to simplify communication with the underlying Ethernet Subsystem IP. The Ethernet Subsystem driver exposes Ethernet <code>netdev</code> driver APIs that higher-level software layers can utilize to interact with the Ethernet Subsystem IP</p>"},{"location":"linux-embedded/hssi/hssi/#ethernet-subsystem-fpga-ip","title":"Ethernet Subsystem FPGA IP","text":"<p>The Ethernet Subsystem FPGA IP is a subsystem IP that includes a configurable, Media Access Control (MAC) and Physical Coding Sublayer (PCS) presenting a consistent interface to user logic. It consists of 20 ports. Depending on the tile chosen, each port is implemented based on either the Agilex\u00ae 7 E-Tile Hard IP for Ethernet FPGA IP Core or the F-Tile Hard IP for Ethernet FPGA IP core.</p> <p>This IP provides a seamless and fast way to instantiate a multi-port design, given that it integrates the required discrete Hard IP and Soft IP ingredients. Furthermore, the Subsystem IP provides a user interface to facilitate enabling required features and parameters of operation.</p> <p>For E-Tile, this subsystem IP provides Ethernet data rate profiles of 10Gbps, 25Gbps, and 100Gbps with optional RS-FEC and 1588 Precision Time Protocol (PTP). The subsystem also provides profiles for PCS, OTN, FlexE and CPRI.</p> <p>For F-Tile, this subsystem IP provides Ethernet data rate profiles of 10Gbps, 25Gbps, 40Gbps, 50Gbps, 100Gbps, 200Gbps, and 400Gbps with optional RS-FEC and 1588 Precision Time Protocol (PTP). Quartus\u00ae Prime software version 23.2 supports only Media Access Control (MAC) and Physical Coding Sublayer (PCS) sub-profile.</p> <p>For more information please refer to the Ethernet Subsystem FPGA IP User Guide.</p> <p></p>"},{"location":"linux-embedded/hssi/hssi/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at:</p> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-5.15.90-lts-ftile-1588ptp/drivers/net/ethernet/altera/intel_fpga_hssiss.c</p>"},{"location":"linux-embedded/hssi/hssi/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Get Link state.</li> <li>Get MAC stats. These abstractions are used by the HSSI ethernet netdev driver to provide ethernet functionality to the above layers.</li> </ul>"},{"location":"linux-embedded/hssi/hssi/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_INTEL_FPGA_HSSISS</p> <p></p>"},{"location":"linux-embedded/hssi/hssi/#device-tree","title":"Device Tree","text":"<p>Example Device tree location to configure the HSSI:</p> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-5.15.90-lts-ftile-1588ptp/arch/arm64/boot/dts/intel/fm87_ftile_25g_2port_ptp.dtsi</p> <p></p>"},{"location":"linux-embedded/hssi/hssi/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-embedded/hssi/hssi/#example-designs","title":"Example Designs","text":"<p>HSSI SS driver is used in the Agilex 7 SoC F-Tile Design Example for 25/10 GbE with IEEE1588PTP.</p> <p></p>"},{"location":"linux-embedded/hssi/hssi/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/hssi_xtile/hssi_xtile/","title":"Ethernet Subsystem Intel FPGA IP Tile Specific Ethernet MAC Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Not Upstreamed</p> <p>Devices supported: Agilex 7</p>"},{"location":"linux-embedded/hssi_xtile/hssi_xtile/#introduction","title":"Introduction","text":"<p>The Ethernet MAC driver is used to manage the configuration parameters of the particular tile. It currently supports F-tile and E-tile of the Ethernet Subsystem Intel FPGA IP</p>"},{"location":"linux-embedded/hssi_xtile/hssi_xtile/#f-tile-and-e-tile-fpga-ip","title":"F-tile and E-tile FPGA IP","text":"<p>To get more information on F-tile Hard IP please refer to the F-tile Architecture and PMA and FEC Direct PHY IP User Guide.</p> <p>And for E-tile Hard IP please refer to the E-Tile Hard IP User Guide: E-Tile Hard IP for Ethernet and E-Tile CPRI PHY IPs.</p>"},{"location":"linux-embedded/hssi_xtile/hssi_xtile/#driver-sources","title":"Driver Sources","text":"<p>The source code to generate <code>intel_fpga_hssi_xtile.o</code> can be found at the following directory location:</p> <p>https://github.com/altera-opensource/linux-socfpga/tree/socfpga-5.15.90-lts-ftile-1588ptp/drivers/net/ethernet/altera</p> <pre><code>graph TD;\n    A[intel_fpga_hssi_xtile.o]--&gt;B[intel_fpga_eth_main.c];\n    A[intel_fpga_hssi_xtile.o]--&gt;C[intel_fpga_hssi_etile_fec.c];\n    A[intel_fpga_hssi_xtile.o]--&gt;D[intel_fpga_etile_driver.c];\n    A[intel_fpga_hssi_xtile.o]--&gt;E[intel_fpga_hssi_etile_ethtool.c];\n    A[intel_fpga_hssi_xtile.o]--&gt;F[intel_fpga_ftile_driver];\n    A[intel_fpga_hssi_xtile.o]--&gt;G[intel_fpga_hssi_ftile_fec.c];\n    A[intel_fpga_hssi_xtile.o]--&gt;H[intel_fpga_hssi_ftile_ethtool.c];</code></pre>"},{"location":"linux-embedded/hssi_xtile/hssi_xtile/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>To set the tile specific parameters, like enable support for interrupts, DMA and also the ethtool related configuration.</li> </ul>"},{"location":"linux-embedded/hssi_xtile/hssi_xtile/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_INTEL_FPGA_HSSI_XTILE</p> <p></p>"},{"location":"linux-embedded/hssi_xtile/hssi_xtile/#device-tree","title":"Device Tree","text":"<p>Example of Device tree location to configure the hssi_xtile: </p> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-5.15.90-lts-ftile-1588ptp/arch/arm64/boot/dts/intel/fm87_ftile_25g_2port_ptp.dtsi</p>"},{"location":"linux-embedded/hssi_xtile/hssi_xtile/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-embedded/hssi_xtile/hssi_xtile/#example-designs","title":"Example Designs","text":"<p>HSSI xtile (E-tile/F-tile) driver is used in the Agilex 7 SoC F-Tile Design Example for 25/10 GbE with IEEE1588PTP </p> <p></p>"},{"location":"linux-embedded/hssi_xtile/hssi_xtile/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/i2c/i2c/","title":"I2C Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 7, Agilex 5</p>"},{"location":"linux-embedded/i2c/i2c/#introduction","title":"Introduction","text":"<p>The I2C controller provides support for a communication link between integrated circuits on a board. It is a simple two-wire bus which consists of a serial data line (SDA) and a serial clock (SCL).</p> <p>The hard processor system (HPS) provides five I2C controllers to enable system software to communicate serially with I2C buses. Each I2C controller can operate in master or slave mode and support standard mode of up to 100 Kbps or fast mode of up to 400 Kbps. These I2C controllers are instances of the Synopsys DesignWare controller.</p> <p>Each I2C controller must be programmed to operate in either master or slave mode only. Operating as a master and slave simultaneously is not supported.</p> <p>For More information please refer to the following link:</p> <p>Agilex 5 Hard Processor System Technical Reference Manual</p> <p></p>"},{"location":"linux-embedded/i2c/i2c/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/i2c/busses.</p> <pre><code>graph TD;\n    A[i2c-core-base]--&gt;B[i2c_designware_core];\n    B[i2c_designware_core]--&gt;C[i2c_designware_master]\n    C[i2c_designware_master]--&gt;E[i2c_designware_slave]</code></pre>"},{"location":"linux-embedded/i2c/i2c/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Manage the communication for I2C Master buses as well as Slave.</li> <li>Handle the data transfer between connected devices over the I2C bus.</li> </ul>"},{"location":"linux-embedded/i2c/i2c/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_I2C_DESIGNWARE_CORE</p> <p></p> <p>CONFIG_I2C_DESIGNWARE_SLAVE</p> <p></p>"},{"location":"linux-embedded/i2c/i2c/#device-tree","title":"Device Tree","text":"<p>Example Device tree location to configure the i2c:</p> <p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/arm64/boot/dts/intel/socfpga_agilex5.dtsi</p> <p></p>"},{"location":"linux-embedded/i2c/i2c/#known-issues","title":"Known Issues","text":"<p>None Known</p>"},{"location":"linux-embedded/i2c/i2c/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/i3c/i3c/","title":"I3C Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"linux-embedded/i3c/i3c/#introduction","title":"Introduction","text":"<p>The I3C controller device driver only supports running as a master. The main master is a specialized master that comes up after power-on-reset, and is responsible for assigning dynamic addresses to the I3C devices. The secondary master is an I3C instance capable of both master and slave functionality. It comes up as a slave upon power-on-reset. The secondary master must get ownership of the I3C bus to become a current master before initiating any transfer to its associated slaves.</p> <p>I3C slave controller is not supported. The latest Linux kernel does not support the slave I3C framework.</p> <p>I3C master controller slave DMA is not be supported even though I3C also supports external DMA. The latest Linux kernel does not support DMA.</p>"},{"location":"linux-embedded/i3c/i3c/#i3c-fpga-ip","title":"I3C FPGA IP","text":"<p>The I3C interface is a high-bandwidth bus interface for connecting peripherals to HPS. The I3C interface is intended to improve upon the features of the I2C interface, while preserving backward compatibility. This interface is targeted for applications such as event camera sensors which require I3C interface capability.</p> <p>The hard processor system (HPS) provides two I3C controllers to enable system software to communicate serially with I3C buses. For information regarding this soft IP core, please refer to the Agilex 5 Hard Processor System Technical Reference Manual.</p> <p></p>"},{"location":"linux-embedded/i3c/i3c/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/i3c/master/dw-i3c-master.c.</p>"},{"location":"linux-embedded/i3c/i3c/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Initialize and configure the I3C Controller driver at system boot-up.</li> <li>Provide support for device detection and enumeration for compatible I3C devices.</li> <li>Support the Dynamic address assignment.</li> </ul>"},{"location":"linux-embedded/i3c/i3c/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_I3C</p> <p></p>"},{"location":"linux-embedded/i3c/i3c/#device-tree","title":"Device Tree","text":"<p>Example Device tree location to configure the I3C:</p> <p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/arm64/boot/dts/intel/socfpga_agilex5.dtsi</p> <p></p>"},{"location":"linux-embedded/i3c/i3c/#known-issues","title":"Known Issues","text":"<ul> <li>I3C slave controller shall not be supported. The latest Linux kernel does not support the slave i3c framework.</li> <li>I3C master controller slave DMA shall not be supported even-though I3C also supports external DMA. The latest Linux kernel does not support DMA</li> </ul>"},{"location":"linux-embedded/i3c/i3c/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/interrupt_controller_GICv3/irq_gic_v3/","title":"Interrupt controller (GICv3) Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"linux-embedded/interrupt_controller_GICv3/irq_gic_v3/#introduction","title":"Introduction","text":"<p>The interrupt controller driver handles general initialization of the interrupt controller in the HPS.</p> <p>The Arm\u00ae Generic Interrupt Controller (GIC) handles interrupts from peripherals to the cores and between cores. To find out more about the features and functions of the GIC controller, please refer to Agilex 5 Hard Processor System Technical Reference Manual</p> <p></p>"},{"location":"linux-embedded/interrupt_controller_GICv3/irq_gic_v3/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at:</p> <p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/irqchip/irq-gic-v3.c</p>"},{"location":"linux-embedded/interrupt_controller_GICv3/irq_gic_v3/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Initialize and configure the GICv3 interrupt controller hardware during system boot-up.</li> <li>Handles interrupts generated by various sources in the system.</li> <li>Routes interrupt from their sources to the appropriate CPU cores.</li> <li>Provides generic API to manage interrupts.</li> <li>Support distributed interrupts across multiple GIC instances.</li> </ul>"},{"location":"linux-embedded/interrupt_controller_GICv3/irq_gic_v3/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_ARM_GIC_V3</p> <p></p> <p>CONFIG_ARM_GIC_V3_ITS</p> <p></p>"},{"location":"linux-embedded/interrupt_controller_GICv3/irq_gic_v3/#device-tree","title":"Device Tree","text":"<p>Example Device tree location to configure the irq_gic_v3:</p> <p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/arm64/boot/dts/intel/socfpga_agilex5.dtsi</p> <p></p>"},{"location":"linux-embedded/interrupt_controller_GICv3/irq_gic_v3/#known-issues","title":"Known Issues","text":"<p>None Known</p>"},{"location":"linux-embedded/interrupt_controller_GICv3/irq_gic_v3/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/msgdma/msgdma/","title":"A Modular Scatter-Gather DMA (mSGDMA) Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Not Upstreamed</p> <p>Devices supported: Agilex 7</p>"},{"location":"linux-embedded/msgdma/msgdma/#introduction","title":"Introduction","text":"<p>In a processor subsystem, data transfers between two memory spaces can happen frequently. In order to offload the processor from moving data around a system, a Direct Memory Access (DMA) engine is introduced to perform this function instead. The Modular Scatter-Gather DMA (mSGDMA) is capable of performing data movement operations with preloaded instructions, called descriptors. Multiple descriptors with different transfer sizes, and source and destination addresses have the option to trigger interrupts.</p>"},{"location":"linux-embedded/msgdma/msgdma/#msgdma-fpga-ip","title":"mSGDMA FPGA IP","text":"<p>The mSGDMA provides three configuration structures for handling data transfers: between the Avalon-MM to Avalon-MM, Avalon-MM to Avalon-ST, and Avalon-ST to Avalon-MM. The sub-core of the mSGDMA is instantiated automatically according to the structure configured for the mSGDMA use model. For more information on MSGDMA IP core please refer to https://www.intel.com/content/www/us/en/docs/programmable/683130/23-1/modular-scatter-gather-dma-core.html.</p>"},{"location":"linux-embedded/msgdma/msgdma/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at:</p> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-6.1.55-lts/drivers/dma/altera-msgdma.c</p>"},{"location":"linux-embedded/msgdma/msgdma/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Manage multiple DMA channels provided by the MSGDMA IP core.</li> <li>Provides support for interrupt handling.</li> <li>Provides support for Scatter-gather DMA operation through a set of buffer descriptors.</li> <li>Data transfer to non-contiguous memory space.</li> </ul>"},{"location":"linux-embedded/msgdma/msgdma/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_ALTERA_MSGDMA</p> <p></p>"},{"location":"linux-embedded/msgdma/msgdma/#known-issues","title":"Known Issues","text":"<p>None Known</p>"},{"location":"linux-embedded/msgdma/msgdma/#example-designs","title":"Example Designs","text":"<p>Moified version of MSGDMA driver is used in the Agilex 7 SoC F-Tile Design Example for 25/10 GbE with IEEE1588PTP and also the source code is available at https://github.com/altera-opensource/linux-socfpga/tree/socfpga-6.1.55-lts/drivers/net/ethernet/altera.</p> <p></p>"},{"location":"linux-embedded/msgdma/msgdma/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/nand/nand/","title":"NAND Flash Controller Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"linux-embedded/nand/nand/#introduction","title":"Introduction","text":"<p>The Hard Processor System (HPS) provides a NAND Flash controller to interface with external NAND Flash memory in Intel system-on-a-chip (SoC) systems. External Flash memory can be used to store software, or as extra storage capacity for large applications or user data. For more information please refer to the Intel Agilex 5 Hard Processor System Technical Reference Manual.</p>"},{"location":"linux-embedded/nand/nand/#features","title":"Features","text":"<ul> <li>The triple-level cell (TLC) devices are supported only in parts that are compatible with the ONFI specification</li> <li>Supports three operation modes that make the controller easy to operate while also providing enough flexibility to be adapted to your project's needs.</li> <li>Supports DMA data transfer which optimizes the transfer rate for read and write operations using DMA primary and DMA secondary interfaces.</li> <li>Supports devices with page sizes up to 64 KB.</li> <li>Support up to 8 operation threads that can be executed in parallel.</li> <li>Provides data buffering where necessary in order to achieve maximum performance.</li> </ul>"},{"location":"linux-embedded/nand/nand/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/mtd/nand/raw/cadence-nand-controller.c.</p>"},{"location":"linux-embedded/nand/nand/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Initialization and configuration of the NAND controller hardware.</li> <li>Determine the characteristics like page size and block size.</li> </ul>"},{"location":"linux-embedded/nand/nand/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_MTD_NAND_CADENCE</p> <p></p>"},{"location":"linux-embedded/nand/nand/#device-tree","title":"Device Tree","text":"<p>Example Device tree location:</p> <p>https://github.com/torvalds/linux/blob/master/arch/arm64/boot/dts/intel/socfpga_agilex5.dtsi</p> <p></p>"},{"location":"linux-embedded/nand/nand/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-embedded/nand/nand/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/ptp_tod/ptp_emb_tod/","title":"Ethernet 1588 PTP Time of Day Clock IP Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Not Upstreamed</p> <p>Devices supported: Agilex 7</p>"},{"location":"linux-embedded/ptp_tod/ptp_emb_tod/#introduction","title":"Introduction","text":"<p>The driver for the Ethernet 1588 PTP Time of Day Clock FPGA IP is used in the 1588 PTP Design examples provided by Altera. The Time of Day Clock FPGA IP is exposed as a PTP Hardware Clock (PHC) device to the Linux PTP stack to synchronize the system clock to its ToD information using <code>phc2sys</code> utility in the Linux PTP stack.</p>"},{"location":"linux-embedded/ptp_tod/ptp_emb_tod/#time-of-day-clock-fpga-ip","title":"Time of Day Clock FPGA IP","text":"<p>The Time-of-day (TOD) Clock streams 96-bit and 64-bit time-of-day to one or more time stamping units in an IEEE 1588v2 solution. For information regarding this soft IP core, please refer to the Ethernet Design Example Components User Guide.</p> <p></p>"},{"location":"linux-embedded/ptp_tod/ptp_emb_tod/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://github.com/altera-opensource/linux-socfpga/blob/socfpga-5.15.90-lts-ftile-1588ptp/drivers/net/ethernet/altera/intel_fpga_tod.c.</p>"},{"location":"linux-embedded/ptp_tod/ptp_emb_tod/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Registers PTP clock driver to kernel</li> <li>Calculates the ToD of clock offset adjustments</li> </ul>"},{"location":"linux-embedded/ptp_tod/ptp_emb_tod/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_INTEL_FPGA_TOD</p> <p></p>"},{"location":"linux-embedded/ptp_tod/ptp_emb_tod/#device-tree","title":"Device Tree","text":"<p>Example Device tree location to configure the TOD:</p> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-5.15.90-lts-ftile-1588ptp/arch/arm64/boot/dts/intel/fm87_ftile_25g_2port_ptp.dtsi</p> <p></p>"},{"location":"linux-embedded/ptp_tod/ptp_emb_tod/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-embedded/ptp_tod/ptp_emb_tod/#example-designs","title":"Example Designs","text":"<p>This driver is used in the Agilex 7 SoC F-Tile Design Example for 25GbE and 10GbE with IEEE1588PTP.</p> <p></p>"},{"location":"linux-embedded/ptp_tod/ptp_emb_tod/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/qsfp/qsfp/","title":"QSFP Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Not Upstreamed</p> <p>Devices supported: Agilex 7</p>"},{"location":"linux-embedded/qsfp/qsfp/#introduction","title":"Introduction","text":"<p>The QSFP driver is responsible for interacting with the onboard QSFP module. It reads the QSFP Serial Electrically Erasable Programmable Read-Only Memory (SEEP) and controls the power and interrupt pins of the QSFP.</p>"},{"location":"linux-embedded/qsfp/qsfp/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://github.com/altera-opensource/linux-socfpga/blob/socfpga-5.15.90-lts-ftile-1588ptp/drivers/net/phy/qsfp.c.</p>"},{"location":"linux-embedded/qsfp/qsfp/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Registers QSFP driver to kernel.</li> <li>Reads the registers through the I2C bus and provide information to high level software stack.</li> </ul>"},{"location":"linux-embedded/qsfp/qsfp/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_QSFP</p> <p></p>"},{"location":"linux-embedded/qsfp/qsfp/#device-tree","title":"Device Tree","text":"<p>Example Device tree location:</p> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-5.15.90-lts-ftile-1588ptp/arch/arm64/boot/dts/intel/fm87_ftile_10g_2port_ptp.dtsi</p> <p></p>"},{"location":"linux-embedded/qsfp/qsfp/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-embedded/qsfp/qsfp/#example-designs","title":"Example Designs","text":"<p>This driver is used in the Agilex 7 SoC F-Tile Design Example for 25GbE and 10GbE with IEEE1588PTP.</p> <p></p>"},{"location":"linux-embedded/qsfp/qsfp/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/qspi/qspi/","title":"QSPI Driver for Hard Processor System (HPS)","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Not Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"linux-embedded/qspi/qspi/#introduction","title":"Introduction","text":"<p>The Quad Serial Peripheral Interface (QSPI) driver manages the QSPI controller in the HPS.  The QSPI has the capability to access serial NOR Flash connected to the Secure Device Manager (SDM) QSPI. The QSPI controller supports standard SPI Flash devices as well as high-performance dual and quad SPI Flash devices. The QSPI controller module features are:</p> <ul> <li>SPIx1, SPIx2, or SPIx4 (QSPI) serial NOR flash devices</li> <li>Supported clock frequencies up to 166 MHz</li> <li>Direct access and indirect access modes</li> <li>Single I/O, dual I/O, or quad I/O instructions</li> <li>Up to four chip selects</li> <li>Configurable clock polarity and phase</li> <li>Programmable write-protected regions</li> <li>Programmable delays between transactions</li> </ul> <p>To find out more about the QSPI controller within the HPS please refer to the Intel Agilex 5 Hard Processor System Technical Reference Manual. </p>"},{"location":"linux-embedded/qspi/qspi/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Initialize and configuration of the QSPI controller.</li> <li>Handles data transfer and address.</li> </ul>"},{"location":"linux-embedded/qspi/qspi/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://github.com/altera-opensource/linux-socfpga/blob/socfpga-6.1.55-lts/drivers/spi/spi-cadence-quadspi.c.</p>"},{"location":"linux-embedded/qspi/qspi/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_SPI_CADENCE_QUADSPI</p> <p></p>"},{"location":"linux-embedded/qspi/qspi/#device-tree","title":"Device Tree","text":"<p>Example Device tree location:</p> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-6.1.55-lts/arch/arm64/boot/dts/intel/socfpga_agilex5.dtsi</p> <p></p>"},{"location":"linux-embedded/qspi/qspi/#known-issues","title":"Known Issues","text":"<p>None kKnown</p>"},{"location":"linux-embedded/qspi/qspi/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/reset_manager/reset_manager/","title":"Reset Manager Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Not Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"linux-embedded/reset_manager/reset_manager/#introduction","title":"Introduction","text":"<p>The reset manager generates module reset signals based on reset requests from various sources in the HPS, and performs software writing to the module-reset control registers.</p> <p>The HPS contains multiple reset domains. Each reset domain can be reset independently. A reset can be initiated externally, internally, or through software.  For more information about the reset manager, please refer to the Intel Agilex 5 Hard Processor System Technical Reference Manual.</p> <p></p>"},{"location":"linux-embedded/reset_manager/reset_manager/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at:</p> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-6.1.55-lts/drivers/reset/reset-simple.c</p>"},{"location":"linux-embedded/reset_manager/reset_manager/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Manage the system level reset.</li> <li>Support Assert and De-assert of the reset signal.</li> <li>Monitor the status of the reset signal.</li> </ul>"},{"location":"linux-embedded/reset_manager/reset_manager/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_RESET_SIMPLE</p> <p></p>"},{"location":"linux-embedded/reset_manager/reset_manager/#device-tree","title":"Device Tree","text":"<p>Example Device tree location for reset signal parameter:</p> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-6.1.55-lts/arch/arm64/boot/dts/intel/socfpga_agilex5.dtsi</p> <p></p> <p>Also dt-bindings can be found at:</p> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-6.1.55-lts/include/dt-bindings/reset/altr%2Crst-mgr-agilex5.h</p>"},{"location":"linux-embedded/reset_manager/reset_manager/#known-issues","title":"Known Issues","text":"<p>None Known</p>"},{"location":"linux-embedded/reset_manager/reset_manager/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/sd-emmc/sd-emmc/","title":"SD-EMMC Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"linux-embedded/sd-emmc/sd-emmc/#introduction","title":"Introduction","text":"<p>The Secure Digital/Embedded Multimedia Card (SD/eMMC) driver supports the SD/eMMC controller in the Hard Processor System (HPS) which interfaces with external SD Flash cards, secure digital I/O (SDIO) devices, and eMMC storage devices.</p> <p>For More information please refer to the Intel Agilex 5 Hard Processor System Technical Reference Manual.</p> <p></p>"},{"location":"linux-embedded/sd-emmc/sd-emmc/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at:</p> <p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/mmc/host/sdhci-cadence.c</p>"},{"location":"linux-embedded/sd-emmc/sd-emmc/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Manage SD/eMMC features such as configuration and reset and timeout clock frequency</li> <li>Supports SDMA and ADMA modes.</li> <li>Handles data transfer to/from the SD/eMMC.</li> </ul>"},{"location":"linux-embedded/sd-emmc/sd-emmc/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_MMC_SDHCI_CADENCE</p> <p></p>"},{"location":"linux-embedded/sd-emmc/sd-emmc/#device-tree","title":"Device Tree","text":"<p>Example Device tree location to configure the SD/eMMC:</p> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga_agilex5-ES_RC/arch/arm64/boot/dts/intel/socfpga_agilex5.dtsi</p> <p></p>"},{"location":"linux-embedded/sd-emmc/sd-emmc/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-embedded/sd-emmc/sd-emmc/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/smmu/smmu/","title":"System Memory Management Unit (SMMU) Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"linux-embedded/smmu/smmu/#introduction","title":"Introduction","text":"<p>SMMU converts virtual addresses to physical addresses for external peripheral devices. This allows multiple external devices to perform direct memory access (DMA) to the entire range of the system physical memory.</p> <p>As an example, certain peripheral devices limited to accessing only 24 bits of address space would now be able to access all 64 bits addresssing through the memory translation tables of the SMMU.</p> <p>The SDM SMMU is used solely by the FCS Cryptography feature. The accelerator like FCS_Crytpo sends a VA to SMMU and SMMU queries the PA from the page table.</p> <p>SMMU registers are configured through ARM Trusted firmware (ATF) BL31 SMC calls by the Crytography device drivers. The ATF performs default SMMU initializations of the stream IDs through the system manager and SMMU secure registers configuration during the boot-up process.</p> <p>For More information please refer to the following link:</p> <p>Agilex 5 Hard Processor System Technical Reference Manual</p> <p></p>"},{"location":"linux-embedded/smmu/smmu/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at:</p> <p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/iommu/arm/arm-smmu-v3</p>"},{"location":"linux-embedded/smmu/smmu/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Queue manipulation, sizing</li> <li>Command queue locking or insertion</li> <li>Error reporting</li> <li>Updating Stream Table Entry</li> </ul>"},{"location":"linux-embedded/smmu/smmu/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_ARM_SMMU_V3</p> <p></p>"},{"location":"linux-embedded/smmu/smmu/#device-tree","title":"Device Tree","text":"<p>Example Device tree location to configure the smmu:</p> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga_agilex5-ES_RC/arch/arm64/boot/dts/intel/socfpga_agilex5.dtsi</p> <p></p>"},{"location":"linux-embedded/smmu/smmu/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-embedded/smmu/smmu/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/spi/spi/","title":"SPI Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex7, Agilex 5</p>"},{"location":"linux-embedded/spi/spi/#introduction","title":"Introduction","text":"<p>Serial master and serial slave controllers Enable serial communication with serial-master or serial-slave peripheral devices. Each SPI master has a maximum bit rate of 60 Mbps. Each SPI slave has a maximum bit rate of 33.33 Mbps. The DMA controller interface is integrated with the HPS DMA controller.</p> <p>For More information please refer to the following link:</p> <p>Agilex 5 Hard Processor System Technical Reference Manual</p> <p></p>"},{"location":"linux-embedded/spi/spi/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/spi.</p>"},{"location":"linux-embedded/spi/spi/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Handle the data transfer between connected devices over the SPI bus.</li> <li>Support the peripheral slave DMA.</li> </ul>"},{"location":"linux-embedded/spi/spi/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_SPI_ALTERA</p> <p></p>"},{"location":"linux-embedded/spi/spi/#device-tree","title":"Device Tree","text":"<p>Example Device tree location to configure the SPI:</p> <p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/arm64/boot/dts/intel/socfpga_agilex5.dtsi</p> <p></p>"},{"location":"linux-embedded/spi/spi/#known-issues","title":"Known Issues","text":"<p>None Known</p>"},{"location":"linux-embedded/spi/spi/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/system_manager/system_manager/","title":"System Manager Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"linux-embedded/system_manager/system_manager/#introduction","title":"Introduction","text":"<p>The system manager contains the memory-mapped control and status registers (CSRs) and logic to control system level functionality in a hard processor system (HPS).</p> <p>The system manager connects to different modules in the HPS such as a Direct memory access (DMA) controller, Microprocessor unit (MPU) system complex, NAND flash controller, Secure Digital/Embedded Multimedia Card (SD/eMMC) controller, or GPIO interface between HPS and other modules.</p> <p>For more information please refer to the Intel Agilex 5 Hard Processor System Technical Reference Manual.</p> <p></p>"},{"location":"linux-embedded/system_manager/system_manager/#features","title":"Features","text":"<ul> <li>Provides memory-mapped control signals to other modules and peripherals</li> <li>Provides watchdogs stop functionality on debug requests.</li> <li>Provides software access to control and status signals of other HPS modules.</li> <li>Enables and disables HPS peripheral interfaces to the FPGA.</li> <li>Provides ten 32-bit registers to store handoff information between the preloader and the operating system.</li> </ul>"},{"location":"linux-embedded/system_manager/system_manager/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Handle the probing and resource allocation.</li> <li>Provides API to perform read/write operations.</li> <li>Access the CSRs in the system manager to control and monitor various functions of modules.</li> </ul>"},{"location":"linux-embedded/system_manager/system_manager/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/mfd/altera-sysmgr.c.</p>"},{"location":"linux-embedded/system_manager/system_manager/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_MFD_ALTERA_SYSMGR</p> <p></p>"},{"location":"linux-embedded/system_manager/system_manager/#device-tree","title":"Device Tree","text":"<p>Example Device tree location:</p> <p>https://github.com/torvalds/linux/blob/master/arch/arm64/boot/dts/intel/socfpga_agilex5.dtsi</p> <p></p>"},{"location":"linux-embedded/system_manager/system_manager/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-embedded/system_manager/system_manager/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/uart/uart/","title":"UART Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 7, Agilex 5</p>"},{"location":"linux-embedded/uart/uart/#introduction","title":"Introduction","text":"<p>The Hard Processor System (HPS) provides two UART controllers for asynchronous serial communication.</p> <p>For More information please refer to the following link:</p> <p>Agilex 5 Hard Processor System Technical Reference Manual</p> <p></p>"},{"location":"linux-embedded/uart/uart/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/tty/serial/8250/8250_dw.c.</p>"},{"location":"linux-embedded/uart/uart/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Probing and resource allocation as well as memory mapping.</li> <li>It provides the support for busy detect interrupt.</li> </ul>"},{"location":"linux-embedded/uart/uart/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_SERIAL_8250_DW</p> <p></p>"},{"location":"linux-embedded/uart/uart/#device-tree","title":"Device Tree","text":"<p>Example Device tree location to configure the uart:</p> <p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/arm64/boot/dts/intel/socfpga_agilex5.dtsi</p> <p></p>"},{"location":"linux-embedded/uart/uart/#known-issues","title":"Known Issues","text":"<p>None Known</p>"},{"location":"linux-embedded/uart/uart/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/usb2_0_otg/usb_2_0_otg/","title":"USB 2.0 OTG Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 7, Agilex 5</p>"},{"location":"linux-embedded/usb2_0_otg/usb_2_0_otg/#introduction","title":"Introduction","text":"<p>The hard processor system (HPS) provides a USB On-The-Go (OTG) controller that supports both device and host functions. The controller is fully compliant with the On The Go and Embedded Host Supplement to the USB Revision 1.3 and Revision 2.0 Specification. The controller can be programmed for both device and host functions to support data movement over the USB protocol</p> <p>For More information please refer to the following link:</p> <p>Agilex 5 Hard Processor System Technical Reference Manual</p> <p></p>"},{"location":"linux-embedded/usb2_0_otg/usb_2_0_otg/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at:</p> <p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/usb/dwc2</p>"},{"location":"linux-embedded/usb2_0_otg/usb_2_0_otg/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Provides basic services for accessing and managing the hardware.</li> <li>Enable support for Host and peripheral mode.</li> <li>Handle control and data transfers between the USB host and connected USB peripherals.</li> </ul>"},{"location":"linux-embedded/usb2_0_otg/usb_2_0_otg/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_USB_DWC2</p> <p></p>"},{"location":"linux-embedded/usb2_0_otg/usb_2_0_otg/#device-tree","title":"Device Tree","text":"<p>Example Device tree location to configure the usb2_0_otg:</p> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-6.1.55-lts/arch/arm64/boot/dts/intel/socfpga_agilex5.dtsi</p> <p></p>"},{"location":"linux-embedded/usb2_0_otg/usb_2_0_otg/#known-issues","title":"Known Issues","text":"<p>None Known</p>"},{"location":"linux-embedded/usb2_0_otg/usb_2_0_otg/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/usb3_1/usb3_1/","title":"USB 3.1 Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Not Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"linux-embedded/usb3_1/usb3_1/#introduction","title":"Introduction","text":"<p>The HPS provides a single instance of a USB 3.1 Gen 1 controller that supports both device and host functions for high-speed applications. The general use cases of USB 3.1 are for the HPS system to support all USB devices such as:</p> <ul> <li>Portable electronic devices</li> <li>High-bandwidth applications like audio and video.</li> <li>Debug trace applications</li> </ul> <p>For More information please refer to the following link:</p> <p>Agilex 5 Hard Processor System Technical Reference Manual</p> <p></p>"},{"location":"linux-embedded/usb3_1/usb3_1/#usb-31-glue-driver","title":"USB 3.1 Glue Driver","text":"<p><code>drivers/usb/dwc3/dwc3-of-simple.c</code> is a USB glue driver for the <code>dw3-agilex-edge.c</code> component depicted in the diagram below. This glue driver is used to control dynamic mode switching.</p> <p></p>"},{"location":"linux-embedded/usb3_1/usb3_1/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at:</p> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-6.1.55-lts/drivers/usb/dwc3/dwc3-of-simple.c</p>"},{"location":"linux-embedded/usb3_1/usb3_1/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>It provides a reference to the Clock which is required by the rest of the interfaces.</li> </ul>"},{"location":"linux-embedded/usb3_1/usb3_1/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_USB_DWC3</p> <p></p>"},{"location":"linux-embedded/usb3_1/usb3_1/#device-tree","title":"Device Tree","text":"<p>Example Device tree location to configure the usb3_1:</p> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-6.1.55-lts/arch/arm64/boot/dts/intel/socfpga_agilex5.dtsi</p> <p></p>"},{"location":"linux-embedded/usb3_1/usb3_1/#known-issues","title":"Known Issues","text":"<ul> <li>Currently dynamic mode switching is not supported</li> <li>Real-time detection of USB-C slave devices not supported</li> </ul>"},{"location":"linux-embedded/usb3_1/usb3_1/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/watchdog_timers/watchdog_timers/","title":"Watchdog Timers Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Device Supported: Agilex 5</p>"},{"location":"linux-embedded/watchdog_timers/watchdog_timers/#introduction","title":"Introduction","text":"<p>The watchdog timers are peripherals you can use to recover from system lockup that might be caused by software or system related issues. The hard processor system (HPS) provides five programmable watchdog timers, which are connected to the level 4 (L4) peripheral bus.</p> <p>Each watchdog timer consists of a slave interface for control and status register (CSR) access, a register block, and a 32-bit down counter that operates on the slave interface clock (l4_sys_free_clk). A pause input, driven by the system manager, optionally pauses the counter when a CPU is being debugged.The watchdog timer drives an interrupt request to the MPU and a reset request to the reset manager.</p> <p>For more information please refer to the Agilex 5 Hard Processor System Technical Reference Manual.</p> <p></p>"},{"location":"linux-embedded/watchdog_timers/watchdog_timers/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/watchdog/dw_wdt.c.</p>"},{"location":"linux-embedded/watchdog_timers/watchdog_timers/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Allows configuration of the watchdog timer timeout period, specifying the duration after which the watchdog will trigger a system reset if not reset by the software</li> <li>Initializes the watchdog timer hardware during system boot, setting up the necessary registers and configurations to enable watchdog functionality.</li> <li>Handles interrupts generated by the watchdog timer hardware, allowing the system to respond appropriately to watchdog events, such as timer expiration.</li> </ul>"},{"location":"linux-embedded/watchdog_timers/watchdog_timers/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_DW_WATCHDOG</p> <p></p>"},{"location":"linux-embedded/watchdog_timers/watchdog_timers/#device-tree","title":"Device Tree","text":"<p>Example Device tree location:</p> <p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/arm64/boot/dts/intel/socfpga_agilex5.dtsi</p> <p></p>"},{"location":"linux-embedded/watchdog_timers/watchdog_timers/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-embedded/watchdog_timers/watchdog_timers/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"linux-embedded/zarlink_clock_synchronizer/zarlink_clock_synchronizer/","title":"Zarlink Clock Synchronizer Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Not Upstreamed</p> <p>Devices supported: Agilex 7</p>"},{"location":"linux-embedded/zarlink_clock_synchronizer/zarlink_clock_synchronizer/#introduction","title":"Introduction","text":"<p>The Microchip\u00ae Zarlink ZL30733 3-Channel SyncE &amp; 1588 Network Synchronizer takes charge of frequency synchronization, monitors reference clock quality, manages reference clock switching, and provides holdover functionality for SyncE and PTP1588 support. It has support for multiple reference clocks and can be used to generate the outputs. The device is constantly monitoring the quality of the reference clocks and it switches to an alternative clock source when the measured period of the current reference signal is incorrect, or if it has excessive jitter.</p> <p>I2C based zl30733</p> <pre><code>graph TD;\n    A[intel_freq_control.c]--&gt;B[intel_freq_ctrl_common_i2c.c];\n    A[intel_freq_control.c]--&gt;C[intel_freq_ctrl_zl30733_i2c.c];</code></pre> <p>SPI based zl30793</p> <pre><code>graph TD;\n    A[intel_freq_control.c]--&gt;B[intel_freq_ctrl_common_spi.c];\n    A[intel_freq_control.c]--&gt;C[intel_freq_ctrl_zl30793_spi.c];</code></pre>"},{"location":"linux-embedded/zarlink_clock_synchronizer/zarlink_clock_synchronizer/#zarlink-chip-information","title":"Zarlink chip information","text":"<p>For Microchip\u00ae Zarlink ZL30733 documentation please refer to https://www.microchip.com/en-us/product/zl30733 and https://www.microchip.com/en-us/product/zl30793.</p>"},{"location":"linux-embedded/zarlink_clock_synchronizer/zarlink_clock_synchronizer/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at:</p> <ul> <li>General Frequency control driver</li> </ul> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-5.15.90-lts-ftile-1588ptp/drivers/net/ethernet/altera/intel_freq_control.c</p> <ul> <li>I2C based ZL30733 support</li> </ul> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-5.15.90-lts-ftile-1588ptp/drivers/net/ethernet/altera/intel_freq_ctrl_zl30733_i2c.c</p> <ul> <li>I2C based common api for frequency control</li> </ul> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-5.15.90-lts-ftile-1588ptp/drivers/net/ethernet/altera/intel_freq_ctrl_common_i2c.c</p> <ul> <li>SPI based zl30793 support</li> </ul> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-5.15.90-lts-ftile-1588ptp/drivers/net/ethernet/altera/intel_freq_ctrl_zl30793_spi.c</p> <ul> <li>SPI based common api for frequency control</li> </ul> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-5.15.90-lts-ftile-1588ptp/drivers/net/ethernet/altera/intel_freq_ctrl_common_spi.c</p>"},{"location":"linux-embedded/zarlink_clock_synchronizer/zarlink_clock_synchronizer/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Support frequency synchronization, monitor reference clock quality, manage reference clock switching.</li> <li>Provides holdover functionality for SyncE and PTP1588 support.</li> </ul>"},{"location":"linux-embedded/zarlink_clock_synchronizer/zarlink_clock_synchronizer/#device-tree","title":"Device Tree","text":"<p>Example Device tree location:</p> <p>https://github.com/altera-opensource/linux-socfpga/blob/socfpga-5.15.90-lts-ftile-1588ptp/arch/arm64/boot/dts/intel/fm87_ftile_25g_2port_ptp.dtsi</p> <p></p>"},{"location":"linux-embedded/zarlink_clock_synchronizer/zarlink_clock_synchronizer/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"linux-embedded/zarlink_clock_synchronizer/zarlink_clock_synchronizer/#example-designs","title":"Example Designs","text":"<p>Zarlink driver is used in the Agilex 7 SoC F-Tile Design Example for 25/10 GbE with IEEE1588PTP.</p> <p></p>"},{"location":"linux-embedded/zarlink_clock_synchronizer/zarlink_clock_synchronizer/#notices-disclaimers","title":"Notices &amp; Disclaimers","text":"<p>Altera\u00ae Corporation technologies may require enabled hardware, software or service activation. No product or component can be absolutely secure.  Performance varies by use, configuration and other factors. Your costs and results may vary.  You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Altera or Intel products described herein. You agree to grant Altera Corporation a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document, with the sole exception that you may publish an unmodified copy. You may create software implementations based on this document and in compliance with the foregoing that are intended to execute on the Altera or Intel product(s) referenced in this document. No rights are granted to create modifications or derivatives of this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications.  Current characterized errata are available on request. Altera disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. You are responsible for safety of the overall system, including compliance with applicable safety-related requirements or standards.  \u00a9 Altera Corporation.  Altera, the Altera logo, and other Altera marks are trademarks of Altera Corporation.  Other names and brands may be claimed as the property of others. </p> <p>OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission of the Khronos Group\u2122. </p>"},{"location":"sw-tools-list/host-attach-tools/","title":"Host Attach Software Tools","text":"<p>The table below provides a comprehensive list of host software tools available for Altera 7 FPGAs. These utilities are part of the  called Open Programmable Acceleration Engine (OPAE) software development kit which is part of the Open FPGA Stack (OFS) software framework.  More documentation on OPAE and OFS can be found here.</p> <p>You can use the filter fields to narrow your search.</p> Utility Supported Devices Description fpgaconf Agilex 7 FPGA Configuration fpgad Agilex 7 FPGA Diagnostics fpgainfo Agilex 7 FPGA Card Information fpgaport Agilex 7 FPGA Port Information fpgasupdate Agilex 7 FPGA Secure Update host_exerciser Agilex 7 Host Interface Exerciser hssi Agilex 7 HE-HSSI Controller hssi_ethernet Agilex 7 HSSI/Ethernet Statistics hssi_loopback Agilex 7 HSSI Loopback hssimac Agilex 7 HSSI MAC mem_tg Agilex 7 Memory Traffic Generator mmlink Agilex 7 Memory Mapped Link ofs.uio Agilex 7 OFS DFL UIO opae.io Agilex 7 OFS DFL OPAE IO opaeuio Agilex 7 OFS OPAE User IO opaevfio Agilex 7 OFS DFL Virt IO pac_hssi_config Agilex 7 Programmable Acceleration Card HSSI Configuration packager Agilex 7 AFU Packager pcie_device Agilex 7 PCIe Device rsu Agilex 7 Remote System Update (RSU) userclk Agilex 7 User Clock Control vabtool Agilex 7 Vendor Authorized Boot Tool"},{"location":"zephyr-embedded/clock_manager/clock_manager/","title":"Clock Manager Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"zephyr-embedded/clock_manager/clock_manager/#introduction","title":"Introduction","text":"<p>The hard processor system (HPS) clock generation is centralized in the clock manager. The clock manager is responsible for providing software-programmable clock control to configure all clocks generated in the HPS. Clocks are organized in clock groups. A clock group is a set of clock signals that originate from the same clock source which may be synchronous to each other. The clock manager has two phase-locked loop (PLL) clock group where the clock source is a common PLL voltage-controlled oscillator (VCO). A clock group that is independent and asynchronous to other clocks may only have a single clock, also known as a clock slice. Peripheral clocks are a group of independent clock slices.</p> <p></p> <p>For more information please refer to the Intel Agilex 5 Hard Processor System Technical Reference Manual.</p>"},{"location":"zephyr-embedded/clock_manager/clock_manager/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://github.com/zephyrproject-rtos/zephyr/blob/main/drivers/clock_control/clock_control_agilex5.c.</p>"},{"location":"zephyr-embedded/clock_manager/clock_manager/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Supply clock to each HPS peripheral as configured in the boot loader and provide an API to retrieve the clock for each peripheral.</li> <li>Clock Manager will be initialized only one time during boot up by FSBL (ATF BL2) based on external user settings stored in HPS handoff data in bitstream.</li> </ul>"},{"location":"zephyr-embedded/clock_manager/clock_manager/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_CLOCK_CONTROL</p> <p></p> <p>CONFIG_CLOCK_CONTROL_AGILEX5</p> <p></p>"},{"location":"zephyr-embedded/clock_manager/clock_manager/#device-tree","title":"Device Tree","text":"<p>Example Device tree location:</p> <p>https://github.com/zephyrproject-rtos/zephyr/blob/main/dts/arm64/intel/intel_socfpga_agilex5.dtsi</p> <p></p> <p>A clock manager node will be added in device tree.  Then, the peripheral can associate the clock manager in device tree so that the peripheral driver code can retrieve the clock frequency from clock manager. One such example is shown below.</p> <p></p>"},{"location":"zephyr-embedded/clock_manager/clock_manager/#known-issues","title":"Known Issues","text":"<p>None Known. </p>"},{"location":"zephyr-embedded/dma/dma/","title":"DMA Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: No</p> <p>Devices supported: Agilex 5</p>"},{"location":"zephyr-embedded/dma/dma/#introduction","title":"Introduction","text":"<p>DMA Controller controls the transfer of data between I/O devices and memory without CPU involvement. DMA controller can access the memory directly for reading and writing. This helps to enhance the performance of the cores to do some other operations, as the data transfers are handled by the DMA controller.</p> <p>The hard processor system (HPS) provides two DMA Controllers based on the Synopsis-Designware IP.</p> <p>For more information please refer to the Intel Agilex 5 Hard Processor System Technical Reference Manual.</p>"},{"location":"zephyr-embedded/dma/dma/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://github.com/altera-opensource/zephyr-socfpga/blob/socfpga_rel_23.4/drivers/dma/dma_dw_axi.c.</p>"},{"location":"zephyr-embedded/dma/dma/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Driver supports scatter-gather list.</li> <li>Driver can be configured for one of the possible three use cases.     * Memory to Memory Transfer     * Device to Memory Transfer     * Memory to Device Transfer</li> <li>Each DMA controller can support up to four channels for DMA transfer.</li> <li>Driver supports DMA transfer suspend.</li> <li>Driver supports DMA transfer resume.</li> <li>Driver supports to stop active DMA transfer.</li> </ul>"},{"location":"zephyr-embedded/dma/dma/#kernel-configurations","title":"Kernel Configurations","text":""},{"location":"zephyr-embedded/dma/dma/#device-tree","title":"Device Tree","text":"<p>Device Tree location to configure DMA is</p> <p>https://github.com/zephyrproject-rtos/zephyr/blob/main/dts/arm64/intel/intel_socfpga_agilex5.dtsi</p> <p>```dma0: dma@10DB0000 { compatible = \"snps,dw-axi-dma\";</p>"},{"location":"zephyr-embedded/dma/dma/#dma-cells-2","title":"dma-cells = &lt;2&gt;;","text":"<p>reg = &lt;0x10DB0000 0x1000&gt;; interrupt-parent = &lt;&amp;gic&gt;; interrupts = ,          ,          ,          ; dma-channels = &lt;4&gt;; resets = &lt;&amp;reset RSTMGR_DMA_RSTLINE&gt;; status = \"disabled\"; }; ```"},{"location":"zephyr-embedded/dma/dma/#known-issues","title":"Known Issues","text":"<p>None Known. </p>"},{"location":"zephyr-embedded/gpio/gpio/","title":"General Purpose I/O Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Not Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"zephyr-embedded/gpio/gpio/#introduction","title":"Introduction","text":"<p>General Purpose Input/Output (GPIO) Controller provides the low-level configuration through software or hardware to control the actual general purpose IO cells/pads present in the HPS.  The below diagram represents block diagram of the GPIO controller connected with other components in the system.</p> <p></p> <p>Two GPIO module instances present in HPS and each having support of 24 GPIO ports. Only Port A of GPIO Controller is configured. All the design contained of this document is referred from \u201cSynopsys GPIO Databook\u201d.</p> <p>Functional Modes:</p> <ul> <li>Software Control Mode: In the software control mode, the port direction is set by writing to the corresponding port control register of a GPIO pin. These port control registers are memory mapped.</li> <li>Hardware Control Mode : If a signal is configured for hardware control, an external auxiliary hardware-signal controls the direction of the port. For the SM, Auxiliary H/W support is not enabled.</li> </ul> <p>For More information please refer to the following link: Agilex 5 Hard Processor System Technical Reference Manual</p>"},{"location":"zephyr-embedded/gpio/gpio/#features","title":"Features","text":"<ul> <li>Digital debounce</li> <li>Configurable interrupt mode</li> <li>Up to 48 dedicated I/O pins</li> </ul>"},{"location":"zephyr-embedded/gpio/gpio/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://github.com/altera-opensource/zephyr-socfpga/blob/socfpga_rel_23.4/drivers/gpio/gpio_intel_socfpga.c.</p>"},{"location":"zephyr-embedded/gpio/gpio/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>GPIO Pin configure as input or output.</li> <li>GPIO Port/Pin set value using mask.</li> <li>GPIO Port/Pin get value using mask.</li> <li>GPIO Port/Pin toggle using mask.</li> </ul>"},{"location":"zephyr-embedded/gpio/gpio/#kernel-configurations","title":"Kernel Configurations","text":"<p>No additional Kernel configurations needed to enable GPIO driver functionality.</p>"},{"location":"zephyr-embedded/gpio/gpio/#device-tree","title":"Device Tree","text":"<p>Example Device tree location:</p> <p>https://github.com/altera-opensource/zephyr-socfpga/blob/socfpga_rel_23.4/dts/arm64/intel/intel_socfpga_agilex5.dtsi</p> <p></p>"},{"location":"zephyr-embedded/gpio/gpio/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"zephyr-embedded/gpio/gpio/#other-consideration","title":"Other Consideration","text":"<p>Pinmux configuration should be in GPIO mode to use respective IO functionality.</p>"},{"location":"zephyr-embedded/psci/psci/","title":"Power State Coordination Interface (PSCI) driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"zephyr-embedded/psci/psci/#introduction","title":"Introduction","text":"<p>Power State Coordination Interface (PSCI) is an Arm\u00ae standard that describes a software interface for power management between and operating system and supervisory firmware. Refer to Arm PSCI Platform Design Document for the PSCI interface specification.</p> <p>The following diagram shows the interaction between Zephyr/OS and Secure Monitor firmware ATF BL31 for PSCI interface.</p> <p></p> <p>For More information please refer to the Intel Agilex 5 Hard Processor System Technical Reference Manual.</p>"},{"location":"zephyr-embedded/psci/psci/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at:</p> <p>https://github.com/zephyrproject-rtos/zephyr/blob/main/drivers/pm_cpu_ops/pm_cpu_ops_psci.c</p>"},{"location":"zephyr-embedded/psci/psci/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>This driver provides the cold and warm reset functionality.</li> <li>This driver/module also provides a shell interface via which user can issue cold/warm reset commands.</li> </ul>"},{"location":"zephyr-embedded/psci/psci/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_PM_CPU_OPS</p> <p></p> <p>CONFIG_PM_CPU_OPS_PSCI</p> <p></p>"},{"location":"zephyr-embedded/psci/psci/#device-tree","title":"Device Tree","text":"<p>Example Device tree location to configure the PSCI:</p> <p>https://github.com/zephyrproject-rtos/zephyr/blob/main/dts/arm64/intel/intel_socfpga_agilex5.dtsi</p> <p></p>"},{"location":"zephyr-embedded/psci/psci/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"zephyr-embedded/qspi/qspi/","title":"QSPI Driver for Hard Processor System","text":"<p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"zephyr-embedded/qspi/qspi/#introduction","title":"Introduction","text":"<p>The HPS has the capability to access serial NOR Flash connected to the SDM quad serial peripheral interface (SPI). The quad SPI flash controller supports standard SPI Flash devices as well as high-performance dual and quad SPI Flash devices.</p> <p>On power up, the SDM owns the QSPI controller. For the HPS to use the QSPI controller, the HPS must request ownership from the SDM.</p> <p>For more information, please refer to the following link: Agilex 5 Hard Processor System Technical Reference Manual</p> <p></p>"},{"location":"zephyr-embedded/qspi/qspi/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at:</p> <p>QSPI driver (Polling-based mechanism - Upstreamed): https://github.com/zephyrprojectrtos/zephyr/blob/main/drivers/flash/flash_cadence_qspi_nor.c</p> <p>QSPI driver (with Interrupt-based mechanism \u2013 Not yet Upstreamed): https://github.com/altera-opensource/zephyrsocfpga/blob/socfpga_rel_23.4/drivers/flash/flash_cadence_qspi_nor.c</p>"},{"location":"zephyr-embedded/qspi/qspi/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Supported Operations: Read, Write, Erase</li> </ul>"},{"location":"zephyr-embedded/qspi/qspi/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_FLASH</p> <p></p> <p>CONFIG_FLASH_CAD_QSPI_NOR</p> <p></p> <p>CONFIG_FLASH_PAGE_LAYOUT</p> <p></p>"},{"location":"zephyr-embedded/qspi/qspi/#device-tree","title":"Device Tree","text":"<p>Device tree location to configure the QSPI: https://github.com/altera-opensource/zephyr-socfpga/blob/socfpga_rel_23.4/dts/arm64/intel/intel_socfpga_agilex5.dtsi</p> <p></p>"},{"location":"zephyr-embedded/qspi/qspi/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"zephyr-embedded/reset_manager/reset_manager/","title":"Reset Manager for Hard Processor System","text":"<p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"zephyr-embedded/reset_manager/reset_manager/#introduction","title":"Introduction","text":"<p>The Reset Manager generates individual module reset signals. Each module takes its module reset signal from the Reset Manager and conditions it to match the reset requirements of that module. The reset controller is designed to work with the SDM, which acts as the software-controlled master reset for the HPS. </p> <p>The following diagram shows the Reset Manager connectivity with Agilex5 HPS.</p> <p></p> <p>For more information, please refer to the following link: Agilex 5 Hard Processor System Technical Reference Manual</p>"},{"location":"zephyr-embedded/reset_manager/reset_manager/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://github.com/zephyrproject-rtos/zephyr/commits/main/drivers/reset/reset_intel_socfpga.c.</p>"},{"location":"zephyr-embedded/reset_manager/reset_manager/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Reset manager provides the capability to reset (bring it out of reset state) each peripheral in the system separately.</li> <li>It provides API to assert, de-assert, and toggle the reset line of each peripheral.</li> </ul>"},{"location":"zephyr-embedded/reset_manager/reset_manager/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_RESET</p> <p></p> <p>CONFIG_RESET_INTEL_SOCFPGA</p> <p></p>"},{"location":"zephyr-embedded/reset_manager/reset_manager/#device-tree","title":"Device Tree","text":"<p>Device tree location to configure the Reset manager IP:https://github.com/zephyrproject-rtos/zephyr/blob/main/dts/arm64/intel/intel_socfpga_agilex5.dtsi</p> <p></p>"},{"location":"zephyr-embedded/reset_manager/reset_manager/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"zephyr-embedded/seu/seu/","title":"Seu","text":"<p>Single Error Upset (SEU) Driver for Hard Processor System</p> <p>Last updated: July 01, 2024 </p> <p>Upstream Status: In Progress</p> <p>Devices supported: Agilex 5</p>"},{"location":"zephyr-embedded/seu/seu/#introduction","title":"Introduction","text":"<p>The SEU driver is meticulously crafted to fulfill a dual purpose within its operational framework. Its primary function lies in promptly detecting and reporting single event upsets errors to users. Additionally, this subsystem offers a streamlined mechanism for the deliberate insertion of errors.</p> <p>For more information, please refer to the Agilex5 SEU Mitigation.</p>"},{"location":"zephyr-embedded/seu/seu/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://github.com/zephyrproject-rtos/zephyr/pull/67097.</p>"},{"location":"zephyr-embedded/seu/seu/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Supports user register/unregister callback</li> <li>Support inject ECC error</li> <li>Support injects single/multibit errors</li> </ul>"},{"location":"zephyr-embedded/seu/seu/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_SEU</p> <p></p> <p>CONFIG_SEU_INTEL_SOCFPGA</p> <p></p> <p>CONFIG_SEU_MAX_CLIENT</p> <p></p> <p>CONFIG_ MAX_TIMEOUT_MSECS</p> <p></p>"},{"location":"zephyr-embedded/seu/seu/#device-tree","title":"Device Tree","text":"<p>Example Device tree location to configure the SEU is at https://github.com/zephyrproject-rtos/zephyr/blob/main/dts/arm64/intel/intel_socfpga_agilex5.dtsi.</p> <p></p>"},{"location":"zephyr-embedded/seu/seu/#known-issues","title":"Known Issues","text":"<p>None Known</p>"},{"location":"zephyr-embedded/smp/smp/","title":"SMP (Symmetric Multi-Processing) support for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"zephyr-embedded/smp/smp/#introduction","title":"Introduction","text":"<p>SMP (Symmetric Multi-Processing) refers to running operating system on multiple CPU cores. Zephyr kernel supports SMP which can turn on and off the non-boot cores (aka secondary cores).</p> <p>Zephyr sends \u201cCPU_ON\u201d and \u201cCPU_OFF\u201d functions via PSCI SMC to ATF BL31 to turn on and off individual core. Zephyr supports CPU hot plug which provides public API and command line to turn on and off the individual core including both boot and non-boot cores during runtime. </p> <p>The below diagram shows HPS SMP flow (CPU_ON and CPU_OFF) supported by Zephyr:</p> <p>For More information please refer to the Intel Agilex 5 Hard Processor System Technical Reference Manual.</p>"},{"location":"zephyr-embedded/smp/smp/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at:</p> <p>https://github.com/zephyrproject-rtos/zephyr/blob/main/arch/arm64/core/smp.c</p>"},{"location":"zephyr-embedded/smp/smp/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Bring up secondary cores; power-on, initialize the secondary cores and make them ready to run as part of multi-core boot system.</li> </ul>"},{"location":"zephyr-embedded/smp/smp/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_SMP</p> <p></p> <p>CONFIG_MP_MAX_NUM_CPUS=4</p> <p></p>"},{"location":"zephyr-embedded/smp/smp/#device-tree","title":"Device Tree","text":"<p>Example Device tree location to configure the smp:</p> <p>https://github.com/zephyrproject-rtos/zephyr/blob/main/dts/arm64/intel/intel_socfpga_agilex5.dtsi</p> <p></p>"},{"location":"zephyr-embedded/smp/smp/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"zephyr-embedded/timer/timer/","title":"General Purpose Timer Driver for Hard Processor System","text":"<p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"zephyr-embedded/timer/timer/#introduction","title":"Introduction","text":"<p>The hard processor system (HPS) provides four 32-bit general-purpose timers. The timer generates an interrupt when the 32-bit binary count-down timer reaches zero.</p> <p>Each timer can operate in one-shot mode (alarm mode) or periodic mode.</p> <p>For more information, please refer to the following link: Agilex 5 Hard Processor System Technical Reference Manual</p> <p></p>"},{"location":"zephyr-embedded/timer/timer/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://github.com/zephyrproject-rtos/zephyr/blob/main/drivers/counter/counter_dw_timer.c.</p>"},{"location":"zephyr-embedded/timer/timer/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>The timer can be configured to run as a one-shot timer(alarm).</li> <li>The timer can be configured to run as a periodic timer.</li> <li>Run timer in free running mode.</li> <li>Stop Timer.</li> </ul>"},{"location":"zephyr-embedded/timer/timer/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_COUNTER_SNPS_DW</p> <p></p>"},{"location":"zephyr-embedded/timer/timer/#device-tree","title":"Device Tree","text":"<p>Device tree location to configure the timer:https://github.com/zephyrproject-rtos/zephyr/blob/main/dts/arm64/intel/intel_socfpga_agilex5.dtsi</p> <p></p>"},{"location":"zephyr-embedded/timer/timer/#known-issues","title":"Known Issues","text":"<p>None known</p>"},{"location":"zephyr-embedded/uart/uart/","title":"UART Driver for Hard Processor System","text":"<p>Last updated: July 01, 2024 </p> <p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"zephyr-embedded/uart/uart/#introduction","title":"Introduction","text":"<p>Universal Asynchronous Receiver/Transmitter (UART) that is part of the hardened Hard Processor System (HPS) of the FPGA performs parallel to serial data conversion from HPS CPU to device or serial-to-parallel data conversion from device to HPS CPU. The UART controllers are based on an industry standard 16550 UART controller.</p> <p>The below diagram represents block diagram of the UART controller connected with other components in the system.</p> <p></p> <p>Functional blocks:</p> <ul> <li>Slave interface: connects to APB bus.</li> <li>Register block: responsible for the main UART functionality including control, status, and interrupt generation.</li> <li>FIFO block: responsible for FIFO control and storage.</li> <li>Baud block generator: produces the transmitter and receiver baud clock along with the output reference clock signal.</li> <li>Serial transmitter: converts the parallel data-written to the UART-into serial form and adds all additional bits, as specified by the control register, for transmission. These serial data referred to as a character.</li> <li>Serial receiver: converts the serial data character-specified by the control register-receive in the UART to parallel form. This block controls, parity, framing and line break detection errors.</li> </ul> <p>For More information please refer to the following link:</p> <p>Agilex 5 Hard Processor System Technical Reference Manual</p>"},{"location":"zephyr-embedded/uart/uart/#features","title":"Features","text":"<ul> <li>Programmable character properties, such as number of data bits per character, optional parity bits, and number of stop bits.</li> <li>Automatic hardware flow control as per the 16750 standards.</li> <li>128-byte transmit and receive FIFO buffers.</li> <li>Transmit Holding Register Empty (THRE) interrupt mode.</li> <li>DMA controller handshaking interface.</li> <li>Parity error detection, Framing error detection and, Line break detection.</li> <li>Prioritized interrupt identification with different interrupt types.</li> </ul>"},{"location":"zephyr-embedded/uart/uart/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://github.com/zephyrproject-rtos/zephyr/commits/main/drivers/serial/uart_ns16550.c.</p>"},{"location":"zephyr-embedded/uart/uart/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Manage the asynchronous communication between HPS CPU and device, and vice versa.</li> <li>Supports Full Duplex communication and Polling/Interrupt based mechanism for data transfer. </li> <li>Supports 16 bytes FIFO with automatic hardware flow control (RTS and CTS lines).</li> </ul>"},{"location":"zephyr-embedded/uart/uart/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_UART_NS16550</p> <p></p> <p>CONFIG_UART_INTERRUPT_DRIVEN</p> <p></p> <p>CONFIG_UART_NS16550_ACCESS_WORD_ONLY</p> <p></p>"},{"location":"zephyr-embedded/uart/uart/#device-tree","title":"Device Tree","text":"<p>Example Device tree location to configure the uart:</p> <p>https://github.com/zephyrproject-rtos/zephyr/blob/main/dts/arm64/intel/intel_socfpga_agilex5.dtsi</p> <p></p>"},{"location":"zephyr-embedded/uart/uart/#known-issues","title":"Known Issues","text":"<p>None Known</p>"},{"location":"zephyr-embedded/watchdog/watchdog/","title":"Watchdog Timer Driver for Hard Processor System","text":"<p>Upstream Status: Upstreamed</p> <p>Devices supported: Agilex 5</p>"},{"location":"zephyr-embedded/watchdog/watchdog/#introduction","title":"Introduction","text":"<p>The watchdog timer is used mainly to recover from system lockup that might be caused by software or system-related issues. </p> <p>The hard processor system (HPS) provides five Watchdog Timers based on synopsis designware.</p> <p>For more information, please refer to the following link: Agilex 5 Hard Processor System Technical Reference Manual</p> <p></p>"},{"location":"zephyr-embedded/watchdog/watchdog/#driver-sources","title":"Driver Sources","text":"<p>The source code for this driver can be found at https://github.com/zephyrproject-rtos/zephyr/blob/main/drivers/watchdog/wdt_dw.c.</p>"},{"location":"zephyr-embedded/watchdog/watchdog/#driver-capabilities","title":"Driver Capabilities","text":"<ul> <li>Watchdog can be enabled/disabled in driver initialization when zephyr boots through Kconfig option.</li> <li>Enable/Disable watchdog interrupt when the timer expires.</li> <li>Watchdog Timers counts down from a preset value to zero, then performs one of the following user-configurable operations:     * Generates a system reset.     * Generates an interrupt, restarts the timer, and if the timer is not cleared before a second timeout occurs, generates a system reset Driver can be configured for one of the possible three use cases.</li> </ul>"},{"location":"zephyr-embedded/watchdog/watchdog/#kernel-configurations","title":"Kernel Configurations","text":"<p>CONFIG_ WDT_DW</p> <p></p>"},{"location":"zephyr-embedded/watchdog/watchdog/#device-tree","title":"Device Tree","text":"<p>Device tree location to configure the Watchdog:https://github.com/zephyrproject-rtos/zephyr/blob/main/dts/arm64/intel/intel_socfpga_agilex5.dtsi</p> <p></p>"},{"location":"zephyr-embedded/watchdog/watchdog/#known-issues","title":"Known Issues","text":"<p>None known</p>"}]}